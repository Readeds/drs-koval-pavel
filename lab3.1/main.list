
main.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <NMI_Handler>:
/**
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void) {
 8000188:	b480      	push	{r7}
 800018a:	af00      	add	r7, sp, #0
}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000194:	4770      	bx	lr

08000196 <HardFault_Handler>:
/**
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void) {
 8000196:	b480      	push	{r7}
 8000198:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1) {}
 800019a:	e7fe      	b.n	800019a <HardFault_Handler+0x4>

0800019c <MemManage_Handler>:
/**
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void) {
 800019c:	b480      	push	{r7}
 800019e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1) {}
 80001a0:	e7fe      	b.n	80001a0 <MemManage_Handler+0x4>

080001a2 <BusFault_Handler>:
/**
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void) {
 80001a2:	b480      	push	{r7}
 80001a4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1) {}
 80001a6:	e7fe      	b.n	80001a6 <BusFault_Handler+0x4>

080001a8 <UsageFault_Handler>:
/**
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void) {
 80001a8:	b480      	push	{r7}
 80001aa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1) {}
 80001ac:	e7fe      	b.n	80001ac <UsageFault_Handler+0x4>

080001ae <SVC_Handler>:
/**
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void) {
 80001ae:	b480      	push	{r7}
 80001b0:	af00      	add	r7, sp, #0
}
 80001b2:	bf00      	nop
 80001b4:	46bd      	mov	sp, r7
 80001b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ba:	4770      	bx	lr

080001bc <DebugMon_Handler>:
/**
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void) {
 80001bc:	b480      	push	{r7}
 80001be:	af00      	add	r7, sp, #0
}
 80001c0:	bf00      	nop
 80001c2:	46bd      	mov	sp, r7
 80001c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001c8:	4770      	bx	lr

080001ca <PendSV_Handler>:
/**
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void) {
 80001ca:	b480      	push	{r7}
 80001cc:	af00      	add	r7, sp, #0
}
 80001ce:	bf00      	nop
 80001d0:	46bd      	mov	sp, r7
 80001d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001d6:	4770      	bx	lr

080001d8 <SysTick_Handler>:
/**
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void) {
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
}
 80001dc:	bf00      	nop
 80001de:	46bd      	mov	sp, r7
 80001e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e4:	4770      	bx	lr
	...

080001e8 <SystemInit>:
  *         Initialize the Embedded Flash Interface, the PLL and update the
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void) {
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2));  /* set CP10 and CP11 Full Access */
 80001ec:	4b16      	ldr	r3, [pc, #88]	; (8000248 <SystemInit+0x60>)
 80001ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001f2:	4a15      	ldr	r2, [pc, #84]	; (8000248 <SystemInit+0x60>)
 80001f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001fc:	4b13      	ldr	r3, [pc, #76]	; (800024c <SystemInit+0x64>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a12      	ldr	r2, [pc, #72]	; (800024c <SystemInit+0x64>)
 8000202:	f043 0301 	orr.w	r3, r3, #1
 8000206:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000208:	4b10      	ldr	r3, [pc, #64]	; (800024c <SystemInit+0x64>)
 800020a:	2200      	movs	r2, #0
 800020c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800020e:	4b0f      	ldr	r3, [pc, #60]	; (800024c <SystemInit+0x64>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4a0e      	ldr	r2, [pc, #56]	; (800024c <SystemInit+0x64>)
 8000214:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800021c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800021e:	4b0b      	ldr	r3, [pc, #44]	; (800024c <SystemInit+0x64>)
 8000220:	4a0b      	ldr	r2, [pc, #44]	; (8000250 <SystemInit+0x68>)
 8000222:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000224:	4b09      	ldr	r3, [pc, #36]	; (800024c <SystemInit+0x64>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a08      	ldr	r2, [pc, #32]	; (800024c <SystemInit+0x64>)
 800022a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800022e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000230:	4b06      	ldr	r3, [pc, #24]	; (800024c <SystemInit+0x64>)
 8000232:	2200      	movs	r2, #0
 8000234:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl();
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the System clock source, PLL Multiplier and Divider factors,
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000236:	f000 f80d 	bl	8000254 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800023a:	4b03      	ldr	r3, [pc, #12]	; (8000248 <SystemInit+0x60>)
 800023c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000240:	609a      	str	r2, [r3, #8]
#endif
}
 8000242:	bf00      	nop
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	e000ed00 	.word	0xe000ed00
 800024c:	40023800 	.word	0x40023800
 8000250:	24003010 	.word	0x24003010

08000254 <SetSysClock>:
  * @Note   This function should be called only once the RCC clock configuration
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void) {
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800025a:	2300      	movs	r3, #0
 800025c:	607b      	str	r3, [r7, #4]
 800025e:	2300      	movs	r3, #0
 8000260:	603b      	str	r3, [r7, #0]

  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000262:	4b36      	ldr	r3, [pc, #216]	; (800033c <SetSysClock+0xe8>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	4a35      	ldr	r2, [pc, #212]	; (800033c <SetSysClock+0xe8>)
 8000268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800026c:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800026e:	4b33      	ldr	r3, [pc, #204]	; (800033c <SetSysClock+0xe8>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000276:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	3301      	adds	r3, #1
 800027c:	607b      	str	r3, [r7, #4]
  }
  while ((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800027e:	683b      	ldr	r3, [r7, #0]
 8000280:	2b00      	cmp	r3, #0
 8000282:	d103      	bne.n	800028c <SetSysClock+0x38>
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800028a:	d1f0      	bne.n	800026e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET) {
 800028c:	4b2b      	ldr	r3, [pc, #172]	; (800033c <SetSysClock+0xe8>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000294:	2b00      	cmp	r3, #0
 8000296:	d002      	beq.n	800029e <SetSysClock+0x4a>
    HSEStatus = (uint32_t)0x01;
 8000298:	2301      	movs	r3, #1
 800029a:	603b      	str	r3, [r7, #0]
 800029c:	e001      	b.n	80002a2 <SetSysClock+0x4e>
  } else {
    HSEStatus = (uint32_t)0x00;
 800029e:	2300      	movs	r3, #0
 80002a0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01) {
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d142      	bne.n	800032e <SetSysClock+0xda>
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80002a8:	4b24      	ldr	r3, [pc, #144]	; (800033c <SetSysClock+0xe8>)
 80002aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002ac:	4a23      	ldr	r2, [pc, #140]	; (800033c <SetSysClock+0xe8>)
 80002ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002b2:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80002b4:	4b22      	ldr	r3, [pc, #136]	; (8000340 <SetSysClock+0xec>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a21      	ldr	r2, [pc, #132]	; (8000340 <SetSysClock+0xec>)
 80002ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80002be:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80002c0:	4b1e      	ldr	r3, [pc, #120]	; (800033c <SetSysClock+0xe8>)
 80002c2:	4a1e      	ldr	r2, [pc, #120]	; (800033c <SetSysClock+0xe8>)
 80002c4:	689b      	ldr	r3, [r3, #8]
 80002c6:	6093      	str	r3, [r2, #8]

#if defined (STM32F40_41xxx) || defined (STM32F427_437xx) || defined (STM32F429_439xx)
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80002c8:	4b1c      	ldr	r3, [pc, #112]	; (800033c <SetSysClock+0xe8>)
 80002ca:	689b      	ldr	r3, [r3, #8]
 80002cc:	4a1b      	ldr	r2, [pc, #108]	; (800033c <SetSysClock+0xe8>)
 80002ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002d2:	6093      	str	r3, [r2, #8]

    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80002d4:	4b19      	ldr	r3, [pc, #100]	; (800033c <SetSysClock+0xe8>)
 80002d6:	689b      	ldr	r3, [r3, #8]
 80002d8:	4a18      	ldr	r2, [pc, #96]	; (800033c <SetSysClock+0xe8>)
 80002da:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80002de:	6093      	str	r3, [r2, #8]
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) - 1) << 16) |
 80002e0:	4b16      	ldr	r3, [pc, #88]	; (800033c <SetSysClock+0xe8>)
 80002e2:	4a18      	ldr	r2, [pc, #96]	; (8000344 <SetSysClock+0xf0>)
 80002e4:	605a      	str	r2, [r3, #4]
          (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80002e6:	4b15      	ldr	r3, [pc, #84]	; (800033c <SetSysClock+0xe8>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	4a14      	ldr	r2, [pc, #80]	; (800033c <SetSysClock+0xe8>)
 80002ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002f0:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while ((RCC->CR & RCC_CR_PLLRDY) == 0) {}
 80002f2:	bf00      	nop
 80002f4:	4b11      	ldr	r3, [pc, #68]	; (800033c <SetSysClock+0xe8>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d0f9      	beq.n	80002f4 <SetSysClock+0xa0>
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
#endif /* STM32F427_437x || STM32F429_439xx  */

#if defined (STM32F40_41xxx)
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 8000300:	4b11      	ldr	r3, [pc, #68]	; (8000348 <SetSysClock+0xf4>)
 8000302:	f240 7205 	movw	r2, #1797	; 0x705
 8000306:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000308:	4b0c      	ldr	r3, [pc, #48]	; (800033c <SetSysClock+0xe8>)
 800030a:	689b      	ldr	r3, [r3, #8]
 800030c:	4a0b      	ldr	r2, [pc, #44]	; (800033c <SetSysClock+0xe8>)
 800030e:	f023 0303 	bic.w	r3, r3, #3
 8000312:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000314:	4b09      	ldr	r3, [pc, #36]	; (800033c <SetSysClock+0xe8>)
 8000316:	689b      	ldr	r3, [r3, #8]
 8000318:	4a08      	ldr	r2, [pc, #32]	; (800033c <SetSysClock+0xe8>)
 800031a:	f043 0302 	orr.w	r3, r3, #2
 800031e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8000320:	bf00      	nop
 8000322:	4b06      	ldr	r3, [pc, #24]	; (800033c <SetSysClock+0xe8>)
 8000324:	689b      	ldr	r3, [r3, #8]
 8000326:	f003 030c 	and.w	r3, r3, #12
 800032a:	2b08      	cmp	r3, #8
 800032c:	d1f9      	bne.n	8000322 <SetSysClock+0xce>
    {}
  } else { /* If HSE fails to start-up, the application will have wrong clock
                configuration. User can add here some code to deal with this error */
  }

}
 800032e:	bf00      	nop
 8000330:	370c      	adds	r7, #12
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	40023800 	.word	0x40023800
 8000340:	40007000 	.word	0x40007000
 8000344:	07405408 	.word	0x07405408
 8000348:	40023c00 	.word	0x40023c00

0800034c <all_leds1>:



static
int all_leds1 ()
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000352:	2101      	movs	r1, #1
 8000354:	2001      	movs	r0, #1
 8000356:	f000 fa2b 	bl	80007b0 <RCC_AHB1PeriphClockCmd>
  GPIO_InitTypeDef  GPIO_InitStructure;
  GPIO_InitStructure.GPIO_Pin = ALL_LED6;
 800035a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800035e:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000360:	2301      	movs	r3, #1
 8000362:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000364:	2300      	movs	r3, #0
 8000366:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000368:	2302      	movs	r3, #2
 800036a:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800036c:	2300      	movs	r3, #0
 800036e:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000370:	463b      	mov	r3, r7
 8000372:	4619      	mov	r1, r3
 8000374:	4806      	ldr	r0, [pc, #24]	; (8000390 <all_leds1+0x44>)
 8000376:	f000 fb84 	bl	8000a82 <GPIO_Init>
  GPIO_SetBits(GPIOA, ALL_LED6 );
 800037a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800037e:	4804      	ldr	r0, [pc, #16]	; (8000390 <all_leds1+0x44>)
 8000380:	f000 fc0d 	bl	8000b9e <GPIO_SetBits>

  return 0;
 8000384:	2300      	movs	r3, #0


}
 8000386:	4618      	mov	r0, r3
 8000388:	3708      	adds	r7, #8
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	40020000 	.word	0x40020000

08000394 <button_init>:
static
int button_init ()
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b086      	sub	sp, #24
 8000398:	af00      	add	r7, sp, #0
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 800039a:	2101      	movs	r1, #1
 800039c:	2010      	movs	r0, #16
 800039e:	f000 fa07 	bl	80007b0 <RCC_AHB1PeriphClockCmd>
  GPIO_InitTypeDef GPIO_Init_Button;
  GPIO_Init_Button.GPIO_Pin = BUTTON_L | BUTTON_R;
 80003a2:	2303      	movs	r3, #3
 80003a4:	613b      	str	r3, [r7, #16]
  GPIO_Init_Button.GPIO_Mode = GPIO_Mode_IN;
 80003a6:	2300      	movs	r3, #0
 80003a8:	753b      	strb	r3, [r7, #20]
  GPIO_Init_Button.GPIO_OType = GPIO_OType_PP;
 80003aa:	2300      	movs	r3, #0
 80003ac:	75bb      	strb	r3, [r7, #22]
  GPIO_Init_Button.GPIO_Speed = GPIO_Speed_100MHz;
 80003ae:	2303      	movs	r3, #3
 80003b0:	757b      	strb	r3, [r7, #21]
  GPIO_Init_Button.GPIO_PuPd = GPIO_PuPd_UP;
 80003b2:	2301      	movs	r3, #1
 80003b4:	75fb      	strb	r3, [r7, #23]
  GPIO_Init(GPIOE, &GPIO_Init_Button);
 80003b6:	f107 0310 	add.w	r3, r7, #16
 80003ba:	4619      	mov	r1, r3
 80003bc:	4814      	ldr	r0, [pc, #80]	; (8000410 <button_init+0x7c>)
 80003be:	f000 fb60 	bl	8000a82 <GPIO_Init>
  
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80003c2:	2101      	movs	r1, #1
 80003c4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80003c8:	f000 fa32 	bl	8000830 <RCC_APB2PeriphClockCmd>
  SYSCFG_EXTILineConfig (EXTI_PortSourceGPIOE,EXTI_PinSource0);
 80003cc:	2100      	movs	r1, #0
 80003ce:	2004      	movs	r0, #4
 80003d0:	f000 fa4e 	bl	8000870 <SYSCFG_EXTILineConfig>
  EXTI_InitTypeDef exti;
  exti.EXTI_Line = EXTI_Line0;
 80003d4:	2301      	movs	r3, #1
 80003d6:	60bb      	str	r3, [r7, #8]
  exti.EXTI_Mode = EXTI_Mode_Interrupt;
 80003d8:	2300      	movs	r3, #0
 80003da:	733b      	strb	r3, [r7, #12]
  exti.EXTI_Trigger = EXTI_Trigger_Rising;
 80003dc:	2308      	movs	r3, #8
 80003de:	737b      	strb	r3, [r7, #13]
  exti.EXTI_LineCmd = ENABLE;
 80003e0:	2301      	movs	r3, #1
 80003e2:	73bb      	strb	r3, [r7, #14]

  EXTI_Init(&exti);
 80003e4:	f107 0308 	add.w	r3, r7, #8
 80003e8:	4618      	mov	r0, r3
 80003ea:	f000 f945 	bl	8000678 <EXTI_Init>

  NVIC_InitTypeDef nvic;
  nvic.NVIC_IRQChannel = EXTI0_IRQn;
 80003ee:	2306      	movs	r3, #6
 80003f0:	713b      	strb	r3, [r7, #4]
  nvic.NVIC_IRQChannelPreemptionPriority = 0x01;
 80003f2:	2301      	movs	r3, #1
 80003f4:	717b      	strb	r3, [r7, #5]
  nvic.NVIC_IRQChannelSubPriority=0x01;
 80003f6:	2301      	movs	r3, #1
 80003f8:	71bb      	strb	r3, [r7, #6]
  nvic.NVIC_IRQChannelCmd = ENABLE;
 80003fa:	2301      	movs	r3, #1
 80003fc:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&nvic);
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	4618      	mov	r0, r3
 8000402:	f000 f8d7 	bl	80005b4 <NVIC_Init>
  return 0;
 8000406:	2300      	movs	r3, #0
 
}
 8000408:	4618      	mov	r0, r3
 800040a:	3718      	adds	r7, #24
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	40021000 	.word	0x40021000

08000414 <timers>:

static
int timers(){
 8000414:	b580      	push	{r7, lr}
 8000416:	b084      	sub	sp, #16
 8000418:	af00      	add	r7, sp, #0
    TIM_TimeBaseInitTypeDef timer;
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 800041a:	2101      	movs	r1, #1
 800041c:	2001      	movs	r0, #1
 800041e:	f000 f9e7 	bl	80007f0 <RCC_APB1PeriphClockCmd>
    timer.TIM_Prescaler = 84;
 8000422:	2354      	movs	r3, #84	; 0x54
 8000424:	80bb      	strh	r3, [r7, #4]
    timer.TIM_CounterMode = TIM_CounterMode_Up;
 8000426:	2300      	movs	r3, #0
 8000428:	80fb      	strh	r3, [r7, #6]
    timer.TIM_Period = 1000000;
 800042a:	4b11      	ldr	r3, [pc, #68]	; (8000470 <timers+0x5c>)
 800042c:	60bb      	str	r3, [r7, #8]
    timer.TIM_ClockDivision = TIM_CKD_DIV1;
 800042e:	2300      	movs	r3, #0
 8000430:	81bb      	strh	r3, [r7, #12]
    timer.TIM_RepetitionCounter = 0;
 8000432:	2300      	movs	r3, #0
 8000434:	73bb      	strb	r3, [r7, #14]
    TIM_TimeBaseInit(TIM2, &timer);
 8000436:	1d3b      	adds	r3, r7, #4
 8000438:	4619      	mov	r1, r3
 800043a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800043e:	f000 fa59 	bl	80008f4 <TIM_TimeBaseInit>

    NVIC_InitTypeDef nvic;
    nvic.NVIC_IRQChannel = TIM2_IRQn;
 8000442:	231c      	movs	r3, #28
 8000444:	703b      	strb	r3, [r7, #0]
    nvic.NVIC_IRQChannelPreemptionPriority = 0;
 8000446:	2300      	movs	r3, #0
 8000448:	707b      	strb	r3, [r7, #1]
    nvic.NVIC_IRQChannelSubPriority = 1;
 800044a:	2301      	movs	r3, #1
 800044c:	70bb      	strb	r3, [r7, #2]
    nvic.NVIC_IRQChannelCmd = ENABLE;
 800044e:	2301      	movs	r3, #1
 8000450:	70fb      	strb	r3, [r7, #3]
    NVIC_Init(&nvic);
 8000452:	463b      	mov	r3, r7
 8000454:	4618      	mov	r0, r3
 8000456:	f000 f8ad 	bl	80005b4 <NVIC_Init>

    TIM_Cmd(TIM2, ENABLE);
 800045a:	2101      	movs	r1, #1
 800045c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000460:	f000 fab4 	bl	80009cc <TIM_Cmd>

    return 0;
 8000464:	2300      	movs	r3, #0

    
}
 8000466:	4618      	mov	r0, r3
 8000468:	3710      	adds	r7, #16
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	000f4240 	.word	0x000f4240

08000474 <TIM2_IRQHandler>:

  void TIM2_IRQHandler(void){
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
    if(TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET){
 8000478:	2101      	movs	r1, #1
 800047a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800047e:	f000 fac5 	bl	8000a0c <TIM_GetITStatus>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d03a      	beq.n	80004fe <TIM2_IRQHandler+0x8a>
	TIM_ClearITPendingBit(TIM2 ,TIM_IT_Update);
 8000488:	2101      	movs	r1, #1
 800048a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800048e:	f000 fae7 	bl	8000a60 <TIM_ClearITPendingBit>

	GPIO_SetBits(GPIOA,LED[flag]);
 8000492:	4b1c      	ldr	r3, [pc, #112]	; (8000504 <TIM2_IRQHandler+0x90>)
 8000494:	f993 3000 	ldrsb.w	r3, [r3]
 8000498:	461a      	mov	r2, r3
 800049a:	4b1b      	ldr	r3, [pc, #108]	; (8000508 <TIM2_IRQHandler+0x94>)
 800049c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80004a0:	b29b      	uxth	r3, r3
 80004a2:	4619      	mov	r1, r3
 80004a4:	4819      	ldr	r0, [pc, #100]	; (800050c <TIM2_IRQHandler+0x98>)
 80004a6:	f000 fb7a 	bl	8000b9e <GPIO_SetBits>
	flag = (3+ (flag - counter) %3 ) %3;
 80004aa:	4b16      	ldr	r3, [pc, #88]	; (8000504 <TIM2_IRQHandler+0x90>)
 80004ac:	f993 3000 	ldrsb.w	r3, [r3]
 80004b0:	461a      	mov	r2, r3
 80004b2:	4b17      	ldr	r3, [pc, #92]	; (8000510 <TIM2_IRQHandler+0x9c>)
 80004b4:	f993 3000 	ldrsb.w	r3, [r3]
 80004b8:	1ad1      	subs	r1, r2, r3
 80004ba:	4b16      	ldr	r3, [pc, #88]	; (8000514 <TIM2_IRQHandler+0xa0>)
 80004bc:	fb83 3201 	smull	r3, r2, r3, r1
 80004c0:	17cb      	asrs	r3, r1, #31
 80004c2:	1ad2      	subs	r2, r2, r3
 80004c4:	4613      	mov	r3, r2
 80004c6:	005b      	lsls	r3, r3, #1
 80004c8:	4413      	add	r3, r2
 80004ca:	1aca      	subs	r2, r1, r3
 80004cc:	3203      	adds	r2, #3
 80004ce:	4b11      	ldr	r3, [pc, #68]	; (8000514 <TIM2_IRQHandler+0xa0>)
 80004d0:	fb83 3102 	smull	r3, r1, r3, r2
 80004d4:	17d3      	asrs	r3, r2, #31
 80004d6:	1ac9      	subs	r1, r1, r3
 80004d8:	460b      	mov	r3, r1
 80004da:	005b      	lsls	r3, r3, #1
 80004dc:	440b      	add	r3, r1
 80004de:	1ad1      	subs	r1, r2, r3
 80004e0:	b24a      	sxtb	r2, r1
 80004e2:	4b08      	ldr	r3, [pc, #32]	; (8000504 <TIM2_IRQHandler+0x90>)
 80004e4:	701a      	strb	r2, [r3, #0]
	GPIO_ResetBits(GPIOA,LED[flag]);
 80004e6:	4b07      	ldr	r3, [pc, #28]	; (8000504 <TIM2_IRQHandler+0x90>)
 80004e8:	f993 3000 	ldrsb.w	r3, [r3]
 80004ec:	461a      	mov	r2, r3
 80004ee:	4b06      	ldr	r3, [pc, #24]	; (8000508 <TIM2_IRQHandler+0x94>)
 80004f0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80004f4:	b29b      	uxth	r3, r3
 80004f6:	4619      	mov	r1, r3
 80004f8:	4804      	ldr	r0, [pc, #16]	; (800050c <TIM2_IRQHandler+0x98>)
 80004fa:	f000 fb5f 	bl	8000bbc <GPIO_ResetBits>
  }
}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	20000008 	.word	0x20000008
 8000508:	20000000 	.word	0x20000000
 800050c:	40020000 	.word	0x40020000
 8000510:	20000009 	.word	0x20000009
 8000514:	55555556 	.word	0x55555556

08000518 <EXTI0_IRQHandler>:
  void EXTI0_IRQHandler(void){
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
    if(EXTI_GetITStatus(BUTTON_L) != RESET);
 800051c:	2001      	movs	r0, #1
 800051e:	f000 f91d 	bl	800075c <EXTI_GetITStatus>
	    {
	      EXTI_ClearITPendingBit(BUTTON_L);
 8000522:	2001      	movs	r0, #1
 8000524:	f000 f934 	bl	8000790 <EXTI_ClearITPendingBit>
	      counter = -counter;
 8000528:	4b05      	ldr	r3, [pc, #20]	; (8000540 <EXTI0_IRQHandler+0x28>)
 800052a:	f993 3000 	ldrsb.w	r3, [r3]
 800052e:	b2db      	uxtb	r3, r3
 8000530:	425b      	negs	r3, r3
 8000532:	b2db      	uxtb	r3, r3
 8000534:	b25a      	sxtb	r2, r3
 8000536:	4b02      	ldr	r3, [pc, #8]	; (8000540 <EXTI0_IRQHandler+0x28>)
 8000538:	701a      	strb	r2, [r3, #0]
	    }
}
 800053a:	bf00      	nop
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	20000009 	.word	0x20000009

08000544 <main>:
int main(void){
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  flag=0;
 8000548:	4b06      	ldr	r3, [pc, #24]	; (8000564 <main+0x20>)
 800054a:	2200      	movs	r2, #0
 800054c:	701a      	strb	r2, [r3, #0]
  counter = 1;
 800054e:	4b06      	ldr	r3, [pc, #24]	; (8000568 <main+0x24>)
 8000550:	2201      	movs	r2, #1
 8000552:	701a      	strb	r2, [r3, #0]
  all_leds1();
 8000554:	f7ff fefa 	bl	800034c <all_leds1>
  button_init();
 8000558:	f7ff ff1c 	bl	8000394 <button_init>
  timers();
 800055c:	f7ff ff5a 	bl	8000414 <timers>
  while(1){
 8000560:	e7fe      	b.n	8000560 <main+0x1c>
 8000562:	bf00      	nop
 8000564:	20000008 	.word	0x20000008
 8000568:	20000009 	.word	0x20000009

0800056c <Reset_Handler>:
 800056c:	2100      	movs	r1, #0
 800056e:	e003      	b.n	8000578 <LoopCopyDataInit>

08000570 <CopyDataInit>:
 8000570:	4b0a      	ldr	r3, [pc, #40]	; (800059c <LoopFillZerobss+0x10>)
 8000572:	585b      	ldr	r3, [r3, r1]
 8000574:	5043      	str	r3, [r0, r1]
 8000576:	3104      	adds	r1, #4

08000578 <LoopCopyDataInit>:
 8000578:	4809      	ldr	r0, [pc, #36]	; (80005a0 <LoopFillZerobss+0x14>)
 800057a:	4b0a      	ldr	r3, [pc, #40]	; (80005a4 <LoopFillZerobss+0x18>)
 800057c:	1842      	adds	r2, r0, r1
 800057e:	429a      	cmp	r2, r3
 8000580:	d3f6      	bcc.n	8000570 <CopyDataInit>
 8000582:	4a09      	ldr	r2, [pc, #36]	; (80005a8 <LoopFillZerobss+0x1c>)
 8000584:	e002      	b.n	800058c <LoopFillZerobss>

08000586 <FillZerobss>:
 8000586:	2300      	movs	r3, #0
 8000588:	f842 3b04 	str.w	r3, [r2], #4

0800058c <LoopFillZerobss>:
 800058c:	4b07      	ldr	r3, [pc, #28]	; (80005ac <LoopFillZerobss+0x20>)
 800058e:	429a      	cmp	r2, r3
 8000590:	d3f9      	bcc.n	8000586 <FillZerobss>
 8000592:	f7ff fe29 	bl	80001e8 <SystemInit>
 8000596:	f7ff ffd5 	bl	8000544 <main>
 800059a:	4770      	bx	lr
 800059c:	08000bdc 	.word	0x08000bdc
 80005a0:	20000000 	.word	0x20000000
 80005a4:	20000008 	.word	0x20000008
 80005a8:	20000008 	.word	0x20000008
 80005ac:	20000008 	.word	0x20000008

080005b0 <ADC_IRQHandler>:
 80005b0:	e7fe      	b.n	80005b0 <ADC_IRQHandler>
	...

080005b4 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80005bc:	2300      	movs	r3, #0
 80005be:	73fb      	strb	r3, [r7, #15]
 80005c0:	2300      	movs	r3, #0
 80005c2:	73bb      	strb	r3, [r7, #14]
 80005c4:	230f      	movs	r3, #15
 80005c6:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	78db      	ldrb	r3, [r3, #3]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d039      	beq.n	8000644 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80005d0:	4b27      	ldr	r3, [pc, #156]	; (8000670 <NVIC_Init+0xbc>)
 80005d2:	68db      	ldr	r3, [r3, #12]
 80005d4:	43db      	mvns	r3, r3
 80005d6:	0a1b      	lsrs	r3, r3, #8
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	f003 0307 	and.w	r3, r3, #7
 80005de:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80005e0:	7bfb      	ldrb	r3, [r7, #15]
 80005e2:	f1c3 0304 	rsb	r3, r3, #4
 80005e6:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80005e8:	7b7a      	ldrb	r2, [r7, #13]
 80005ea:	7bfb      	ldrb	r3, [r7, #15]
 80005ec:	fa42 f303 	asr.w	r3, r2, r3
 80005f0:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	785b      	ldrb	r3, [r3, #1]
 80005f6:	461a      	mov	r2, r3
 80005f8:	7bbb      	ldrb	r3, [r7, #14]
 80005fa:	fa02 f303 	lsl.w	r3, r2, r3
 80005fe:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	789a      	ldrb	r2, [r3, #2]
 8000604:	7b7b      	ldrb	r3, [r7, #13]
 8000606:	4013      	ands	r3, r2
 8000608:	b2da      	uxtb	r2, r3
 800060a:	7bfb      	ldrb	r3, [r7, #15]
 800060c:	4313      	orrs	r3, r2
 800060e:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000610:	7bfb      	ldrb	r3, [r7, #15]
 8000612:	011b      	lsls	r3, r3, #4
 8000614:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000616:	4a17      	ldr	r2, [pc, #92]	; (8000674 <NVIC_Init+0xc0>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	4413      	add	r3, r2
 800061e:	7bfa      	ldrb	r2, [r7, #15]
 8000620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000624:	4a13      	ldr	r2, [pc, #76]	; (8000674 <NVIC_Init+0xc0>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	095b      	lsrs	r3, r3, #5
 800062c:	b2db      	uxtb	r3, r3
 800062e:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	f003 031f 	and.w	r3, r3, #31
 8000638:	2101      	movs	r1, #1
 800063a:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800063e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000642:	e00f      	b.n	8000664 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000644:	490b      	ldr	r1, [pc, #44]	; (8000674 <NVIC_Init+0xc0>)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	095b      	lsrs	r3, r3, #5
 800064c:	b2db      	uxtb	r3, r3
 800064e:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	f003 031f 	and.w	r3, r3, #31
 8000658:	2201      	movs	r2, #1
 800065a:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800065c:	f100 0320 	add.w	r3, r0, #32
 8000660:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000664:	bf00      	nop
 8000666:	3714      	adds	r7, #20
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	e000ed00 	.word	0xe000ed00
 8000674:	e000e100 	.word	0xe000e100

08000678 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000680:	2300      	movs	r3, #0
 8000682:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8000684:	4b34      	ldr	r3, [pc, #208]	; (8000758 <EXTI_Init+0xe0>)
 8000686:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	799b      	ldrb	r3, [r3, #6]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d04f      	beq.n	8000730 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000690:	4931      	ldr	r1, [pc, #196]	; (8000758 <EXTI_Init+0xe0>)
 8000692:	4b31      	ldr	r3, [pc, #196]	; (8000758 <EXTI_Init+0xe0>)
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	43db      	mvns	r3, r3
 800069c:	4013      	ands	r3, r2
 800069e:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80006a0:	492d      	ldr	r1, [pc, #180]	; (8000758 <EXTI_Init+0xe0>)
 80006a2:	4b2d      	ldr	r3, [pc, #180]	; (8000758 <EXTI_Init+0xe0>)
 80006a4:	685a      	ldr	r2, [r3, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	43db      	mvns	r3, r3
 80006ac:	4013      	ands	r3, r2
 80006ae:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	791b      	ldrb	r3, [r3, #4]
 80006b4:	461a      	mov	r2, r3
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	4413      	add	r3, r2
 80006ba:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	68fa      	ldr	r2, [r7, #12]
 80006c0:	6811      	ldr	r1, [r2, #0]
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	6812      	ldr	r2, [r2, #0]
 80006c6:	430a      	orrs	r2, r1
 80006c8:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 80006ca:	4923      	ldr	r1, [pc, #140]	; (8000758 <EXTI_Init+0xe0>)
 80006cc:	4b22      	ldr	r3, [pc, #136]	; (8000758 <EXTI_Init+0xe0>)
 80006ce:	689a      	ldr	r2, [r3, #8]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	43db      	mvns	r3, r3
 80006d6:	4013      	ands	r3, r2
 80006d8:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80006da:	491f      	ldr	r1, [pc, #124]	; (8000758 <EXTI_Init+0xe0>)
 80006dc:	4b1e      	ldr	r3, [pc, #120]	; (8000758 <EXTI_Init+0xe0>)
 80006de:	68da      	ldr	r2, [r3, #12]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	43db      	mvns	r3, r3
 80006e6:	4013      	ands	r3, r2
 80006e8:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	795b      	ldrb	r3, [r3, #5]
 80006ee:	2b10      	cmp	r3, #16
 80006f0:	d10e      	bne.n	8000710 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80006f2:	4919      	ldr	r1, [pc, #100]	; (8000758 <EXTI_Init+0xe0>)
 80006f4:	4b18      	ldr	r3, [pc, #96]	; (8000758 <EXTI_Init+0xe0>)
 80006f6:	689a      	ldr	r2, [r3, #8]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4313      	orrs	r3, r2
 80006fe:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000700:	4915      	ldr	r1, [pc, #84]	; (8000758 <EXTI_Init+0xe0>)
 8000702:	4b15      	ldr	r3, [pc, #84]	; (8000758 <EXTI_Init+0xe0>)
 8000704:	68da      	ldr	r2, [r3, #12]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4313      	orrs	r3, r2
 800070c:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 800070e:	e01d      	b.n	800074c <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <EXTI_Init+0xe0>)
 8000712:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	795b      	ldrb	r3, [r3, #5]
 8000718:	461a      	mov	r2, r3
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	4413      	add	r3, r2
 800071e:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	68fa      	ldr	r2, [r7, #12]
 8000724:	6811      	ldr	r1, [r2, #0]
 8000726:	687a      	ldr	r2, [r7, #4]
 8000728:	6812      	ldr	r2, [r2, #0]
 800072a:	430a      	orrs	r2, r1
 800072c:	601a      	str	r2, [r3, #0]
}
 800072e:	e00d      	b.n	800074c <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	791b      	ldrb	r3, [r3, #4]
 8000734:	461a      	mov	r2, r3
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	4413      	add	r3, r2
 800073a:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	68fa      	ldr	r2, [r7, #12]
 8000740:	6811      	ldr	r1, [r2, #0]
 8000742:	687a      	ldr	r2, [r7, #4]
 8000744:	6812      	ldr	r2, [r2, #0]
 8000746:	43d2      	mvns	r2, r2
 8000748:	400a      	ands	r2, r1
 800074a:	601a      	str	r2, [r3, #0]
}
 800074c:	bf00      	nop
 800074e:	3714      	adds	r7, #20
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	40013c00 	.word	0x40013c00

0800075c <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 800075c:	b480      	push	{r7}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000764:	2300      	movs	r3, #0
 8000766:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8000768:	4b08      	ldr	r3, [pc, #32]	; (800078c <EXTI_GetITStatus+0x30>)
 800076a:	695a      	ldr	r2, [r3, #20]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4013      	ands	r3, r2
 8000770:	2b00      	cmp	r3, #0
 8000772:	d002      	beq.n	800077a <EXTI_GetITStatus+0x1e>
  {
    bitstatus = SET;
 8000774:	2301      	movs	r3, #1
 8000776:	73fb      	strb	r3, [r7, #15]
 8000778:	e001      	b.n	800077e <EXTI_GetITStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 800077a:	2300      	movs	r3, #0
 800077c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800077e:	7bfb      	ldrb	r3, [r7, #15]
  
}
 8000780:	4618      	mov	r0, r3
 8000782:	3714      	adds	r7, #20
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	40013c00 	.word	0x40013c00

08000790 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000798:	4a04      	ldr	r2, [pc, #16]	; (80007ac <EXTI_ClearITPendingBit+0x1c>)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	6153      	str	r3, [r2, #20]
}
 800079e:	bf00      	nop
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	40013c00 	.word	0x40013c00

080007b0 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	460b      	mov	r3, r1
 80007ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80007bc:	78fb      	ldrb	r3, [r7, #3]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d006      	beq.n	80007d0 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80007c2:	490a      	ldr	r1, [pc, #40]	; (80007ec <RCC_AHB1PeriphClockCmd+0x3c>)
 80007c4:	4b09      	ldr	r3, [pc, #36]	; (80007ec <RCC_AHB1PeriphClockCmd+0x3c>)
 80007c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	4313      	orrs	r3, r2
 80007cc:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80007ce:	e006      	b.n	80007de <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80007d0:	4906      	ldr	r1, [pc, #24]	; (80007ec <RCC_AHB1PeriphClockCmd+0x3c>)
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <RCC_AHB1PeriphClockCmd+0x3c>)
 80007d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	43db      	mvns	r3, r3
 80007da:	4013      	ands	r3, r2
 80007dc:	630b      	str	r3, [r1, #48]	; 0x30
}
 80007de:	bf00      	nop
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800

080007f0 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	460b      	mov	r3, r1
 80007fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80007fc:	78fb      	ldrb	r3, [r7, #3]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d006      	beq.n	8000810 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000802:	490a      	ldr	r1, [pc, #40]	; (800082c <RCC_APB1PeriphClockCmd+0x3c>)
 8000804:	4b09      	ldr	r3, [pc, #36]	; (800082c <RCC_APB1PeriphClockCmd+0x3c>)
 8000806:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4313      	orrs	r3, r2
 800080c:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800080e:	e006      	b.n	800081e <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000810:	4906      	ldr	r1, [pc, #24]	; (800082c <RCC_APB1PeriphClockCmd+0x3c>)
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <RCC_APB1PeriphClockCmd+0x3c>)
 8000814:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	43db      	mvns	r3, r3
 800081a:	4013      	ands	r3, r2
 800081c:	640b      	str	r3, [r1, #64]	; 0x40
}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800

08000830 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	460b      	mov	r3, r1
 800083a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800083c:	78fb      	ldrb	r3, [r7, #3]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d006      	beq.n	8000850 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000842:	490a      	ldr	r1, [pc, #40]	; (800086c <RCC_APB2PeriphClockCmd+0x3c>)
 8000844:	4b09      	ldr	r3, [pc, #36]	; (800086c <RCC_APB2PeriphClockCmd+0x3c>)
 8000846:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4313      	orrs	r3, r2
 800084c:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800084e:	e006      	b.n	800085e <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000850:	4906      	ldr	r1, [pc, #24]	; (800086c <RCC_APB2PeriphClockCmd+0x3c>)
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <RCC_APB2PeriphClockCmd+0x3c>)
 8000854:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	43db      	mvns	r3, r3
 800085a:	4013      	ands	r3, r2
 800085c:	644b      	str	r3, [r1, #68]	; 0x44
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	40023800 	.word	0x40023800

08000870 <SYSCFG_EXTILineConfig>:
  *           be (0..7) for STM32F42xxx/43xxx devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8000870:	b490      	push	{r4, r7}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	460a      	mov	r2, r1
 800087a:	71fb      	strb	r3, [r7, #7]
 800087c:	4613      	mov	r3, r2
 800087e:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8000880:	2300      	movs	r3, #0
 8000882:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8000884:	79bb      	ldrb	r3, [r7, #6]
 8000886:	f003 0303 	and.w	r3, r3, #3
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	220f      	movs	r2, #15
 800088e:	fa02 f303 	lsl.w	r3, r2, r3
 8000892:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8000894:	4916      	ldr	r1, [pc, #88]	; (80008f0 <SYSCFG_EXTILineConfig+0x80>)
 8000896:	79bb      	ldrb	r3, [r7, #6]
 8000898:	089b      	lsrs	r3, r3, #2
 800089a:	b2db      	uxtb	r3, r3
 800089c:	4618      	mov	r0, r3
 800089e:	4a14      	ldr	r2, [pc, #80]	; (80008f0 <SYSCFG_EXTILineConfig+0x80>)
 80008a0:	79bb      	ldrb	r3, [r7, #6]
 80008a2:	089b      	lsrs	r3, r3, #2
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	3302      	adds	r3, #2
 80008a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	43db      	mvns	r3, r3
 80008b0:	401a      	ands	r2, r3
 80008b2:	1c83      	adds	r3, r0, #2
 80008b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 80008b8:	480d      	ldr	r0, [pc, #52]	; (80008f0 <SYSCFG_EXTILineConfig+0x80>)
 80008ba:	79bb      	ldrb	r3, [r7, #6]
 80008bc:	089b      	lsrs	r3, r3, #2
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	461c      	mov	r4, r3
 80008c2:	4a0b      	ldr	r2, [pc, #44]	; (80008f0 <SYSCFG_EXTILineConfig+0x80>)
 80008c4:	79bb      	ldrb	r3, [r7, #6]
 80008c6:	089b      	lsrs	r3, r3, #2
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	3302      	adds	r3, #2
 80008cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008d0:	79f9      	ldrb	r1, [r7, #7]
 80008d2:	79bb      	ldrb	r3, [r7, #6]
 80008d4:	f003 0303 	and.w	r3, r3, #3
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	fa01 f303 	lsl.w	r3, r1, r3
 80008de:	431a      	orrs	r2, r3
 80008e0:	1ca3      	adds	r3, r4, #2
 80008e2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80008e6:	bf00      	nop
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc90      	pop	{r4, r7}
 80008ee:	4770      	bx	lr
 80008f0:	40013800 	.word	0x40013800

080008f4 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	881b      	ldrh	r3, [r3, #0]
 8000906:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	4a29      	ldr	r2, [pc, #164]	; (80009b0 <TIM_TimeBaseInit+0xbc>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d013      	beq.n	8000938 <TIM_TimeBaseInit+0x44>
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	4a28      	ldr	r2, [pc, #160]	; (80009b4 <TIM_TimeBaseInit+0xc0>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d00f      	beq.n	8000938 <TIM_TimeBaseInit+0x44>
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800091e:	d00b      	beq.n	8000938 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	4a25      	ldr	r2, [pc, #148]	; (80009b8 <TIM_TimeBaseInit+0xc4>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d007      	beq.n	8000938 <TIM_TimeBaseInit+0x44>
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4a24      	ldr	r2, [pc, #144]	; (80009bc <TIM_TimeBaseInit+0xc8>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d003      	beq.n	8000938 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	4a23      	ldr	r2, [pc, #140]	; (80009c0 <TIM_TimeBaseInit+0xcc>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d108      	bne.n	800094a <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8000938:	89fb      	ldrh	r3, [r7, #14]
 800093a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800093e:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	885a      	ldrh	r2, [r3, #2]
 8000944:	89fb      	ldrh	r3, [r7, #14]
 8000946:	4313      	orrs	r3, r2
 8000948:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4a1d      	ldr	r2, [pc, #116]	; (80009c4 <TIM_TimeBaseInit+0xd0>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d00c      	beq.n	800096c <TIM_TimeBaseInit+0x78>
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4a1c      	ldr	r2, [pc, #112]	; (80009c8 <TIM_TimeBaseInit+0xd4>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d008      	beq.n	800096c <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800095a:	89fb      	ldrh	r3, [r7, #14]
 800095c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000960:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	891a      	ldrh	r2, [r3, #8]
 8000966:	89fb      	ldrh	r3, [r7, #14]
 8000968:	4313      	orrs	r3, r2
 800096a:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	89fa      	ldrh	r2, [r7, #14]
 8000970:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	685a      	ldr	r2, [r3, #4]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	881a      	ldrh	r2, [r3, #0]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a0a      	ldr	r2, [pc, #40]	; (80009b0 <TIM_TimeBaseInit+0xbc>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d003      	beq.n	8000992 <TIM_TimeBaseInit+0x9e>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4a09      	ldr	r2, [pc, #36]	; (80009b4 <TIM_TimeBaseInit+0xc0>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d104      	bne.n	800099c <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	7a9b      	ldrb	r3, [r3, #10]
 8000996:	b29a      	uxth	r2, r3
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2201      	movs	r2, #1
 80009a0:	829a      	strh	r2, [r3, #20]
}
 80009a2:	bf00      	nop
 80009a4:	3714      	adds	r7, #20
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	40010000 	.word	0x40010000
 80009b4:	40010400 	.word	0x40010400
 80009b8:	40000400 	.word	0x40000400
 80009bc:	40000800 	.word	0x40000800
 80009c0:	40000c00 	.word	0x40000c00
 80009c4:	40001000 	.word	0x40001000
 80009c8:	40001400 	.word	0x40001400

080009cc <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	460b      	mov	r3, r1
 80009d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80009d8:	78fb      	ldrb	r3, [r7, #3]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d008      	beq.n	80009f0 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	881b      	ldrh	r3, [r3, #0]
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	b29a      	uxth	r2, r3
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 80009ee:	e007      	b.n	8000a00 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	881b      	ldrh	r3, [r3, #0]
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	f023 0301 	bic.w	r3, r3, #1
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	801a      	strh	r2, [r3, #0]
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	460b      	mov	r3, r1
 8000a16:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8000a18:	2300      	movs	r3, #0
 8000a1a:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	81bb      	strh	r3, [r7, #12]
 8000a20:	2300      	movs	r3, #0
 8000a22:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	8a1b      	ldrh	r3, [r3, #16]
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	887b      	ldrh	r3, [r7, #2]
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	899b      	ldrh	r3, [r3, #12]
 8000a34:	b29a      	uxth	r2, r3
 8000a36:	887b      	ldrh	r3, [r7, #2]
 8000a38:	4013      	ands	r3, r2
 8000a3a:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8000a3c:	89bb      	ldrh	r3, [r7, #12]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d005      	beq.n	8000a4e <TIM_GetITStatus+0x42>
 8000a42:	897b      	ldrh	r3, [r7, #10]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d002      	beq.n	8000a4e <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	73fb      	strb	r3, [r7, #15]
 8000a4c:	e001      	b.n	8000a52 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3714      	adds	r7, #20
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	460b      	mov	r3, r1
 8000a6a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8000a6c:	887b      	ldrh	r3, [r7, #2]
 8000a6e:	43db      	mvns	r3, r3
 8000a70:	b29a      	uxth	r2, r3
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	821a      	strh	r2, [r3, #16]
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000a82:	b480      	push	{r7}
 8000a84:	b087      	sub	sp, #28
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
 8000a8a:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]
 8000a90:	2300      	movs	r3, #0
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	2300      	movs	r3, #0
 8000a96:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]
 8000a9c:	e076      	b.n	8000b8c <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	4013      	ands	r3, r2
 8000ab0:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000ab2:	68fa      	ldr	r2, [r7, #12]
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	d165      	bne.n	8000b86 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	2103      	movs	r1, #3
 8000ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac8:	43db      	mvns	r3, r3
 8000aca:	401a      	ands	r2, r3
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	791b      	ldrb	r3, [r3, #4]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae2:	431a      	orrs	r2, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	791b      	ldrb	r3, [r3, #4]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d003      	beq.n	8000af8 <GPIO_Init+0x76>
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	791b      	ldrb	r3, [r3, #4]
 8000af4:	2b02      	cmp	r3, #2
 8000af6:	d12e      	bne.n	8000b56 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	689a      	ldr	r2, [r3, #8]
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	2103      	movs	r1, #3
 8000b02:	fa01 f303 	lsl.w	r3, r1, r3
 8000b06:	43db      	mvns	r3, r3
 8000b08:	401a      	ands	r2, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	689a      	ldr	r2, [r3, #8]
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	795b      	ldrb	r3, [r3, #5]
 8000b16:	4619      	mov	r1, r3
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b20:	431a      	orrs	r2, r3
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	685a      	ldr	r2, [r3, #4]
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	4619      	mov	r1, r3
 8000b30:	2301      	movs	r3, #1
 8000b32:	408b      	lsls	r3, r1
 8000b34:	43db      	mvns	r3, r3
 8000b36:	401a      	ands	r2, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	683a      	ldr	r2, [r7, #0]
 8000b42:	7992      	ldrb	r2, [r2, #6]
 8000b44:	4611      	mov	r1, r2
 8000b46:	697a      	ldr	r2, [r7, #20]
 8000b48:	b292      	uxth	r2, r2
 8000b4a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b4e:	b292      	uxth	r2, r2
 8000b50:	431a      	orrs	r2, r3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	68da      	ldr	r2, [r3, #12]
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	2103      	movs	r1, #3
 8000b62:	fa01 f303 	lsl.w	r3, r1, r3
 8000b66:	43db      	mvns	r3, r3
 8000b68:	401a      	ands	r2, r3
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	68da      	ldr	r2, [r3, #12]
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	79db      	ldrb	r3, [r3, #7]
 8000b76:	4619      	mov	r1, r3
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b80:	431a      	orrs	r2, r3
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	617b      	str	r3, [r7, #20]
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	2b0f      	cmp	r3, #15
 8000b90:	d985      	bls.n	8000a9e <GPIO_Init+0x1c>
    }
  }
}
 8000b92:	bf00      	nop
 8000b94:	371c      	adds	r7, #28
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	b083      	sub	sp, #12
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
 8000ba6:	460b      	mov	r3, r1
 8000ba8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	887a      	ldrh	r2, [r7, #2]
 8000bae:	831a      	strh	r2, [r3, #24]
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	887a      	ldrh	r2, [r7, #2]
 8000bcc:	835a      	strh	r2, [r3, #26]
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
	...
