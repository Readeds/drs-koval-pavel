
main.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <NMI_Handler>:
/**
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void) {
 8000188:	b480      	push	{r7}
 800018a:	af00      	add	r7, sp, #0
}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000194:	4770      	bx	lr

08000196 <HardFault_Handler>:
/**
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void) {
 8000196:	b480      	push	{r7}
 8000198:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1) {}
 800019a:	e7fe      	b.n	800019a <HardFault_Handler+0x4>

0800019c <MemManage_Handler>:
/**
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void) {
 800019c:	b480      	push	{r7}
 800019e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1) {}
 80001a0:	e7fe      	b.n	80001a0 <MemManage_Handler+0x4>

080001a2 <BusFault_Handler>:
/**
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void) {
 80001a2:	b480      	push	{r7}
 80001a4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1) {}
 80001a6:	e7fe      	b.n	80001a6 <BusFault_Handler+0x4>

080001a8 <UsageFault_Handler>:
/**
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void) {
 80001a8:	b480      	push	{r7}
 80001aa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1) {}
 80001ac:	e7fe      	b.n	80001ac <UsageFault_Handler+0x4>

080001ae <SVC_Handler>:
/**
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void) {
 80001ae:	b480      	push	{r7}
 80001b0:	af00      	add	r7, sp, #0
}
 80001b2:	bf00      	nop
 80001b4:	46bd      	mov	sp, r7
 80001b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ba:	4770      	bx	lr

080001bc <DebugMon_Handler>:
/**
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void) {
 80001bc:	b480      	push	{r7}
 80001be:	af00      	add	r7, sp, #0
}
 80001c0:	bf00      	nop
 80001c2:	46bd      	mov	sp, r7
 80001c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001c8:	4770      	bx	lr

080001ca <PendSV_Handler>:
/**
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void) {
 80001ca:	b480      	push	{r7}
 80001cc:	af00      	add	r7, sp, #0
}
 80001ce:	bf00      	nop
 80001d0:	46bd      	mov	sp, r7
 80001d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001d6:	4770      	bx	lr

080001d8 <SysTick_Handler>:
/**
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void) {
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
}
 80001dc:	bf00      	nop
 80001de:	46bd      	mov	sp, r7
 80001e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e4:	4770      	bx	lr
	...

080001e8 <SystemInit>:
  *         Initialize the Embedded Flash Interface, the PLL and update the
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void) {
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2));  /* set CP10 and CP11 Full Access */
 80001ec:	4b16      	ldr	r3, [pc, #88]	; (8000248 <SystemInit+0x60>)
 80001ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001f2:	4a15      	ldr	r2, [pc, #84]	; (8000248 <SystemInit+0x60>)
 80001f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001fc:	4b13      	ldr	r3, [pc, #76]	; (800024c <SystemInit+0x64>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a12      	ldr	r2, [pc, #72]	; (800024c <SystemInit+0x64>)
 8000202:	f043 0301 	orr.w	r3, r3, #1
 8000206:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000208:	4b10      	ldr	r3, [pc, #64]	; (800024c <SystemInit+0x64>)
 800020a:	2200      	movs	r2, #0
 800020c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800020e:	4b0f      	ldr	r3, [pc, #60]	; (800024c <SystemInit+0x64>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4a0e      	ldr	r2, [pc, #56]	; (800024c <SystemInit+0x64>)
 8000214:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800021c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800021e:	4b0b      	ldr	r3, [pc, #44]	; (800024c <SystemInit+0x64>)
 8000220:	4a0b      	ldr	r2, [pc, #44]	; (8000250 <SystemInit+0x68>)
 8000222:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000224:	4b09      	ldr	r3, [pc, #36]	; (800024c <SystemInit+0x64>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a08      	ldr	r2, [pc, #32]	; (800024c <SystemInit+0x64>)
 800022a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800022e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000230:	4b06      	ldr	r3, [pc, #24]	; (800024c <SystemInit+0x64>)
 8000232:	2200      	movs	r2, #0
 8000234:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl();
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the System clock source, PLL Multiplier and Divider factors,
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000236:	f000 f80d 	bl	8000254 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800023a:	4b03      	ldr	r3, [pc, #12]	; (8000248 <SystemInit+0x60>)
 800023c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000240:	609a      	str	r2, [r3, #8]
#endif
}
 8000242:	bf00      	nop
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	e000ed00 	.word	0xe000ed00
 800024c:	40023800 	.word	0x40023800
 8000250:	24003010 	.word	0x24003010

08000254 <SetSysClock>:
  * @Note   This function should be called only once the RCC clock configuration
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void) {
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800025a:	2300      	movs	r3, #0
 800025c:	607b      	str	r3, [r7, #4]
 800025e:	2300      	movs	r3, #0
 8000260:	603b      	str	r3, [r7, #0]

  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000262:	4b36      	ldr	r3, [pc, #216]	; (800033c <SetSysClock+0xe8>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	4a35      	ldr	r2, [pc, #212]	; (800033c <SetSysClock+0xe8>)
 8000268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800026c:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800026e:	4b33      	ldr	r3, [pc, #204]	; (800033c <SetSysClock+0xe8>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000276:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	3301      	adds	r3, #1
 800027c:	607b      	str	r3, [r7, #4]
  }
  while ((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800027e:	683b      	ldr	r3, [r7, #0]
 8000280:	2b00      	cmp	r3, #0
 8000282:	d103      	bne.n	800028c <SetSysClock+0x38>
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800028a:	d1f0      	bne.n	800026e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET) {
 800028c:	4b2b      	ldr	r3, [pc, #172]	; (800033c <SetSysClock+0xe8>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000294:	2b00      	cmp	r3, #0
 8000296:	d002      	beq.n	800029e <SetSysClock+0x4a>
    HSEStatus = (uint32_t)0x01;
 8000298:	2301      	movs	r3, #1
 800029a:	603b      	str	r3, [r7, #0]
 800029c:	e001      	b.n	80002a2 <SetSysClock+0x4e>
  } else {
    HSEStatus = (uint32_t)0x00;
 800029e:	2300      	movs	r3, #0
 80002a0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01) {
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d142      	bne.n	800032e <SetSysClock+0xda>
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80002a8:	4b24      	ldr	r3, [pc, #144]	; (800033c <SetSysClock+0xe8>)
 80002aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002ac:	4a23      	ldr	r2, [pc, #140]	; (800033c <SetSysClock+0xe8>)
 80002ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002b2:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80002b4:	4b22      	ldr	r3, [pc, #136]	; (8000340 <SetSysClock+0xec>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a21      	ldr	r2, [pc, #132]	; (8000340 <SetSysClock+0xec>)
 80002ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80002be:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80002c0:	4b1e      	ldr	r3, [pc, #120]	; (800033c <SetSysClock+0xe8>)
 80002c2:	4a1e      	ldr	r2, [pc, #120]	; (800033c <SetSysClock+0xe8>)
 80002c4:	689b      	ldr	r3, [r3, #8]
 80002c6:	6093      	str	r3, [r2, #8]

#if defined (STM32F40_41xxx) || defined (STM32F427_437xx) || defined (STM32F429_439xx)
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80002c8:	4b1c      	ldr	r3, [pc, #112]	; (800033c <SetSysClock+0xe8>)
 80002ca:	689b      	ldr	r3, [r3, #8]
 80002cc:	4a1b      	ldr	r2, [pc, #108]	; (800033c <SetSysClock+0xe8>)
 80002ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002d2:	6093      	str	r3, [r2, #8]

    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80002d4:	4b19      	ldr	r3, [pc, #100]	; (800033c <SetSysClock+0xe8>)
 80002d6:	689b      	ldr	r3, [r3, #8]
 80002d8:	4a18      	ldr	r2, [pc, #96]	; (800033c <SetSysClock+0xe8>)
 80002da:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80002de:	6093      	str	r3, [r2, #8]
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) - 1) << 16) |
 80002e0:	4b16      	ldr	r3, [pc, #88]	; (800033c <SetSysClock+0xe8>)
 80002e2:	4a18      	ldr	r2, [pc, #96]	; (8000344 <SetSysClock+0xf0>)
 80002e4:	605a      	str	r2, [r3, #4]
          (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80002e6:	4b15      	ldr	r3, [pc, #84]	; (800033c <SetSysClock+0xe8>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	4a14      	ldr	r2, [pc, #80]	; (800033c <SetSysClock+0xe8>)
 80002ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002f0:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while ((RCC->CR & RCC_CR_PLLRDY) == 0) {}
 80002f2:	bf00      	nop
 80002f4:	4b11      	ldr	r3, [pc, #68]	; (800033c <SetSysClock+0xe8>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d0f9      	beq.n	80002f4 <SetSysClock+0xa0>
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
#endif /* STM32F427_437x || STM32F429_439xx  */

#if defined (STM32F40_41xxx)
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 8000300:	4b11      	ldr	r3, [pc, #68]	; (8000348 <SetSysClock+0xf4>)
 8000302:	f240 7205 	movw	r2, #1797	; 0x705
 8000306:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000308:	4b0c      	ldr	r3, [pc, #48]	; (800033c <SetSysClock+0xe8>)
 800030a:	689b      	ldr	r3, [r3, #8]
 800030c:	4a0b      	ldr	r2, [pc, #44]	; (800033c <SetSysClock+0xe8>)
 800030e:	f023 0303 	bic.w	r3, r3, #3
 8000312:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000314:	4b09      	ldr	r3, [pc, #36]	; (800033c <SetSysClock+0xe8>)
 8000316:	689b      	ldr	r3, [r3, #8]
 8000318:	4a08      	ldr	r2, [pc, #32]	; (800033c <SetSysClock+0xe8>)
 800031a:	f043 0302 	orr.w	r3, r3, #2
 800031e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8000320:	bf00      	nop
 8000322:	4b06      	ldr	r3, [pc, #24]	; (800033c <SetSysClock+0xe8>)
 8000324:	689b      	ldr	r3, [r3, #8]
 8000326:	f003 030c 	and.w	r3, r3, #12
 800032a:	2b08      	cmp	r3, #8
 800032c:	d1f9      	bne.n	8000322 <SetSysClock+0xce>
    {}
  } else { /* If HSE fails to start-up, the application will have wrong clock
                configuration. User can add here some code to deal with this error */
  }

}
 800032e:	bf00      	nop
 8000330:	370c      	adds	r7, #12
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	40023800 	.word	0x40023800
 8000340:	40007000 	.word	0x40007000
 8000344:	07405408 	.word	0x07405408
 8000348:	40023c00 	.word	0x40023c00

0800034c <All_led6>:
#include "main.h"


void All_led6 ()
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000352:	2101      	movs	r1, #1
 8000354:	2001      	movs	r0, #1
 8000356:	f000 f8bf 	bl	80004d8 <RCC_AHB1PeriphClockCmd>
  GPIO_InitTypeDef  GPIO_InitStructure;
  GPIO_InitStructure.GPIO_Pin = ALL_LED6;
 800035a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800035e:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000360:	2301      	movs	r3, #1
 8000362:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000364:	2300      	movs	r3, #0
 8000366:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8000368:	2303      	movs	r3, #3
 800036a:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800036c:	2300      	movs	r3, #0
 800036e:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000370:	463b      	mov	r3, r7
 8000372:	4619      	mov	r1, r3
 8000374:	4803      	ldr	r0, [pc, #12]	; (8000384 <All_led6+0x38>)
 8000376:	f000 f8cf 	bl	8000518 <GPIO_Init>


}
 800037a:	bf00      	nop
 800037c:	3708      	adds	r7, #8
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	40020000 	.word	0x40020000

08000388 <main>:

int main(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b086      	sub	sp, #24
 800038c:	af00      	add	r7, sp, #0
  
  All_led6();
 800038e:	f7ff ffdd 	bl	800034c <All_led6>
  long ledArr[]= {~GPIO_Pin_8,~GPIO_Pin_9,~GPIO_Pin_10};
 8000392:	4a3b      	ldr	r2, [pc, #236]	; (8000480 <main+0xf8>)
 8000394:	1d3b      	adds	r3, r7, #4
 8000396:	ca07      	ldmia	r2, {r0, r1, r2}
 8000398:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 

 
  int numA=0;
 800039c:	2300      	movs	r3, #0
 800039e:	617b      	str	r3, [r7, #20]
  {
    int i;
   
	 
	  
	      GPIO_ResetBits(GPIOA, ledArr[numA%3]);
 80003a0:	6979      	ldr	r1, [r7, #20]
 80003a2:	4b38      	ldr	r3, [pc, #224]	; (8000484 <main+0xfc>)
 80003a4:	fb83 3201 	smull	r3, r2, r3, r1
 80003a8:	17cb      	asrs	r3, r1, #31
 80003aa:	1ad2      	subs	r2, r2, r3
 80003ac:	4613      	mov	r3, r2
 80003ae:	005b      	lsls	r3, r3, #1
 80003b0:	4413      	add	r3, r2
 80003b2:	1aca      	subs	r2, r1, r3
 80003b4:	0093      	lsls	r3, r2, #2
 80003b6:	f107 0218 	add.w	r2, r7, #24
 80003ba:	4413      	add	r3, r2
 80003bc:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80003c0:	b29b      	uxth	r3, r3
 80003c2:	4619      	mov	r1, r3
 80003c4:	4830      	ldr	r0, [pc, #192]	; (8000488 <main+0x100>)
 80003c6:	f000 f944 	bl	8000652 <GPIO_ResetBits>
	     
	      numA++;
 80003ca:	697b      	ldr	r3, [r7, #20]
 80003cc:	3301      	adds	r3, #1
 80003ce:	617b      	str	r3, [r7, #20]
	      
	      GPIO_SetBits(GPIOA,ledArr[numA%3]);
 80003d0:	6979      	ldr	r1, [r7, #20]
 80003d2:	4b2c      	ldr	r3, [pc, #176]	; (8000484 <main+0xfc>)
 80003d4:	fb83 3201 	smull	r3, r2, r3, r1
 80003d8:	17cb      	asrs	r3, r1, #31
 80003da:	1ad2      	subs	r2, r2, r3
 80003dc:	4613      	mov	r3, r2
 80003de:	005b      	lsls	r3, r3, #1
 80003e0:	4413      	add	r3, r2
 80003e2:	1aca      	subs	r2, r1, r3
 80003e4:	0093      	lsls	r3, r2, #2
 80003e6:	f107 0218 	add.w	r2, r7, #24
 80003ea:	4413      	add	r3, r2
 80003ec:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80003f0:	b29b      	uxth	r3, r3
 80003f2:	4619      	mov	r1, r3
 80003f4:	4824      	ldr	r0, [pc, #144]	; (8000488 <main+0x100>)
 80003f6:	f000 f91d 	bl	8000634 <GPIO_SetBits>
	      for (i=0;i < SWITCH_DELAY;i++)
 80003fa:	2300      	movs	r3, #0
 80003fc:	613b      	str	r3, [r7, #16]
 80003fe:	e002      	b.n	8000406 <main+0x7e>
 8000400:	693b      	ldr	r3, [r7, #16]
 8000402:	3301      	adds	r3, #1
 8000404:	613b      	str	r3, [r7, #16]
 8000406:	693b      	ldr	r3, [r7, #16]
 8000408:	4a20      	ldr	r2, [pc, #128]	; (800048c <main+0x104>)
 800040a:	4293      	cmp	r3, r2
 800040c:	ddf8      	ble.n	8000400 <main+0x78>
		{
		}
	      GPIO_ResetBits(GPIOA, ledArr[numA%3]);
 800040e:	6979      	ldr	r1, [r7, #20]
 8000410:	4b1c      	ldr	r3, [pc, #112]	; (8000484 <main+0xfc>)
 8000412:	fb83 3201 	smull	r3, r2, r3, r1
 8000416:	17cb      	asrs	r3, r1, #31
 8000418:	1ad2      	subs	r2, r2, r3
 800041a:	4613      	mov	r3, r2
 800041c:	005b      	lsls	r3, r3, #1
 800041e:	4413      	add	r3, r2
 8000420:	1aca      	subs	r2, r1, r3
 8000422:	0093      	lsls	r3, r2, #2
 8000424:	f107 0218 	add.w	r2, r7, #24
 8000428:	4413      	add	r3, r2
 800042a:	f853 3c14 	ldr.w	r3, [r3, #-20]
 800042e:	b29b      	uxth	r3, r3
 8000430:	4619      	mov	r1, r3
 8000432:	4815      	ldr	r0, [pc, #84]	; (8000488 <main+0x100>)
 8000434:	f000 f90d 	bl	8000652 <GPIO_ResetBits>
	     
	      numA++;
 8000438:	697b      	ldr	r3, [r7, #20]
 800043a:	3301      	adds	r3, #1
 800043c:	617b      	str	r3, [r7, #20]
	      
	      GPIO_SetBits(GPIOA,ledArr[numA%3]);
 800043e:	6979      	ldr	r1, [r7, #20]
 8000440:	4b10      	ldr	r3, [pc, #64]	; (8000484 <main+0xfc>)
 8000442:	fb83 3201 	smull	r3, r2, r3, r1
 8000446:	17cb      	asrs	r3, r1, #31
 8000448:	1ad2      	subs	r2, r2, r3
 800044a:	4613      	mov	r3, r2
 800044c:	005b      	lsls	r3, r3, #1
 800044e:	4413      	add	r3, r2
 8000450:	1aca      	subs	r2, r1, r3
 8000452:	0093      	lsls	r3, r2, #2
 8000454:	f107 0218 	add.w	r2, r7, #24
 8000458:	4413      	add	r3, r2
 800045a:	f853 3c14 	ldr.w	r3, [r3, #-20]
 800045e:	b29b      	uxth	r3, r3
 8000460:	4619      	mov	r1, r3
 8000462:	4809      	ldr	r0, [pc, #36]	; (8000488 <main+0x100>)
 8000464:	f000 f8e6 	bl	8000634 <GPIO_SetBits>
	      for (i=0;i < SWITCH_DELAY;i++)
 8000468:	2300      	movs	r3, #0
 800046a:	613b      	str	r3, [r7, #16]
 800046c:	e002      	b.n	8000474 <main+0xec>
 800046e:	693b      	ldr	r3, [r7, #16]
 8000470:	3301      	adds	r3, #1
 8000472:	613b      	str	r3, [r7, #16]
 8000474:	693b      	ldr	r3, [r7, #16]
 8000476:	4a05      	ldr	r2, [pc, #20]	; (800048c <main+0x104>)
 8000478:	4293      	cmp	r3, r2
 800047a:	ddf8      	ble.n	800046e <main+0xe6>
  {
 800047c:	e790      	b.n	80003a0 <main+0x18>
 800047e:	bf00      	nop
 8000480:	08000670 	.word	0x08000670
 8000484:	55555556 	.word	0x55555556
 8000488:	40020000 	.word	0x40020000
 800048c:	006acfbf 	.word	0x006acfbf

08000490 <Reset_Handler>:
 8000490:	2100      	movs	r1, #0
 8000492:	e003      	b.n	800049c <LoopCopyDataInit>

08000494 <CopyDataInit>:
 8000494:	4b0a      	ldr	r3, [pc, #40]	; (80004c0 <LoopFillZerobss+0x10>)
 8000496:	585b      	ldr	r3, [r3, r1]
 8000498:	5043      	str	r3, [r0, r1]
 800049a:	3104      	adds	r1, #4

0800049c <LoopCopyDataInit>:
 800049c:	4809      	ldr	r0, [pc, #36]	; (80004c4 <LoopFillZerobss+0x14>)
 800049e:	4b0a      	ldr	r3, [pc, #40]	; (80004c8 <LoopFillZerobss+0x18>)
 80004a0:	1842      	adds	r2, r0, r1
 80004a2:	429a      	cmp	r2, r3
 80004a4:	d3f6      	bcc.n	8000494 <CopyDataInit>
 80004a6:	4a09      	ldr	r2, [pc, #36]	; (80004cc <LoopFillZerobss+0x1c>)
 80004a8:	e002      	b.n	80004b0 <LoopFillZerobss>

080004aa <FillZerobss>:
 80004aa:	2300      	movs	r3, #0
 80004ac:	f842 3b04 	str.w	r3, [r2], #4

080004b0 <LoopFillZerobss>:
 80004b0:	4b07      	ldr	r3, [pc, #28]	; (80004d0 <LoopFillZerobss+0x20>)
 80004b2:	429a      	cmp	r2, r3
 80004b4:	d3f9      	bcc.n	80004aa <FillZerobss>
 80004b6:	f7ff fe97 	bl	80001e8 <SystemInit>
 80004ba:	f7ff ff65 	bl	8000388 <main>
 80004be:	4770      	bx	lr
 80004c0:	0800067c 	.word	0x0800067c
 80004c4:	20000000 	.word	0x20000000
 80004c8:	20000000 	.word	0x20000000
 80004cc:	20000000 	.word	0x20000000
 80004d0:	20000000 	.word	0x20000000

080004d4 <ADC_IRQHandler>:
 80004d4:	e7fe      	b.n	80004d4 <ADC_IRQHandler>
	...

080004d8 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	460b      	mov	r3, r1
 80004e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80004e4:	78fb      	ldrb	r3, [r7, #3]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d006      	beq.n	80004f8 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80004ea:	490a      	ldr	r1, [pc, #40]	; (8000514 <RCC_AHB1PeriphClockCmd+0x3c>)
 80004ec:	4b09      	ldr	r3, [pc, #36]	; (8000514 <RCC_AHB1PeriphClockCmd+0x3c>)
 80004ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	4313      	orrs	r3, r2
 80004f4:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80004f6:	e006      	b.n	8000506 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80004f8:	4906      	ldr	r1, [pc, #24]	; (8000514 <RCC_AHB1PeriphClockCmd+0x3c>)
 80004fa:	4b06      	ldr	r3, [pc, #24]	; (8000514 <RCC_AHB1PeriphClockCmd+0x3c>)
 80004fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	43db      	mvns	r3, r3
 8000502:	4013      	ands	r3, r2
 8000504:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000506:	bf00      	nop
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	40023800 	.word	0x40023800

08000518 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000518:	b480      	push	{r7}
 800051a:	b087      	sub	sp, #28
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000522:	2300      	movs	r3, #0
 8000524:	617b      	str	r3, [r7, #20]
 8000526:	2300      	movs	r3, #0
 8000528:	613b      	str	r3, [r7, #16]
 800052a:	2300      	movs	r3, #0
 800052c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800052e:	2300      	movs	r3, #0
 8000530:	617b      	str	r3, [r7, #20]
 8000532:	e076      	b.n	8000622 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000534:	2201      	movs	r2, #1
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	fa02 f303 	lsl.w	r3, r2, r3
 800053c:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	693b      	ldr	r3, [r7, #16]
 8000544:	4013      	ands	r3, r2
 8000546:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000548:	68fa      	ldr	r2, [r7, #12]
 800054a:	693b      	ldr	r3, [r7, #16]
 800054c:	429a      	cmp	r2, r3
 800054e:	d165      	bne.n	800061c <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	005b      	lsls	r3, r3, #1
 8000558:	2103      	movs	r1, #3
 800055a:	fa01 f303 	lsl.w	r3, r1, r3
 800055e:	43db      	mvns	r3, r3
 8000560:	401a      	ands	r2, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	791b      	ldrb	r3, [r3, #4]
 800056e:	4619      	mov	r1, r3
 8000570:	697b      	ldr	r3, [r7, #20]
 8000572:	005b      	lsls	r3, r3, #1
 8000574:	fa01 f303 	lsl.w	r3, r1, r3
 8000578:	431a      	orrs	r2, r3
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	791b      	ldrb	r3, [r3, #4]
 8000582:	2b01      	cmp	r3, #1
 8000584:	d003      	beq.n	800058e <GPIO_Init+0x76>
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	791b      	ldrb	r3, [r3, #4]
 800058a:	2b02      	cmp	r3, #2
 800058c:	d12e      	bne.n	80005ec <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	689a      	ldr	r2, [r3, #8]
 8000592:	697b      	ldr	r3, [r7, #20]
 8000594:	005b      	lsls	r3, r3, #1
 8000596:	2103      	movs	r1, #3
 8000598:	fa01 f303 	lsl.w	r3, r1, r3
 800059c:	43db      	mvns	r3, r3
 800059e:	401a      	ands	r2, r3
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	689a      	ldr	r2, [r3, #8]
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	795b      	ldrb	r3, [r3, #5]
 80005ac:	4619      	mov	r1, r3
 80005ae:	697b      	ldr	r3, [r7, #20]
 80005b0:	005b      	lsls	r3, r3, #1
 80005b2:	fa01 f303 	lsl.w	r3, r1, r3
 80005b6:	431a      	orrs	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	685a      	ldr	r2, [r3, #4]
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	b29b      	uxth	r3, r3
 80005c4:	4619      	mov	r1, r3
 80005c6:	2301      	movs	r3, #1
 80005c8:	408b      	lsls	r3, r1
 80005ca:	43db      	mvns	r3, r3
 80005cc:	401a      	ands	r2, r3
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	683a      	ldr	r2, [r7, #0]
 80005d8:	7992      	ldrb	r2, [r2, #6]
 80005da:	4611      	mov	r1, r2
 80005dc:	697a      	ldr	r2, [r7, #20]
 80005de:	b292      	uxth	r2, r2
 80005e0:	fa01 f202 	lsl.w	r2, r1, r2
 80005e4:	b292      	uxth	r2, r2
 80005e6:	431a      	orrs	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	68da      	ldr	r2, [r3, #12]
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	005b      	lsls	r3, r3, #1
 80005f6:	2103      	movs	r1, #3
 80005f8:	fa01 f303 	lsl.w	r3, r1, r3
 80005fc:	43db      	mvns	r3, r3
 80005fe:	401a      	ands	r2, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	68da      	ldr	r2, [r3, #12]
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	79db      	ldrb	r3, [r3, #7]
 800060c:	4619      	mov	r1, r3
 800060e:	697b      	ldr	r3, [r7, #20]
 8000610:	005b      	lsls	r3, r3, #1
 8000612:	fa01 f303 	lsl.w	r3, r1, r3
 8000616:	431a      	orrs	r2, r3
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	3301      	adds	r3, #1
 8000620:	617b      	str	r3, [r7, #20]
 8000622:	697b      	ldr	r3, [r7, #20]
 8000624:	2b0f      	cmp	r3, #15
 8000626:	d985      	bls.n	8000534 <GPIO_Init+0x1c>
    }
  }
}
 8000628:	bf00      	nop
 800062a:	371c      	adds	r7, #28
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr

08000634 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	460b      	mov	r3, r1
 800063e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	887a      	ldrh	r2, [r7, #2]
 8000644:	831a      	strh	r2, [r3, #24]
}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr

08000652 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000652:	b480      	push	{r7}
 8000654:	b083      	sub	sp, #12
 8000656:	af00      	add	r7, sp, #0
 8000658:	6078      	str	r0, [r7, #4]
 800065a:	460b      	mov	r3, r1
 800065c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	887a      	ldrh	r2, [r7, #2]
 8000662:	835a      	strh	r2, [r3, #26]
}
 8000664:	bf00      	nop
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	fffffeff 	.word	0xfffffeff
 8000674:	fffffdff 	.word	0xfffffdff
 8000678:	fffffbff 	.word	0xfffffbff
