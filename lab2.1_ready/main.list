
main.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <NMI_Handler>:
/**
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void) {
 8000188:	b480      	push	{r7}
 800018a:	af00      	add	r7, sp, #0
}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000194:	4770      	bx	lr

08000196 <HardFault_Handler>:
/**
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void) {
 8000196:	b480      	push	{r7}
 8000198:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1) {}
 800019a:	e7fe      	b.n	800019a <HardFault_Handler+0x4>

0800019c <MemManage_Handler>:
/**
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void) {
 800019c:	b480      	push	{r7}
 800019e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1) {}
 80001a0:	e7fe      	b.n	80001a0 <MemManage_Handler+0x4>

080001a2 <BusFault_Handler>:
/**
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void) {
 80001a2:	b480      	push	{r7}
 80001a4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1) {}
 80001a6:	e7fe      	b.n	80001a6 <BusFault_Handler+0x4>

080001a8 <UsageFault_Handler>:
/**
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void) {
 80001a8:	b480      	push	{r7}
 80001aa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1) {}
 80001ac:	e7fe      	b.n	80001ac <UsageFault_Handler+0x4>

080001ae <SVC_Handler>:
/**
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void) {
 80001ae:	b480      	push	{r7}
 80001b0:	af00      	add	r7, sp, #0
}
 80001b2:	bf00      	nop
 80001b4:	46bd      	mov	sp, r7
 80001b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ba:	4770      	bx	lr

080001bc <DebugMon_Handler>:
/**
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void) {
 80001bc:	b480      	push	{r7}
 80001be:	af00      	add	r7, sp, #0
}
 80001c0:	bf00      	nop
 80001c2:	46bd      	mov	sp, r7
 80001c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001c8:	4770      	bx	lr

080001ca <PendSV_Handler>:
/**
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void) {
 80001ca:	b480      	push	{r7}
 80001cc:	af00      	add	r7, sp, #0
}
 80001ce:	bf00      	nop
 80001d0:	46bd      	mov	sp, r7
 80001d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001d6:	4770      	bx	lr

080001d8 <SysTick_Handler>:
/**
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void) {
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
}
 80001dc:	bf00      	nop
 80001de:	46bd      	mov	sp, r7
 80001e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e4:	4770      	bx	lr
	...

080001e8 <SystemInit>:
  *         Initialize the Embedded Flash Interface, the PLL and update the
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void) {
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2));  /* set CP10 and CP11 Full Access */
 80001ec:	4b16      	ldr	r3, [pc, #88]	; (8000248 <SystemInit+0x60>)
 80001ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001f2:	4a15      	ldr	r2, [pc, #84]	; (8000248 <SystemInit+0x60>)
 80001f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001fc:	4b13      	ldr	r3, [pc, #76]	; (800024c <SystemInit+0x64>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a12      	ldr	r2, [pc, #72]	; (800024c <SystemInit+0x64>)
 8000202:	f043 0301 	orr.w	r3, r3, #1
 8000206:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000208:	4b10      	ldr	r3, [pc, #64]	; (800024c <SystemInit+0x64>)
 800020a:	2200      	movs	r2, #0
 800020c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800020e:	4b0f      	ldr	r3, [pc, #60]	; (800024c <SystemInit+0x64>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4a0e      	ldr	r2, [pc, #56]	; (800024c <SystemInit+0x64>)
 8000214:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800021c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800021e:	4b0b      	ldr	r3, [pc, #44]	; (800024c <SystemInit+0x64>)
 8000220:	4a0b      	ldr	r2, [pc, #44]	; (8000250 <SystemInit+0x68>)
 8000222:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000224:	4b09      	ldr	r3, [pc, #36]	; (800024c <SystemInit+0x64>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a08      	ldr	r2, [pc, #32]	; (800024c <SystemInit+0x64>)
 800022a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800022e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000230:	4b06      	ldr	r3, [pc, #24]	; (800024c <SystemInit+0x64>)
 8000232:	2200      	movs	r2, #0
 8000234:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl();
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the System clock source, PLL Multiplier and Divider factors,
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000236:	f000 f80d 	bl	8000254 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800023a:	4b03      	ldr	r3, [pc, #12]	; (8000248 <SystemInit+0x60>)
 800023c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000240:	609a      	str	r2, [r3, #8]
#endif
}
 8000242:	bf00      	nop
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	e000ed00 	.word	0xe000ed00
 800024c:	40023800 	.word	0x40023800
 8000250:	24003010 	.word	0x24003010

08000254 <SetSysClock>:
  * @Note   This function should be called only once the RCC clock configuration
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void) {
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800025a:	2300      	movs	r3, #0
 800025c:	607b      	str	r3, [r7, #4]
 800025e:	2300      	movs	r3, #0
 8000260:	603b      	str	r3, [r7, #0]

  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000262:	4b36      	ldr	r3, [pc, #216]	; (800033c <SetSysClock+0xe8>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	4a35      	ldr	r2, [pc, #212]	; (800033c <SetSysClock+0xe8>)
 8000268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800026c:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800026e:	4b33      	ldr	r3, [pc, #204]	; (800033c <SetSysClock+0xe8>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000276:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	3301      	adds	r3, #1
 800027c:	607b      	str	r3, [r7, #4]
  }
  while ((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800027e:	683b      	ldr	r3, [r7, #0]
 8000280:	2b00      	cmp	r3, #0
 8000282:	d103      	bne.n	800028c <SetSysClock+0x38>
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800028a:	d1f0      	bne.n	800026e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET) {
 800028c:	4b2b      	ldr	r3, [pc, #172]	; (800033c <SetSysClock+0xe8>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000294:	2b00      	cmp	r3, #0
 8000296:	d002      	beq.n	800029e <SetSysClock+0x4a>
    HSEStatus = (uint32_t)0x01;
 8000298:	2301      	movs	r3, #1
 800029a:	603b      	str	r3, [r7, #0]
 800029c:	e001      	b.n	80002a2 <SetSysClock+0x4e>
  } else {
    HSEStatus = (uint32_t)0x00;
 800029e:	2300      	movs	r3, #0
 80002a0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01) {
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d142      	bne.n	800032e <SetSysClock+0xda>
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80002a8:	4b24      	ldr	r3, [pc, #144]	; (800033c <SetSysClock+0xe8>)
 80002aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002ac:	4a23      	ldr	r2, [pc, #140]	; (800033c <SetSysClock+0xe8>)
 80002ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002b2:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80002b4:	4b22      	ldr	r3, [pc, #136]	; (8000340 <SetSysClock+0xec>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a21      	ldr	r2, [pc, #132]	; (8000340 <SetSysClock+0xec>)
 80002ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80002be:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80002c0:	4b1e      	ldr	r3, [pc, #120]	; (800033c <SetSysClock+0xe8>)
 80002c2:	4a1e      	ldr	r2, [pc, #120]	; (800033c <SetSysClock+0xe8>)
 80002c4:	689b      	ldr	r3, [r3, #8]
 80002c6:	6093      	str	r3, [r2, #8]

#if defined (STM32F40_41xxx) || defined (STM32F427_437xx) || defined (STM32F429_439xx)
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80002c8:	4b1c      	ldr	r3, [pc, #112]	; (800033c <SetSysClock+0xe8>)
 80002ca:	689b      	ldr	r3, [r3, #8]
 80002cc:	4a1b      	ldr	r2, [pc, #108]	; (800033c <SetSysClock+0xe8>)
 80002ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002d2:	6093      	str	r3, [r2, #8]

    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80002d4:	4b19      	ldr	r3, [pc, #100]	; (800033c <SetSysClock+0xe8>)
 80002d6:	689b      	ldr	r3, [r3, #8]
 80002d8:	4a18      	ldr	r2, [pc, #96]	; (800033c <SetSysClock+0xe8>)
 80002da:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80002de:	6093      	str	r3, [r2, #8]
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) - 1) << 16) |
 80002e0:	4b16      	ldr	r3, [pc, #88]	; (800033c <SetSysClock+0xe8>)
 80002e2:	4a18      	ldr	r2, [pc, #96]	; (8000344 <SetSysClock+0xf0>)
 80002e4:	605a      	str	r2, [r3, #4]
          (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80002e6:	4b15      	ldr	r3, [pc, #84]	; (800033c <SetSysClock+0xe8>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	4a14      	ldr	r2, [pc, #80]	; (800033c <SetSysClock+0xe8>)
 80002ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002f0:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while ((RCC->CR & RCC_CR_PLLRDY) == 0) {}
 80002f2:	bf00      	nop
 80002f4:	4b11      	ldr	r3, [pc, #68]	; (800033c <SetSysClock+0xe8>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d0f9      	beq.n	80002f4 <SetSysClock+0xa0>
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
#endif /* STM32F427_437x || STM32F429_439xx  */

#if defined (STM32F40_41xxx)
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 8000300:	4b11      	ldr	r3, [pc, #68]	; (8000348 <SetSysClock+0xf4>)
 8000302:	f240 7205 	movw	r2, #1797	; 0x705
 8000306:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000308:	4b0c      	ldr	r3, [pc, #48]	; (800033c <SetSysClock+0xe8>)
 800030a:	689b      	ldr	r3, [r3, #8]
 800030c:	4a0b      	ldr	r2, [pc, #44]	; (800033c <SetSysClock+0xe8>)
 800030e:	f023 0303 	bic.w	r3, r3, #3
 8000312:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000314:	4b09      	ldr	r3, [pc, #36]	; (800033c <SetSysClock+0xe8>)
 8000316:	689b      	ldr	r3, [r3, #8]
 8000318:	4a08      	ldr	r2, [pc, #32]	; (800033c <SetSysClock+0xe8>)
 800031a:	f043 0302 	orr.w	r3, r3, #2
 800031e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8000320:	bf00      	nop
 8000322:	4b06      	ldr	r3, [pc, #24]	; (800033c <SetSysClock+0xe8>)
 8000324:	689b      	ldr	r3, [r3, #8]
 8000326:	f003 030c 	and.w	r3, r3, #12
 800032a:	2b08      	cmp	r3, #8
 800032c:	d1f9      	bne.n	8000322 <SetSysClock+0xce>
    {}
  } else { /* If HSE fails to start-up, the application will have wrong clock
                configuration. User can add here some code to deal with this error */
  }

}
 800032e:	bf00      	nop
 8000330:	370c      	adds	r7, #12
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	40023800 	.word	0x40023800
 8000340:	40007000 	.word	0x40007000
 8000344:	07405408 	.word	0x07405408
 8000348:	40023c00 	.word	0x40023c00

0800034c <All_led5>:
#include "main.h"

void All_led5 ()
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8000352:	2101      	movs	r1, #1
 8000354:	2008      	movs	r0, #8
 8000356:	f000 f92f 	bl	80005b8 <RCC_AHB1PeriphClockCmd>
  GPIO_InitTypeDef  GPIO_InitStructure;
  GPIO_InitStructure.GPIO_Pin = ALL_LED5;
 800035a:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 800035e:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000360:	2301      	movs	r3, #1
 8000362:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000364:	2300      	movs	r3, #0
 8000366:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8000368:	2303      	movs	r3, #3
 800036a:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800036c:	2300      	movs	r3, #0
 800036e:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000370:	463b      	mov	r3, r7
 8000372:	4619      	mov	r1, r3
 8000374:	4803      	ldr	r0, [pc, #12]	; (8000384 <All_led5+0x38>)
 8000376:	f000 fa1b 	bl	80007b0 <GPIO_Init>


}
 800037a:	bf00      	nop
 800037c:	3708      	adds	r7, #8
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	40020c00 	.word	0x40020c00

08000388 <All_led6>:
void All_led6 ()
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800038e:	2101      	movs	r1, #1
 8000390:	2001      	movs	r0, #1
 8000392:	f000 f911 	bl	80005b8 <RCC_AHB1PeriphClockCmd>
  GPIO_InitTypeDef  GPIO_InitStructure;
  GPIO_InitStructure.GPIO_Pin = ALL_LED6;
 8000396:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800039a:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800039c:	2301      	movs	r3, #1
 800039e:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80003a0:	2300      	movs	r3, #0
 80003a2:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 80003a4:	2303      	movs	r3, #3
 80003a6:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80003a8:	2300      	movs	r3, #0
 80003aa:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 80003ac:	463b      	mov	r3, r7
 80003ae:	4619      	mov	r1, r3
 80003b0:	4803      	ldr	r0, [pc, #12]	; (80003c0 <All_led6+0x38>)
 80003b2:	f000 f9fd 	bl	80007b0 <GPIO_Init>


}
 80003b6:	bf00      	nop
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	40020000 	.word	0x40020000

080003c4 <Button_inil>:

void Button_inil (void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 80003ca:	2101      	movs	r1, #1
 80003cc:	2010      	movs	r0, #16
 80003ce:	f000 f8f3 	bl	80005b8 <RCC_AHB1PeriphClockCmd>
  GPIO_InitTypeDef GPIO_Init_Button;
  GPIO_Init_Button.GPIO_Pin = GPIO_Pin_0;
 80003d2:	2301      	movs	r3, #1
 80003d4:	603b      	str	r3, [r7, #0]
  GPIO_Init_Button.GPIO_Mode = GPIO_Mode_IN;
 80003d6:	2300      	movs	r3, #0
 80003d8:	713b      	strb	r3, [r7, #4]
  GPIO_Init_Button.GPIO_OType = GPIO_OType_PP;
 80003da:	2300      	movs	r3, #0
 80003dc:	71bb      	strb	r3, [r7, #6]
  GPIO_Init_Button.GPIO_Speed = GPIO_Speed_100MHz;
 80003de:	2303      	movs	r3, #3
 80003e0:	717b      	strb	r3, [r7, #5]
  GPIO_Init_Button.GPIO_PuPd = GPIO_PuPd_UP;
 80003e2:	2301      	movs	r3, #1
 80003e4:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOE, &GPIO_Init_Button);
 80003e6:	463b      	mov	r3, r7
 80003e8:	4619      	mov	r1, r3
 80003ea:	4803      	ldr	r0, [pc, #12]	; (80003f8 <Button_inil+0x34>)
 80003ec:	f000 f9e0 	bl	80007b0 <GPIO_Init>
 
}
 80003f0:	bf00      	nop
 80003f2:	3708      	adds	r7, #8
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	40021000 	.word	0x40021000

080003fc <init_Timer>:
void init_Timer (){
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0

  RCC_APB1PeriphClockCmd (RCC_APB1Periph_TIM2,ENABLE);
 8000402:	2101      	movs	r1, #1
 8000404:	2001      	movs	r0, #1
 8000406:	f000 f8f7 	bl	80005f8 <RCC_APB1PeriphClockCmd>
  TIM_TimeBaseInitTypeDef tim_struct;
  tim_struct.TIM_Period = PERIOD -1;
 800040a:	4b0e      	ldr	r3, [pc, #56]	; (8000444 <init_Timer+0x48>)
 800040c:	60bb      	str	r3, [r7, #8]
  tim_struct.TIM_Prescaler = PRESCALER -1;
 800040e:	2353      	movs	r3, #83	; 0x53
 8000410:	80bb      	strh	r3, [r7, #4]
  tim_struct.TIM_ClockDivision =0;
 8000412:	2300      	movs	r3, #0
 8000414:	81bb      	strh	r3, [r7, #12]
  tim_struct.TIM_CounterMode =TIM_CounterMode_Up;
 8000416:	2300      	movs	r3, #0
 8000418:	80fb      	strh	r3, [r7, #6]
  TIM_TimeBaseInit(TIM2,&tim_struct);
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	4619      	mov	r1, r3
 800041e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000422:	f000 f909 	bl	8000638 <TIM_TimeBaseInit>
  TIM_ITConfig(TIM2,TIM_IT_Update, ENABLE);
 8000426:	2201      	movs	r2, #1
 8000428:	2101      	movs	r1, #1
 800042a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800042e:	f000 f99b 	bl	8000768 <TIM_ITConfig>
  TIM_Cmd(TIM2, ENABLE);
 8000432:	2101      	movs	r1, #1
 8000434:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000438:	f000 f976 	bl	8000728 <TIM_Cmd>
}
 800043c:	bf00      	nop
 800043e:	3710      	adds	r7, #16
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	000f423f 	.word	0x000f423f

08000448 <main>:
int main(void)
{
 8000448:	b590      	push	{r4, r7, lr}
 800044a:	b08d      	sub	sp, #52	; 0x34
 800044c:	af00      	add	r7, sp, #0
  //SystemInit();
  Button_inil();
 800044e:	f7ff ffb9 	bl	80003c4 <Button_inil>
  init_Timer();
 8000452:	f7ff ffd3 	bl	80003fc <init_Timer>
  All_led5();
 8000456:	f7ff ff79 	bl	800034c <All_led5>
  All_led6();
 800045a:	f7ff ff95 	bl	8000388 <All_led6>
  long ledArr[]= {~GPIO_Pin_8,~GPIO_Pin_9,~GPIO_Pin_10};
 800045e:	4a3d      	ldr	r2, [pc, #244]	; (8000554 <main+0x10c>)
 8000460:	f107 0314 	add.w	r3, r7, #20
 8000464:	ca07      	ldmia	r2, {r0, r1, r2}
 8000466:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  long ledArrD[]={GPIO_Pin_12,GPIO_Pin_13,GPIO_Pin_14,GPIO_Pin_15};
 800046a:	4b3b      	ldr	r3, [pc, #236]	; (8000558 <main+0x110>)
 800046c:	1d3c      	adds	r4, r7, #4
 800046e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000470:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

 
  int numA=0;
 8000474:	2300      	movs	r3, #0
 8000476:	62fb      	str	r3, [r7, #44]	; 0x2c
  int numD=0;
 8000478:	2300      	movs	r3, #0
 800047a:	62bb      	str	r3, [r7, #40]	; 0x28
  int order =1;
 800047c:	2301      	movs	r3, #1
 800047e:	627b      	str	r3, [r7, #36]	; 0x24
  int delay =0;
 8000480:	2300      	movs	r3, #0
 8000482:	623b      	str	r3, [r7, #32]
  {
    int i;
    // GPIO_SetBits(GPIOD,ALL_LED5);
    // GPIO_SetBits (GPIOD,LED1_PIN);
	 
	  if(!TIM_GetCounter(TIM2))
 8000484:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000488:	f000 f942 	bl	8000710 <TIM_GetCounter>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d149      	bne.n	8000526 <main+0xde>
	    {
	      GPIO_ResetBits(GPIOA, ledArr[numA]);
 8000492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000494:	009b      	lsls	r3, r3, #2
 8000496:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800049a:	4413      	add	r3, r2
 800049c:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80004a0:	b29b      	uxth	r3, r3
 80004a2:	4619      	mov	r1, r3
 80004a4:	482d      	ldr	r0, [pc, #180]	; (800055c <main+0x114>)
 80004a6:	f000 fa3a 	bl	800091e <GPIO_ResetBits>
	      GPIO_ResetBits(GPIOD, ledArrD[numD]);
 80004aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004ac:	009b      	lsls	r3, r3, #2
 80004ae:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80004b2:	4413      	add	r3, r2
 80004b4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80004b8:	b29b      	uxth	r3, r3
 80004ba:	4619      	mov	r1, r3
 80004bc:	4828      	ldr	r0, [pc, #160]	; (8000560 <main+0x118>)
 80004be:	f000 fa2e 	bl	800091e <GPIO_ResetBits>
	      numA=(numA+order+3)%3;
 80004c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80004c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004c6:	4413      	add	r3, r2
 80004c8:	1cda      	adds	r2, r3, #3
 80004ca:	4b26      	ldr	r3, [pc, #152]	; (8000564 <main+0x11c>)
 80004cc:	fb83 3102 	smull	r3, r1, r3, r2
 80004d0:	17d3      	asrs	r3, r2, #31
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	460b      	mov	r3, r1
 80004d6:	005b      	lsls	r3, r3, #1
 80004d8:	440b      	add	r3, r1
 80004da:	1ad3      	subs	r3, r2, r3
 80004dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	      numD=(numD+order+4)%4;
 80004de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80004e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004e2:	4413      	add	r3, r2
 80004e4:	3304      	adds	r3, #4
 80004e6:	425a      	negs	r2, r3
 80004e8:	f003 0303 	and.w	r3, r3, #3
 80004ec:	f002 0203 	and.w	r2, r2, #3
 80004f0:	bf58      	it	pl
 80004f2:	4253      	negpl	r3, r2
 80004f4:	62bb      	str	r3, [r7, #40]	; 0x28
	      GPIO_SetBits(GPIOA,ledArr[numA]);
 80004f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004f8:	009b      	lsls	r3, r3, #2
 80004fa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80004fe:	4413      	add	r3, r2
 8000500:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000504:	b29b      	uxth	r3, r3
 8000506:	4619      	mov	r1, r3
 8000508:	4814      	ldr	r0, [pc, #80]	; (800055c <main+0x114>)
 800050a:	f000 f9f9 	bl	8000900 <GPIO_SetBits>
	      GPIO_SetBits(GPIOD,ledArrD[numD]);
 800050e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000510:	009b      	lsls	r3, r3, #2
 8000512:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000516:	4413      	add	r3, r2
 8000518:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800051c:	b29b      	uxth	r3, r3
 800051e:	4619      	mov	r1, r3
 8000520:	480f      	ldr	r0, [pc, #60]	; (8000560 <main+0x118>)
 8000522:	f000 f9ed 	bl	8000900 <GPIO_SetBits>
	      /////
	    
	        
	    }

	  if(!GPIO_ReadInputDataBit(GPIOE, BUTTON_PIN) && !delay)
 8000526:	2101      	movs	r1, #1
 8000528:	480f      	ldr	r0, [pc, #60]	; (8000568 <main+0x120>)
 800052a:	f000 f9cf 	bl	80008cc <GPIO_ReadInputDataBit>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d107      	bne.n	8000544 <main+0xfc>
 8000534:	6a3b      	ldr	r3, [r7, #32]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d104      	bne.n	8000544 <main+0xfc>
	    {
	      order =-order;
 800053a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800053c:	425b      	negs	r3, r3
 800053e:	627b      	str	r3, [r7, #36]	; 0x24
	      delay = BUTTON_DELAY;
 8000540:	4b0a      	ldr	r3, [pc, #40]	; (800056c <main+0x124>)
 8000542:	623b      	str	r3, [r7, #32]
	    }
	  if(delay>0){
 8000544:	6a3b      	ldr	r3, [r7, #32]
 8000546:	2b00      	cmp	r3, #0
 8000548:	dd9c      	ble.n	8000484 <main+0x3c>
	    delay--;
 800054a:	6a3b      	ldr	r3, [r7, #32]
 800054c:	3b01      	subs	r3, #1
 800054e:	623b      	str	r3, [r7, #32]
  {
 8000550:	e798      	b.n	8000484 <main+0x3c>
 8000552:	bf00      	nop
 8000554:	0800093c 	.word	0x0800093c
 8000558:	08000948 	.word	0x08000948
 800055c:	40020000 	.word	0x40020000
 8000560:	40020c00 	.word	0x40020c00
 8000564:	55555556 	.word	0x55555556
 8000568:	40021000 	.word	0x40021000
 800056c:	004c4b40 	.word	0x004c4b40

08000570 <Reset_Handler>:
 8000570:	2100      	movs	r1, #0
 8000572:	e003      	b.n	800057c <LoopCopyDataInit>

08000574 <CopyDataInit>:
 8000574:	4b0a      	ldr	r3, [pc, #40]	; (80005a0 <LoopFillZerobss+0x10>)
 8000576:	585b      	ldr	r3, [r3, r1]
 8000578:	5043      	str	r3, [r0, r1]
 800057a:	3104      	adds	r1, #4

0800057c <LoopCopyDataInit>:
 800057c:	4809      	ldr	r0, [pc, #36]	; (80005a4 <LoopFillZerobss+0x14>)
 800057e:	4b0a      	ldr	r3, [pc, #40]	; (80005a8 <LoopFillZerobss+0x18>)
 8000580:	1842      	adds	r2, r0, r1
 8000582:	429a      	cmp	r2, r3
 8000584:	d3f6      	bcc.n	8000574 <CopyDataInit>
 8000586:	4a09      	ldr	r2, [pc, #36]	; (80005ac <LoopFillZerobss+0x1c>)
 8000588:	e002      	b.n	8000590 <LoopFillZerobss>

0800058a <FillZerobss>:
 800058a:	2300      	movs	r3, #0
 800058c:	f842 3b04 	str.w	r3, [r2], #4

08000590 <LoopFillZerobss>:
 8000590:	4b07      	ldr	r3, [pc, #28]	; (80005b0 <LoopFillZerobss+0x20>)
 8000592:	429a      	cmp	r2, r3
 8000594:	d3f9      	bcc.n	800058a <FillZerobss>
 8000596:	f7ff fe27 	bl	80001e8 <SystemInit>
 800059a:	f7ff ff55 	bl	8000448 <main>
 800059e:	4770      	bx	lr
 80005a0:	08000958 	.word	0x08000958
 80005a4:	20000000 	.word	0x20000000
 80005a8:	20000000 	.word	0x20000000
 80005ac:	20000000 	.word	0x20000000
 80005b0:	20000000 	.word	0x20000000

080005b4 <ADC_IRQHandler>:
 80005b4:	e7fe      	b.n	80005b4 <ADC_IRQHandler>
	...

080005b8 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	460b      	mov	r3, r1
 80005c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80005c4:	78fb      	ldrb	r3, [r7, #3]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d006      	beq.n	80005d8 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80005ca:	490a      	ldr	r1, [pc, #40]	; (80005f4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80005cc:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80005ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	4313      	orrs	r3, r2
 80005d4:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80005d6:	e006      	b.n	80005e6 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80005d8:	4906      	ldr	r1, [pc, #24]	; (80005f4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80005da:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80005dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	43db      	mvns	r3, r3
 80005e2:	4013      	ands	r3, r2
 80005e4:	630b      	str	r3, [r1, #48]	; 0x30
}
 80005e6:	bf00      	nop
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	40023800 	.word	0x40023800

080005f8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	460b      	mov	r3, r1
 8000602:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000604:	78fb      	ldrb	r3, [r7, #3]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d006      	beq.n	8000618 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800060a:	490a      	ldr	r1, [pc, #40]	; (8000634 <RCC_APB1PeriphClockCmd+0x3c>)
 800060c:	4b09      	ldr	r3, [pc, #36]	; (8000634 <RCC_APB1PeriphClockCmd+0x3c>)
 800060e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	4313      	orrs	r3, r2
 8000614:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000616:	e006      	b.n	8000626 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000618:	4906      	ldr	r1, [pc, #24]	; (8000634 <RCC_APB1PeriphClockCmd+0x3c>)
 800061a:	4b06      	ldr	r3, [pc, #24]	; (8000634 <RCC_APB1PeriphClockCmd+0x3c>)
 800061c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	43db      	mvns	r3, r3
 8000622:	4013      	ands	r3, r2
 8000624:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000626:	bf00      	nop
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	40023800 	.word	0x40023800

08000638 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	881b      	ldrh	r3, [r3, #0]
 800064a:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	4a29      	ldr	r2, [pc, #164]	; (80006f4 <TIM_TimeBaseInit+0xbc>)
 8000650:	4293      	cmp	r3, r2
 8000652:	d013      	beq.n	800067c <TIM_TimeBaseInit+0x44>
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	4a28      	ldr	r2, [pc, #160]	; (80006f8 <TIM_TimeBaseInit+0xc0>)
 8000658:	4293      	cmp	r3, r2
 800065a:	d00f      	beq.n	800067c <TIM_TimeBaseInit+0x44>
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000662:	d00b      	beq.n	800067c <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	4a25      	ldr	r2, [pc, #148]	; (80006fc <TIM_TimeBaseInit+0xc4>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d007      	beq.n	800067c <TIM_TimeBaseInit+0x44>
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4a24      	ldr	r2, [pc, #144]	; (8000700 <TIM_TimeBaseInit+0xc8>)
 8000670:	4293      	cmp	r3, r2
 8000672:	d003      	beq.n	800067c <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4a23      	ldr	r2, [pc, #140]	; (8000704 <TIM_TimeBaseInit+0xcc>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d108      	bne.n	800068e <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 800067c:	89fb      	ldrh	r3, [r7, #14]
 800067e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000682:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	885a      	ldrh	r2, [r3, #2]
 8000688:	89fb      	ldrh	r3, [r7, #14]
 800068a:	4313      	orrs	r3, r2
 800068c:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4a1d      	ldr	r2, [pc, #116]	; (8000708 <TIM_TimeBaseInit+0xd0>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d00c      	beq.n	80006b0 <TIM_TimeBaseInit+0x78>
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4a1c      	ldr	r2, [pc, #112]	; (800070c <TIM_TimeBaseInit+0xd4>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d008      	beq.n	80006b0 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800069e:	89fb      	ldrh	r3, [r7, #14]
 80006a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80006a4:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	891a      	ldrh	r2, [r3, #8]
 80006aa:	89fb      	ldrh	r3, [r7, #14]
 80006ac:	4313      	orrs	r3, r2
 80006ae:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	89fa      	ldrh	r2, [r7, #14]
 80006b4:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	685a      	ldr	r2, [r3, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	881a      	ldrh	r2, [r3, #0]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4a0a      	ldr	r2, [pc, #40]	; (80006f4 <TIM_TimeBaseInit+0xbc>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d003      	beq.n	80006d6 <TIM_TimeBaseInit+0x9e>
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4a09      	ldr	r2, [pc, #36]	; (80006f8 <TIM_TimeBaseInit+0xc0>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d104      	bne.n	80006e0 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	7a9b      	ldrb	r3, [r3, #10]
 80006da:	b29a      	uxth	r2, r3
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2201      	movs	r2, #1
 80006e4:	829a      	strh	r2, [r3, #20]
}
 80006e6:	bf00      	nop
 80006e8:	3714      	adds	r7, #20
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	40010000 	.word	0x40010000
 80006f8:	40010400 	.word	0x40010400
 80006fc:	40000400 	.word	0x40000400
 8000700:	40000800 	.word	0x40000800
 8000704:	40000c00 	.word	0x40000c00
 8000708:	40001000 	.word	0x40001000
 800070c:	40001400 	.word	0x40001400

08000710 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800071c:	4618      	mov	r0, r3
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	460b      	mov	r3, r1
 8000732:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000734:	78fb      	ldrb	r3, [r7, #3]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d008      	beq.n	800074c <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	881b      	ldrh	r3, [r3, #0]
 800073e:	b29b      	uxth	r3, r3
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	b29a      	uxth	r2, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 800074a:	e007      	b.n	800075c <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	881b      	ldrh	r3, [r3, #0]
 8000750:	b29b      	uxth	r3, r3
 8000752:	f023 0301 	bic.w	r3, r3, #1
 8000756:	b29a      	uxth	r2, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	801a      	strh	r2, [r3, #0]
}
 800075c:	bf00      	nop
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	460b      	mov	r3, r1
 8000772:	807b      	strh	r3, [r7, #2]
 8000774:	4613      	mov	r3, r2
 8000776:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000778:	787b      	ldrb	r3, [r7, #1]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d008      	beq.n	8000790 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	899b      	ldrh	r3, [r3, #12]
 8000782:	b29a      	uxth	r2, r3
 8000784:	887b      	ldrh	r3, [r7, #2]
 8000786:	4313      	orrs	r3, r2
 8000788:	b29a      	uxth	r2, r3
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 800078e:	e009      	b.n	80007a4 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	899b      	ldrh	r3, [r3, #12]
 8000794:	b29a      	uxth	r2, r3
 8000796:	887b      	ldrh	r3, [r7, #2]
 8000798:	43db      	mvns	r3, r3
 800079a:	b29b      	uxth	r3, r3
 800079c:	4013      	ands	r3, r2
 800079e:	b29a      	uxth	r2, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	819a      	strh	r2, [r3, #12]
}
 80007a4:	bf00      	nop
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr

080007b0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b087      	sub	sp, #28
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
 80007be:	2300      	movs	r3, #0
 80007c0:	613b      	str	r3, [r7, #16]
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
 80007ca:	e076      	b.n	80008ba <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80007cc:	2201      	movs	r2, #1
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	fa02 f303 	lsl.w	r3, r2, r3
 80007d4:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	693b      	ldr	r3, [r7, #16]
 80007dc:	4013      	ands	r3, r2
 80007de:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80007e0:	68fa      	ldr	r2, [r7, #12]
 80007e2:	693b      	ldr	r3, [r7, #16]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d165      	bne.n	80008b4 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	2103      	movs	r1, #3
 80007f2:	fa01 f303 	lsl.w	r3, r1, r3
 80007f6:	43db      	mvns	r3, r3
 80007f8:	401a      	ands	r2, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	791b      	ldrb	r3, [r3, #4]
 8000806:	4619      	mov	r1, r3
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	fa01 f303 	lsl.w	r3, r1, r3
 8000810:	431a      	orrs	r2, r3
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	791b      	ldrb	r3, [r3, #4]
 800081a:	2b01      	cmp	r3, #1
 800081c:	d003      	beq.n	8000826 <GPIO_Init+0x76>
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	791b      	ldrb	r3, [r3, #4]
 8000822:	2b02      	cmp	r3, #2
 8000824:	d12e      	bne.n	8000884 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	689a      	ldr	r2, [r3, #8]
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	2103      	movs	r1, #3
 8000830:	fa01 f303 	lsl.w	r3, r1, r3
 8000834:	43db      	mvns	r3, r3
 8000836:	401a      	ands	r2, r3
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	689a      	ldr	r2, [r3, #8]
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	795b      	ldrb	r3, [r3, #5]
 8000844:	4619      	mov	r1, r3
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	fa01 f303 	lsl.w	r3, r1, r3
 800084e:	431a      	orrs	r2, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	685a      	ldr	r2, [r3, #4]
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	b29b      	uxth	r3, r3
 800085c:	4619      	mov	r1, r3
 800085e:	2301      	movs	r3, #1
 8000860:	408b      	lsls	r3, r1
 8000862:	43db      	mvns	r3, r3
 8000864:	401a      	ands	r2, r3
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	683a      	ldr	r2, [r7, #0]
 8000870:	7992      	ldrb	r2, [r2, #6]
 8000872:	4611      	mov	r1, r2
 8000874:	697a      	ldr	r2, [r7, #20]
 8000876:	b292      	uxth	r2, r2
 8000878:	fa01 f202 	lsl.w	r2, r1, r2
 800087c:	b292      	uxth	r2, r2
 800087e:	431a      	orrs	r2, r3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	68da      	ldr	r2, [r3, #12]
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	b29b      	uxth	r3, r3
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	2103      	movs	r1, #3
 8000890:	fa01 f303 	lsl.w	r3, r1, r3
 8000894:	43db      	mvns	r3, r3
 8000896:	401a      	ands	r2, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	68da      	ldr	r2, [r3, #12]
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	79db      	ldrb	r3, [r3, #7]
 80008a4:	4619      	mov	r1, r3
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	fa01 f303 	lsl.w	r3, r1, r3
 80008ae:	431a      	orrs	r2, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	3301      	adds	r3, #1
 80008b8:	617b      	str	r3, [r7, #20]
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	2b0f      	cmp	r3, #15
 80008be:	d985      	bls.n	80007cc <GPIO_Init+0x1c>
    }
  }
}
 80008c0:	bf00      	nop
 80008c2:	371c      	adds	r7, #28
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	460b      	mov	r3, r1
 80008d6:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80008d8:	2300      	movs	r3, #0
 80008da:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	691a      	ldr	r2, [r3, #16]
 80008e0:	887b      	ldrh	r3, [r7, #2]
 80008e2:	4013      	ands	r3, r2
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d002      	beq.n	80008ee <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80008e8:	2301      	movs	r3, #1
 80008ea:	73fb      	strb	r3, [r7, #15]
 80008ec:	e001      	b.n	80008f2 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80008ee:	2300      	movs	r3, #0
 80008f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80008f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3714      	adds	r7, #20
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	460b      	mov	r3, r1
 800090a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	887a      	ldrh	r2, [r7, #2]
 8000910:	831a      	strh	r2, [r3, #24]
}
 8000912:	bf00      	nop
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr

0800091e <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800091e:	b480      	push	{r7}
 8000920:	b083      	sub	sp, #12
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
 8000926:	460b      	mov	r3, r1
 8000928:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	887a      	ldrh	r2, [r7, #2]
 800092e:	835a      	strh	r2, [r3, #26]
}
 8000930:	bf00      	nop
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	fffffeff 	.word	0xfffffeff
 8000940:	fffffdff 	.word	0xfffffdff
 8000944:	fffffbff 	.word	0xfffffbff
 8000948:	00001000 	.word	0x00001000
 800094c:	00002000 	.word	0x00002000
 8000950:	00004000 	.word	0x00004000
 8000954:	00008000 	.word	0x00008000
