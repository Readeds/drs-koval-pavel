
main.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002c6:	f1a4 0401 	sub.w	r4, r4, #1
 80002ca:	d1e9      	bne.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__aeabi_d2uiz>:
 8000924:	004a      	lsls	r2, r1, #1
 8000926:	d211      	bcs.n	800094c <__aeabi_d2uiz+0x28>
 8000928:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800092c:	d211      	bcs.n	8000952 <__aeabi_d2uiz+0x2e>
 800092e:	d50d      	bpl.n	800094c <__aeabi_d2uiz+0x28>
 8000930:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000934:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000938:	d40e      	bmi.n	8000958 <__aeabi_d2uiz+0x34>
 800093a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800093e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000942:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000946:	fa23 f002 	lsr.w	r0, r3, r2
 800094a:	4770      	bx	lr
 800094c:	f04f 0000 	mov.w	r0, #0
 8000950:	4770      	bx	lr
 8000952:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000956:	d102      	bne.n	800095e <__aeabi_d2uiz+0x3a>
 8000958:	f04f 30ff 	mov.w	r0, #4294967295
 800095c:	4770      	bx	lr
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	4770      	bx	lr

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <NMI_Handler>:
/**
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void) {
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <HardFault_Handler>:
/**
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void) {
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1) {}
 8000ad6:	e7fe      	b.n	8000ad6 <HardFault_Handler+0x4>

08000ad8 <MemManage_Handler>:
/**
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void) {
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1) {}
 8000adc:	e7fe      	b.n	8000adc <MemManage_Handler+0x4>

08000ade <BusFault_Handler>:
/**
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void) {
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1) {}
 8000ae2:	e7fe      	b.n	8000ae2 <BusFault_Handler+0x4>

08000ae4 <UsageFault_Handler>:
/**
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void) {
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1) {}
 8000ae8:	e7fe      	b.n	8000ae8 <UsageFault_Handler+0x4>

08000aea <SVC_Handler>:
/**
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void) {
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0
}
 8000aee:	bf00      	nop
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <DebugMon_Handler>:
/**
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void) {
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <PendSV_Handler>:
/**
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void) {
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <SysTick_Handler>:
/**
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void) {
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
	...

08000b24 <SystemInit>:
  *         Initialize the Embedded Flash Interface, the PLL and update the
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void) {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2));  /* set CP10 and CP11 Full Access */
 8000b28:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <SystemInit+0x60>)
 8000b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b2e:	4a15      	ldr	r2, [pc, #84]	; (8000b84 <SystemInit+0x60>)
 8000b30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000b38:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <SystemInit+0x64>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a12      	ldr	r2, [pc, #72]	; (8000b88 <SystemInit+0x64>)
 8000b3e:	f043 0301 	orr.w	r3, r3, #1
 8000b42:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b44:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <SystemInit+0x64>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000b4a:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <SystemInit+0x64>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a0e      	ldr	r2, [pc, #56]	; (8000b88 <SystemInit+0x64>)
 8000b50:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000b54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b58:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <SystemInit+0x64>)
 8000b5c:	4a0b      	ldr	r2, [pc, #44]	; (8000b8c <SystemInit+0x68>)
 8000b5e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000b60:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <SystemInit+0x64>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a08      	ldr	r2, [pc, #32]	; (8000b88 <SystemInit+0x64>)
 8000b66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b6a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <SystemInit+0x64>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl();
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the System clock source, PLL Multiplier and Divider factors,
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000b72:	f000 f80d 	bl	8000b90 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b76:	4b03      	ldr	r3, [pc, #12]	; (8000b84 <SystemInit+0x60>)
 8000b78:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b7c:	609a      	str	r2, [r3, #8]
#endif
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	e000ed00 	.word	0xe000ed00
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	24003010 	.word	0x24003010

08000b90 <SetSysClock>:
  * @Note   This function should be called only once the RCC clock configuration
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void) {
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	603b      	str	r3, [r7, #0]

  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000b9e:	4b36      	ldr	r3, [pc, #216]	; (8000c78 <SetSysClock+0xe8>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a35      	ldr	r2, [pc, #212]	; (8000c78 <SetSysClock+0xe8>)
 8000ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ba8:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000baa:	4b33      	ldr	r3, [pc, #204]	; (8000c78 <SetSysClock+0xe8>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	607b      	str	r3, [r7, #4]
  }
  while ((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d103      	bne.n	8000bc8 <SetSysClock+0x38>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8000bc6:	d1f0      	bne.n	8000baa <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET) {
 8000bc8:	4b2b      	ldr	r3, [pc, #172]	; (8000c78 <SetSysClock+0xe8>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d002      	beq.n	8000bda <SetSysClock+0x4a>
    HSEStatus = (uint32_t)0x01;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	603b      	str	r3, [r7, #0]
 8000bd8:	e001      	b.n	8000bde <SetSysClock+0x4e>
  } else {
    HSEStatus = (uint32_t)0x00;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01) {
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d142      	bne.n	8000c6a <SetSysClock+0xda>
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000be4:	4b24      	ldr	r3, [pc, #144]	; (8000c78 <SetSysClock+0xe8>)
 8000be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be8:	4a23      	ldr	r2, [pc, #140]	; (8000c78 <SetSysClock+0xe8>)
 8000bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bee:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000bf0:	4b22      	ldr	r3, [pc, #136]	; (8000c7c <SetSysClock+0xec>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a21      	ldr	r2, [pc, #132]	; (8000c7c <SetSysClock+0xec>)
 8000bf6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bfa:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000bfc:	4b1e      	ldr	r3, [pc, #120]	; (8000c78 <SetSysClock+0xe8>)
 8000bfe:	4a1e      	ldr	r2, [pc, #120]	; (8000c78 <SetSysClock+0xe8>)
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	6093      	str	r3, [r2, #8]

#if defined (STM32F40_41xxx) || defined (STM32F427_437xx) || defined (STM32F429_439xx)
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000c04:	4b1c      	ldr	r3, [pc, #112]	; (8000c78 <SetSysClock+0xe8>)
 8000c06:	689b      	ldr	r3, [r3, #8]
 8000c08:	4a1b      	ldr	r2, [pc, #108]	; (8000c78 <SetSysClock+0xe8>)
 8000c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c0e:	6093      	str	r3, [r2, #8]

    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000c10:	4b19      	ldr	r3, [pc, #100]	; (8000c78 <SetSysClock+0xe8>)
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	4a18      	ldr	r2, [pc, #96]	; (8000c78 <SetSysClock+0xe8>)
 8000c16:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000c1a:	6093      	str	r3, [r2, #8]
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) - 1) << 16) |
 8000c1c:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <SetSysClock+0xe8>)
 8000c1e:	4a18      	ldr	r2, [pc, #96]	; (8000c80 <SetSysClock+0xf0>)
 8000c20:	605a      	str	r2, [r3, #4]
          (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000c22:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <SetSysClock+0xe8>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a14      	ldr	r2, [pc, #80]	; (8000c78 <SetSysClock+0xe8>)
 8000c28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c2c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while ((RCC->CR & RCC_CR_PLLRDY) == 0) {}
 8000c2e:	bf00      	nop
 8000c30:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <SetSysClock+0xe8>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d0f9      	beq.n	8000c30 <SetSysClock+0xa0>
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
#endif /* STM32F427_437x || STM32F429_439xx  */

#if defined (STM32F40_41xxx)
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <SetSysClock+0xf4>)
 8000c3e:	f240 7205 	movw	r2, #1797	; 0x705
 8000c42:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <SetSysClock+0xe8>)
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	4a0b      	ldr	r2, [pc, #44]	; (8000c78 <SetSysClock+0xe8>)
 8000c4a:	f023 0303 	bic.w	r3, r3, #3
 8000c4e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000c50:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <SetSysClock+0xe8>)
 8000c52:	689b      	ldr	r3, [r3, #8]
 8000c54:	4a08      	ldr	r2, [pc, #32]	; (8000c78 <SetSysClock+0xe8>)
 8000c56:	f043 0302 	orr.w	r3, r3, #2
 8000c5a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8000c5c:	bf00      	nop
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <SetSysClock+0xe8>)
 8000c60:	689b      	ldr	r3, [r3, #8]
 8000c62:	f003 030c 	and.w	r3, r3, #12
 8000c66:	2b08      	cmp	r3, #8
 8000c68:	d1f9      	bne.n	8000c5e <SetSysClock+0xce>
    {}
  } else { /* If HSE fails to start-up, the application will have wrong clock
                configuration. User can add here some code to deal with this error */
  }

}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40007000 	.word	0x40007000
 8000c80:	07405408 	.word	0x07405408
 8000c84:	40023c00 	.word	0x40023c00

08000c88 <all_leds1>:
uint32_t time;


static
int all_leds1 ()
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);
 8000c8e:	463b      	mov	r3, r7
 8000c90:	4618      	mov	r0, r3
 8000c92:	f000 fc9a 	bl	80015ca <GPIO_StructInit>

  GPIO_PinAFConfig(GPIOA,LED_RED, GPIO_AF_TIM1);
 8000c96:	2201      	movs	r2, #1
 8000c98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c9c:	480d      	ldr	r0, [pc, #52]	; (8000cd4 <all_leds1+0x4c>)
 8000c9e:	f000 fcae 	bl	80015fe <GPIO_PinAFConfig>
  
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	f000 f9b1 	bl	800100c <RCC_AHB1PeriphClockCmd>
 
  GPIO_InitStructure.GPIO_Pin =LED_RED;
 8000caa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cae:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000cc0:	463b      	mov	r3, r7
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4803      	ldr	r0, [pc, #12]	; (8000cd4 <all_leds1+0x4c>)
 8000cc6:	f000 fbf2 	bl	80014ae <GPIO_Init>
  

  return 0;
 8000cca:	2300      	movs	r3, #0


}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40020000 	.word	0x40020000

08000cd8 <timers>:
  return 0;
 
}

static
int timers(){
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
    TIM_TimeBaseInitTypeDef timer;
    TIM_TimeBaseStructInit(&timer);
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f000 fa5f 	bl	80011a4 <TIM_TimeBaseStructInit>
    
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	2001      	movs	r0, #1
 8000cea:	f000 f9cf 	bl	800108c <RCC_APB2PeriphClockCmd>
    timer.TIM_Prescaler = 1680;
 8000cee:	f44f 63d2 	mov.w	r3, #1680	; 0x690
 8000cf2:	80bb      	strh	r3, [r7, #4]
    timer.TIM_CounterMode = TIM_CounterMode_Up;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	80fb      	strh	r3, [r7, #6]
    timer.TIM_Period = (uint16_t)(100000 / PWM_FREQUENCY_HZ -1 );
 8000cf8:	f240 73cf 	movw	r3, #1999	; 0x7cf
 8000cfc:	60bb      	str	r3, [r7, #8]
    timer.TIM_ClockDivision = TIM_CKD_DIV1;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	81bb      	strh	r3, [r7, #12]
    timer.TIM_RepetitionCounter = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	73bb      	strb	r3, [r7, #14]
    TIM_TimeBaseInit(TIM1, &timer);
 8000d06:	1d3b      	adds	r3, r7, #4
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4812      	ldr	r0, [pc, #72]	; (8000d54 <timers+0x7c>)
 8000d0c:	f000 f9de 	bl	80010cc <TIM_TimeBaseInit>

    TIM_TimeBaseStructInit(&timer);
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	4618      	mov	r0, r3
 8000d14:	f000 fa46 	bl	80011a4 <TIM_TimeBaseStructInit>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8000d18:	2101      	movs	r1, #1
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	f000 f996 	bl	800104c <RCC_APB1PeriphClockCmd>
    timer.TIM_Prescaler = 50;
 8000d20:	2332      	movs	r3, #50	; 0x32
 8000d22:	80bb      	strh	r3, [r7, #4]
    timer.TIM_Period = 100;
 8000d24:	2364      	movs	r3, #100	; 0x64
 8000d26:	60bb      	str	r3, [r7, #8]
    timer.TIM_ClockDivision = TIM_CKD_DIV1;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	81bb      	strh	r3, [r7, #12]
    timer.TIM_RepetitionCounter =0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	73bb      	strb	r3, [r7, #14]
    TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 8000d30:	2201      	movs	r2, #1
 8000d32:	2101      	movs	r1, #1
 8000d34:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000d38:	f000 fb5a 	bl	80013f0 <TIM_ITConfig>
    TIM_TimeBaseInit(TIM2, &timer);
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	4619      	mov	r1, r3
 8000d40:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000d44:	f000 f9c2 	bl	80010cc <TIM_TimeBaseInit>

    return 0;
 8000d48:	2300      	movs	r3, #0

    
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40010000 	.word	0x40010000

08000d58 <interrupts>:
static int
interrupts(void){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
  
  NVIC_InitTypeDef nvic;
  nvic.NVIC_IRQChannel = TIM2_IRQn;
 8000d5e:	231c      	movs	r3, #28
 8000d60:	713b      	strb	r3, [r7, #4]
  nvic.NVIC_IRQChannelPreemptionPriority = 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	717b      	strb	r3, [r7, #5]
  nvic.NVIC_IRQChannelSubPriority =1;
 8000d66:	2301      	movs	r3, #1
 8000d68:	71bb      	strb	r3, [r7, #6]
  nvic.NVIC_IRQChannelCmd =ENABLE;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&nvic);
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	4618      	mov	r0, r3
 8000d72:	f000 f8e9 	bl	8000f48 <NVIC_Init>

  return 0;
 8000d76:	2300      	movs	r3, #0
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <pwm>:

static int
pwm(void){
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
  TIM_OCInitTypeDef oc_init;

  TIM_OCStructInit(&oc_init);
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f000 fabf 	bl	800130c <TIM_OCStructInit>

  oc_init.TIM_OCMode = TIM_OCMode_PWM1;
 8000d8e:	2360      	movs	r3, #96	; 0x60
 8000d90:	80bb      	strh	r3, [r7, #4]
  oc_init.TIM_Pulse = (uint16_t)(100000 / PWM_FREQUENCY_HZ -1)*0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
  oc_init.TIM_OutputState = TIM_OutputState_Enable;
 8000d96:	2301      	movs	r3, #1
 8000d98:	80fb      	strh	r3, [r7, #6]
  oc_init.TIM_OCPolarity = TIM_OCPolarity_Low;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	823b      	strh	r3, [r7, #16]

  TIM_OC1Init(TIM1, &oc_init);
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	4619      	mov	r1, r3
 8000da2:	4808      	ldr	r0, [pc, #32]	; (8000dc4 <pwm+0x44>)
 8000da4:	f000 fa38 	bl	8001218 <TIM_OC1Init>
  TIM_OC1PreloadConfig(TIM1 , TIM_OCPreload_Enable);
 8000da8:	2108      	movs	r1, #8
 8000daa:	4806      	ldr	r0, [pc, #24]	; (8000dc4 <pwm+0x44>)
 8000dac:	f000 fade 	bl	800136c <TIM_OC1PreloadConfig>

  TIM_CtrlPWMOutputs(TIM1, ENABLE);
 8000db0:	2101      	movs	r1, #1
 8000db2:	4804      	ldr	r0, [pc, #16]	; (8000dc4 <pwm+0x44>)
 8000db4:	f000 faf6 	bl	80013a4 <TIM_CtrlPWMOutputs>

  return 0;
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3718      	adds	r7, #24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40010000 	.word	0x40010000

08000dc8 <start_timers>:

static int
start_timers(void){
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  time=0;
 8000dcc:	4b07      	ldr	r3, [pc, #28]	; (8000dec <start_timers+0x24>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
  TIM_Cmd(TIM1, ENABLE);
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	4806      	ldr	r0, [pc, #24]	; (8000df0 <start_timers+0x28>)
 8000dd6:	f000 f9ff 	bl	80011d8 <TIM_Cmd>
  TIM_Cmd(TIM2, ENABLE);
 8000dda:	2101      	movs	r1, #1
 8000ddc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000de0:	f000 f9fa 	bl	80011d8 <TIM_Cmd>
}
 8000de4:	bf00      	nop
 8000de6:	4618      	mov	r0, r3
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000000 	.word	0x20000000
 8000df0:	40010000 	.word	0x40010000
 8000df4:	00000000 	.word	0x00000000

08000df8 <TIM2_IRQHandler>:

void
TIM2_IRQHandler(void){
 8000df8:	b5b0      	push	{r4, r5, r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
  if(TIM_GetITStatus(TIM2,TIM_IT_Update) != RESET){
 8000dfe:	2101      	movs	r1, #1
 8000e00:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e04:	f000 fb18 	bl	8001438 <TIM_GetITStatus>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d055      	beq.n	8000eba <TIM2_IRQHandler+0xc2>
    TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 8000e0e:	2101      	movs	r1, #1
 8000e10:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e14:	f000 fb3a 	bl	800148c <TIM_ClearITPendingBit>

    time++;
 8000e18:	4b2f      	ldr	r3, [pc, #188]	; (8000ed8 <TIM2_IRQHandler+0xe0>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	4a2e      	ldr	r2, [pc, #184]	; (8000ed8 <TIM2_IRQHandler+0xe0>)
 8000e20:	6013      	str	r3, [r2, #0]
    uint16_t period = 2000;
 8000e22:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000e26:	80fb      	strh	r3, [r7, #6]
    uint16_t pwm_value = (cos(time*6.28/period)+1)/2.0f*(100000/PWM_FREQUENCY_HZ-1);
 8000e28:	4b2b      	ldr	r3, [pc, #172]	; (8000ed8 <TIM2_IRQHandler+0xe0>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff faed 	bl	800040c <__aeabi_ui2d>
 8000e32:	a325      	add	r3, pc, #148	; (adr r3, 8000ec8 <TIM2_IRQHandler+0xd0>)
 8000e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e38:	f7ff fb62 	bl	8000500 <__aeabi_dmul>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	460c      	mov	r4, r1
 8000e40:	4625      	mov	r5, r4
 8000e42:	461c      	mov	r4, r3
 8000e44:	88fb      	ldrh	r3, [r7, #6]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff faf0 	bl	800042c <__aeabi_i2d>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	460b      	mov	r3, r1
 8000e50:	4620      	mov	r0, r4
 8000e52:	4629      	mov	r1, r5
 8000e54:	f7ff fc7e 	bl	8000754 <__aeabi_ddiv>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	460c      	mov	r4, r1
 8000e5c:	ec44 3b17 	vmov	d7, r3, r4
 8000e60:	eeb0 0a47 	vmov.f32	s0, s14
 8000e64:	eef0 0a67 	vmov.f32	s1, s15
 8000e68:	f000 fc12 	bl	8001690 <cos>
 8000e6c:	ec51 0b10 	vmov	r0, r1, d0
 8000e70:	f04f 0200 	mov.w	r2, #0
 8000e74:	4b19      	ldr	r3, [pc, #100]	; (8000edc <TIM2_IRQHandler+0xe4>)
 8000e76:	f7ff f98d 	bl	8000194 <__adddf3>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	460c      	mov	r4, r1
 8000e7e:	4618      	mov	r0, r3
 8000e80:	4621      	mov	r1, r4
 8000e82:	f04f 0200 	mov.w	r2, #0
 8000e86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e8a:	f7ff fc63 	bl	8000754 <__aeabi_ddiv>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	460c      	mov	r4, r1
 8000e92:	4618      	mov	r0, r3
 8000e94:	4621      	mov	r1, r4
 8000e96:	a30e      	add	r3, pc, #56	; (adr r3, 8000ed0 <TIM2_IRQHandler+0xd8>)
 8000e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e9c:	f7ff fb30 	bl	8000500 <__aeabi_dmul>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	460c      	mov	r4, r1
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	4621      	mov	r1, r4
 8000ea8:	f7ff fd3c 	bl	8000924 <__aeabi_d2uiz>
 8000eac:	4603      	mov	r3, r0
 8000eae:	80bb      	strh	r3, [r7, #4]
    TIM_SetCompare1(TIM1, pwm_value);
 8000eb0:	88bb      	ldrh	r3, [r7, #4]
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	480a      	ldr	r0, [pc, #40]	; (8000ee0 <TIM2_IRQHandler+0xe8>)
 8000eb6:	f000 fa4b 	bl	8001350 <TIM_SetCompare1>
  }
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bdb0      	pop	{r4, r5, r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	f3af 8000 	nop.w
 8000ec8:	51eb851f 	.word	0x51eb851f
 8000ecc:	40191eb8 	.word	0x40191eb8
 8000ed0:	00000000 	.word	0x00000000
 8000ed4:	409f3c00 	.word	0x409f3c00
 8000ed8:	20000000 	.word	0x20000000
 8000edc:	3ff00000 	.word	0x3ff00000
 8000ee0:	40010000 	.word	0x40010000

08000ee4 <main>:
	    {
	      EXTI_ClearITPendingBit(BUTTON_L);
	      counter = -counter;
	    }
	    }*/
int main(void){
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  timers();
 8000ee8:	f7ff fef6 	bl	8000cd8 <timers>
  interrupts();
 8000eec:	f7ff ff34 	bl	8000d58 <interrupts>
  pwm();
 8000ef0:	f7ff ff46 	bl	8000d80 <pwm>

  all_leds1();
 8000ef4:	f7ff fec8 	bl	8000c88 <all_leds1>
  start_timers();
 8000ef8:	f7ff ff66 	bl	8000dc8 <start_timers>
  
  while(1){
 8000efc:	e7fe      	b.n	8000efc <main+0x18>
	...

08000f00 <Reset_Handler>:
 8000f00:	2100      	movs	r1, #0
 8000f02:	e003      	b.n	8000f0c <LoopCopyDataInit>

08000f04 <CopyDataInit>:
 8000f04:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <LoopFillZerobss+0x10>)
 8000f06:	585b      	ldr	r3, [r3, r1]
 8000f08:	5043      	str	r3, [r0, r1]
 8000f0a:	3104      	adds	r1, #4

08000f0c <LoopCopyDataInit>:
 8000f0c:	4809      	ldr	r0, [pc, #36]	; (8000f34 <LoopFillZerobss+0x14>)
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <LoopFillZerobss+0x18>)
 8000f10:	1842      	adds	r2, r0, r1
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d3f6      	bcc.n	8000f04 <CopyDataInit>
 8000f16:	4a09      	ldr	r2, [pc, #36]	; (8000f3c <LoopFillZerobss+0x1c>)
 8000f18:	e002      	b.n	8000f20 <LoopFillZerobss>

08000f1a <FillZerobss>:
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	f842 3b04 	str.w	r3, [r2], #4

08000f20 <LoopFillZerobss>:
 8000f20:	4b07      	ldr	r3, [pc, #28]	; (8000f40 <LoopFillZerobss+0x20>)
 8000f22:	429a      	cmp	r2, r3
 8000f24:	d3f9      	bcc.n	8000f1a <FillZerobss>
 8000f26:	f7ff fdfd 	bl	8000b24 <SystemInit>
 8000f2a:	f7ff ffdb 	bl	8000ee4 <main>
 8000f2e:	4770      	bx	lr
 8000f30:	08002c60 	.word	0x08002c60
 8000f34:	20000000 	.word	0x20000000
 8000f38:	20000000 	.word	0x20000000
 8000f3c:	20000000 	.word	0x20000000
 8000f40:	20000000 	.word	0x20000000

08000f44 <ADC_IRQHandler>:
 8000f44:	e7fe      	b.n	8000f44 <ADC_IRQHandler>
	...

08000f48 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000f50:	2300      	movs	r3, #0
 8000f52:	73fb      	strb	r3, [r7, #15]
 8000f54:	2300      	movs	r3, #0
 8000f56:	73bb      	strb	r3, [r7, #14]
 8000f58:	230f      	movs	r3, #15
 8000f5a:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	78db      	ldrb	r3, [r3, #3]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d039      	beq.n	8000fd8 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000f64:	4b27      	ldr	r3, [pc, #156]	; (8001004 <NVIC_Init+0xbc>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	0a1b      	lsrs	r3, r3, #8
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	f1c3 0304 	rsb	r3, r3, #4
 8000f7a:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000f7c:	7b7a      	ldrb	r2, [r7, #13]
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	fa42 f303 	asr.w	r3, r2, r3
 8000f84:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	785b      	ldrb	r3, [r3, #1]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	7bbb      	ldrb	r3, [r7, #14]
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	789a      	ldrb	r2, [r3, #2]
 8000f98:	7b7b      	ldrb	r3, [r7, #13]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
 8000fa6:	011b      	lsls	r3, r3, #4
 8000fa8:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000faa:	4a17      	ldr	r2, [pc, #92]	; (8001008 <NVIC_Init+0xc0>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	7bfa      	ldrb	r2, [r7, #15]
 8000fb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000fb8:	4a13      	ldr	r2, [pc, #76]	; (8001008 <NVIC_Init+0xc0>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	095b      	lsrs	r3, r3, #5
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	f003 031f 	and.w	r3, r3, #31
 8000fcc:	2101      	movs	r1, #1
 8000fce:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000fd2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000fd6:	e00f      	b.n	8000ff8 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000fd8:	490b      	ldr	r1, [pc, #44]	; (8001008 <NVIC_Init+0xc0>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	095b      	lsrs	r3, r3, #5
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	f003 031f 	and.w	r3, r3, #31
 8000fec:	2201      	movs	r2, #1
 8000fee:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000ff0:	f100 0320 	add.w	r3, r0, #32
 8000ff4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000ff8:	bf00      	nop
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00
 8001008:	e000e100 	.word	0xe000e100

0800100c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	460b      	mov	r3, r1
 8001016:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001018:	78fb      	ldrb	r3, [r7, #3]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d006      	beq.n	800102c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800101e:	490a      	ldr	r1, [pc, #40]	; (8001048 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001020:	4b09      	ldr	r3, [pc, #36]	; (8001048 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001022:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4313      	orrs	r3, r2
 8001028:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800102a:	e006      	b.n	800103a <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800102c:	4906      	ldr	r1, [pc, #24]	; (8001048 <RCC_AHB1PeriphClockCmd+0x3c>)
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001030:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	43db      	mvns	r3, r3
 8001036:	4013      	ands	r3, r2
 8001038:	630b      	str	r3, [r1, #48]	; 0x30
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	40023800 	.word	0x40023800

0800104c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	460b      	mov	r3, r1
 8001056:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001058:	78fb      	ldrb	r3, [r7, #3]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d006      	beq.n	800106c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800105e:	490a      	ldr	r1, [pc, #40]	; (8001088 <RCC_APB1PeriphClockCmd+0x3c>)
 8001060:	4b09      	ldr	r3, [pc, #36]	; (8001088 <RCC_APB1PeriphClockCmd+0x3c>)
 8001062:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4313      	orrs	r3, r2
 8001068:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800106a:	e006      	b.n	800107a <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800106c:	4906      	ldr	r1, [pc, #24]	; (8001088 <RCC_APB1PeriphClockCmd+0x3c>)
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <RCC_APB1PeriphClockCmd+0x3c>)
 8001070:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	43db      	mvns	r3, r3
 8001076:	4013      	ands	r3, r2
 8001078:	640b      	str	r3, [r1, #64]	; 0x40
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	40023800 	.word	0x40023800

0800108c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001098:	78fb      	ldrb	r3, [r7, #3]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d006      	beq.n	80010ac <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800109e:	490a      	ldr	r1, [pc, #40]	; (80010c8 <RCC_APB2PeriphClockCmd+0x3c>)
 80010a0:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <RCC_APB2PeriphClockCmd+0x3c>)
 80010a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80010aa:	e006      	b.n	80010ba <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80010ac:	4906      	ldr	r1, [pc, #24]	; (80010c8 <RCC_APB2PeriphClockCmd+0x3c>)
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <RCC_APB2PeriphClockCmd+0x3c>)
 80010b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	43db      	mvns	r3, r3
 80010b6:	4013      	ands	r3, r2
 80010b8:	644b      	str	r3, [r1, #68]	; 0x44
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	40023800 	.word	0x40023800

080010cc <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	881b      	ldrh	r3, [r3, #0]
 80010de:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a29      	ldr	r2, [pc, #164]	; (8001188 <TIM_TimeBaseInit+0xbc>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d013      	beq.n	8001110 <TIM_TimeBaseInit+0x44>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4a28      	ldr	r2, [pc, #160]	; (800118c <TIM_TimeBaseInit+0xc0>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d00f      	beq.n	8001110 <TIM_TimeBaseInit+0x44>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010f6:	d00b      	beq.n	8001110 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a25      	ldr	r2, [pc, #148]	; (8001190 <TIM_TimeBaseInit+0xc4>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d007      	beq.n	8001110 <TIM_TimeBaseInit+0x44>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a24      	ldr	r2, [pc, #144]	; (8001194 <TIM_TimeBaseInit+0xc8>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d003      	beq.n	8001110 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a23      	ldr	r2, [pc, #140]	; (8001198 <TIM_TimeBaseInit+0xcc>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d108      	bne.n	8001122 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8001110:	89fb      	ldrh	r3, [r7, #14]
 8001112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001116:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	885a      	ldrh	r2, [r3, #2]
 800111c:	89fb      	ldrh	r3, [r7, #14]
 800111e:	4313      	orrs	r3, r2
 8001120:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a1d      	ldr	r2, [pc, #116]	; (800119c <TIM_TimeBaseInit+0xd0>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d00c      	beq.n	8001144 <TIM_TimeBaseInit+0x78>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a1c      	ldr	r2, [pc, #112]	; (80011a0 <TIM_TimeBaseInit+0xd4>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d008      	beq.n	8001144 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8001132:	89fb      	ldrh	r3, [r7, #14]
 8001134:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001138:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	891a      	ldrh	r2, [r3, #8]
 800113e:	89fb      	ldrh	r3, [r7, #14]
 8001140:	4313      	orrs	r3, r2
 8001142:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	89fa      	ldrh	r2, [r7, #14]
 8001148:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685a      	ldr	r2, [r3, #4]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	881a      	ldrh	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a0a      	ldr	r2, [pc, #40]	; (8001188 <TIM_TimeBaseInit+0xbc>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d003      	beq.n	800116a <TIM_TimeBaseInit+0x9e>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a09      	ldr	r2, [pc, #36]	; (800118c <TIM_TimeBaseInit+0xc0>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d104      	bne.n	8001174 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	7a9b      	ldrb	r3, [r3, #10]
 800116e:	b29a      	uxth	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2201      	movs	r2, #1
 8001178:	829a      	strh	r2, [r3, #20]
}
 800117a:	bf00      	nop
 800117c:	3714      	adds	r7, #20
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	40010000 	.word	0x40010000
 800118c:	40010400 	.word	0x40010400
 8001190:	40000400 	.word	0x40000400
 8001194:	40000800 	.word	0x40000800
 8001198:	40000c00 	.word	0x40000c00
 800119c:	40001000 	.word	0x40001000
 80011a0:	40001400 	.word	0x40001400

080011a4 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f04f 32ff 	mov.w	r2, #4294967295
 80011b2:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2200      	movs	r2, #0
 80011c4:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	729a      	strb	r2, [r3, #10]
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	460b      	mov	r3, r1
 80011e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80011e4:	78fb      	ldrb	r3, [r7, #3]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d008      	beq.n	80011fc <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	881b      	ldrh	r3, [r3, #0]
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 80011fa:	e007      	b.n	800120c <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	881b      	ldrh	r3, [r3, #0]
 8001200:	b29b      	uxth	r3, r3
 8001202:	f023 0301 	bic.w	r3, r3, #1
 8001206:	b29a      	uxth	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	801a      	strh	r2, [r3, #0]
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	817b      	strh	r3, [r7, #10]
 8001226:	2300      	movs	r3, #0
 8001228:	81fb      	strh	r3, [r7, #14]
 800122a:	2300      	movs	r3, #0
 800122c:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	8c1b      	ldrh	r3, [r3, #32]
 8001232:	b29b      	uxth	r3, r3
 8001234:	f023 0301 	bic.w	r3, r3, #1
 8001238:	b29a      	uxth	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	8c1b      	ldrh	r3, [r3, #32]
 8001242:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	889b      	ldrh	r3, [r3, #4]
 8001248:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	8b1b      	ldrh	r3, [r3, #24]
 800124e:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 8001250:	897b      	ldrh	r3, [r7, #10]
 8001252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001256:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 8001258:	897b      	ldrh	r3, [r7, #10]
 800125a:	f023 0303 	bic.w	r3, r3, #3
 800125e:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	881a      	ldrh	r2, [r3, #0]
 8001264:	897b      	ldrh	r3, [r7, #10]
 8001266:	4313      	orrs	r3, r2
 8001268:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 800126a:	89fb      	ldrh	r3, [r7, #14]
 800126c:	f023 0302 	bic.w	r3, r3, #2
 8001270:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	899a      	ldrh	r2, [r3, #12]
 8001276:	89fb      	ldrh	r3, [r7, #14]
 8001278:	4313      	orrs	r3, r2
 800127a:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	885a      	ldrh	r2, [r3, #2]
 8001280:	89fb      	ldrh	r3, [r7, #14]
 8001282:	4313      	orrs	r3, r2
 8001284:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a1e      	ldr	r2, [pc, #120]	; (8001304 <TIM_OC1Init+0xec>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d003      	beq.n	8001296 <TIM_OC1Init+0x7e>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a1d      	ldr	r2, [pc, #116]	; (8001308 <TIM_OC1Init+0xf0>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d123      	bne.n	80012de <TIM_OC1Init+0xc6>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8001296:	89fb      	ldrh	r3, [r7, #14]
 8001298:	f023 0308 	bic.w	r3, r3, #8
 800129c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	89da      	ldrh	r2, [r3, #14]
 80012a2:	89fb      	ldrh	r3, [r7, #14]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 80012a8:	89fb      	ldrh	r3, [r7, #14]
 80012aa:	f023 0304 	bic.w	r3, r3, #4
 80012ae:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	889a      	ldrh	r2, [r3, #4]
 80012b4:	89fb      	ldrh	r3, [r7, #14]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 80012ba:	89bb      	ldrh	r3, [r7, #12]
 80012bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012c0:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 80012c2:	89bb      	ldrh	r3, [r7, #12]
 80012c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80012c8:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	8a1a      	ldrh	r2, [r3, #16]
 80012ce:	89bb      	ldrh	r3, [r7, #12]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	8a5a      	ldrh	r2, [r3, #18]
 80012d8:	89bb      	ldrh	r3, [r7, #12]
 80012da:	4313      	orrs	r3, r2
 80012dc:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	89ba      	ldrh	r2, [r7, #12]
 80012e2:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	897a      	ldrh	r2, [r7, #10]
 80012e8:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	689a      	ldr	r2, [r3, #8]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	89fa      	ldrh	r2, [r7, #14]
 80012f6:	841a      	strh	r2, [r3, #32]
}
 80012f8:	bf00      	nop
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	40010000 	.word	0x40010000
 8001308:	40010400 	.word	0x40010400

0800130c <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	801a      	strh	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	805a      	strh	r2, [r3, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	81da      	strh	r2, [r3, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	821a      	strh	r2, [r3, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	825a      	strh	r2, [r3, #18]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	683a      	ldr	r2, [r7, #0]
 800135e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	8b1b      	ldrh	r3, [r3, #24]
 8001380:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 8001382:	89fb      	ldrh	r3, [r7, #14]
 8001384:	f023 0308 	bic.w	r3, r3, #8
 8001388:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 800138a:	89fa      	ldrh	r2, [r7, #14]
 800138c:	887b      	ldrh	r3, [r7, #2]
 800138e:	4313      	orrs	r3, r2
 8001390:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	89fa      	ldrh	r2, [r7, #14]
 8001396:	831a      	strh	r2, [r3, #24]
}
 8001398:	bf00      	nop
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	460b      	mov	r3, r1
 80013ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80013b0:	78fb      	ldrb	r3, [r7, #3]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d00c      	beq.n	80013d0 <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013bc:	b29b      	uxth	r3, r3
 80013be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80013c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
  }  
}
 80013ce:	e009      	b.n	80013e4 <TIM_CtrlPWMOutputs+0x40>
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80013dc:	b29a      	uxth	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	460b      	mov	r3, r1
 80013fa:	807b      	strh	r3, [r7, #2]
 80013fc:	4613      	mov	r3, r2
 80013fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001400:	787b      	ldrb	r3, [r7, #1]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d008      	beq.n	8001418 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	899b      	ldrh	r3, [r3, #12]
 800140a:	b29a      	uxth	r2, r3
 800140c:	887b      	ldrh	r3, [r7, #2]
 800140e:	4313      	orrs	r3, r2
 8001410:	b29a      	uxth	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8001416:	e009      	b.n	800142c <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	899b      	ldrh	r3, [r3, #12]
 800141c:	b29a      	uxth	r2, r3
 800141e:	887b      	ldrh	r3, [r7, #2]
 8001420:	43db      	mvns	r3, r3
 8001422:	b29b      	uxth	r3, r3
 8001424:	4013      	ands	r3, r2
 8001426:	b29a      	uxth	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	819a      	strh	r2, [r3, #12]
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	460b      	mov	r3, r1
 8001442:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8001444:	2300      	movs	r3, #0
 8001446:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8001448:	2300      	movs	r3, #0
 800144a:	81bb      	strh	r3, [r7, #12]
 800144c:	2300      	movs	r3, #0
 800144e:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	8a1b      	ldrh	r3, [r3, #16]
 8001454:	b29a      	uxth	r2, r3
 8001456:	887b      	ldrh	r3, [r7, #2]
 8001458:	4013      	ands	r3, r2
 800145a:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	899b      	ldrh	r3, [r3, #12]
 8001460:	b29a      	uxth	r2, r3
 8001462:	887b      	ldrh	r3, [r7, #2]
 8001464:	4013      	ands	r3, r2
 8001466:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8001468:	89bb      	ldrh	r3, [r7, #12]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d005      	beq.n	800147a <TIM_GetITStatus+0x42>
 800146e:	897b      	ldrh	r3, [r7, #10]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d002      	beq.n	800147a <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8001474:	2301      	movs	r3, #1
 8001476:	73fb      	strb	r3, [r7, #15]
 8001478:	e001      	b.n	800147e <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 800147a:	2300      	movs	r3, #0
 800147c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800147e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001480:	4618      	mov	r0, r3
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	460b      	mov	r3, r1
 8001496:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001498:	887b      	ldrh	r3, [r7, #2]
 800149a:	43db      	mvns	r3, r3
 800149c:	b29a      	uxth	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	821a      	strh	r2, [r3, #16]
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b087      	sub	sp, #28
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
 80014b6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	2300      	movs	r3, #0
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	2300      	movs	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
 80014c8:	e076      	b.n	80015b8 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80014ca:	2201      	movs	r2, #1
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	4013      	ands	r3, r2
 80014dc:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d165      	bne.n	80015b2 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	2103      	movs	r1, #3
 80014f0:	fa01 f303 	lsl.w	r3, r1, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	401a      	ands	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	791b      	ldrb	r3, [r3, #4]
 8001504:	4619      	mov	r1, r3
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	fa01 f303 	lsl.w	r3, r1, r3
 800150e:	431a      	orrs	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	791b      	ldrb	r3, [r3, #4]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d003      	beq.n	8001524 <GPIO_Init+0x76>
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	791b      	ldrb	r3, [r3, #4]
 8001520:	2b02      	cmp	r3, #2
 8001522:	d12e      	bne.n	8001582 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689a      	ldr	r2, [r3, #8]
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	2103      	movs	r1, #3
 800152e:	fa01 f303 	lsl.w	r3, r1, r3
 8001532:	43db      	mvns	r3, r3
 8001534:	401a      	ands	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689a      	ldr	r2, [r3, #8]
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	795b      	ldrb	r3, [r3, #5]
 8001542:	4619      	mov	r1, r3
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	fa01 f303 	lsl.w	r3, r1, r3
 800154c:	431a      	orrs	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685a      	ldr	r2, [r3, #4]
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	b29b      	uxth	r3, r3
 800155a:	4619      	mov	r1, r3
 800155c:	2301      	movs	r3, #1
 800155e:	408b      	lsls	r3, r1
 8001560:	43db      	mvns	r3, r3
 8001562:	401a      	ands	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	683a      	ldr	r2, [r7, #0]
 800156e:	7992      	ldrb	r2, [r2, #6]
 8001570:	4611      	mov	r1, r2
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	b292      	uxth	r2, r2
 8001576:	fa01 f202 	lsl.w	r2, r1, r2
 800157a:	b292      	uxth	r2, r2
 800157c:	431a      	orrs	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68da      	ldr	r2, [r3, #12]
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	b29b      	uxth	r3, r3
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	2103      	movs	r1, #3
 800158e:	fa01 f303 	lsl.w	r3, r1, r3
 8001592:	43db      	mvns	r3, r3
 8001594:	401a      	ands	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	68da      	ldr	r2, [r3, #12]
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	79db      	ldrb	r3, [r3, #7]
 80015a2:	4619      	mov	r1, r3
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	fa01 f303 	lsl.w	r3, r1, r3
 80015ac:	431a      	orrs	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	3301      	adds	r3, #1
 80015b6:	617b      	str	r3, [r7, #20]
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	2b0f      	cmp	r3, #15
 80015bc:	d985      	bls.n	80014ca <GPIO_Init+0x1c>
    }
  }
}
 80015be:	bf00      	nop
 80015c0:	371c      	adds	r7, #28
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	71da      	strb	r2, [r3, #7]
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80015fe:	b480      	push	{r7}
 8001600:	b085      	sub	sp, #20
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
 8001606:	460b      	mov	r3, r1
 8001608:	807b      	strh	r3, [r7, #2]
 800160a:	4613      	mov	r3, r2
 800160c:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8001612:	2300      	movs	r3, #0
 8001614:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001616:	787a      	ldrb	r2, [r7, #1]
 8001618:	887b      	ldrh	r3, [r7, #2]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001626:	887b      	ldrh	r3, [r7, #2]
 8001628:	08db      	lsrs	r3, r3, #3
 800162a:	b29b      	uxth	r3, r3
 800162c:	4618      	mov	r0, r3
 800162e:	887b      	ldrh	r3, [r7, #2]
 8001630:	08db      	lsrs	r3, r3, #3
 8001632:	b29b      	uxth	r3, r3
 8001634:	461a      	mov	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	3208      	adds	r2, #8
 800163a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800163e:	887b      	ldrh	r3, [r7, #2]
 8001640:	f003 0307 	and.w	r3, r3, #7
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	210f      	movs	r1, #15
 8001648:	fa01 f303 	lsl.w	r3, r1, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	ea02 0103 	and.w	r1, r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f100 0208 	add.w	r2, r0, #8
 8001658:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800165c:	887b      	ldrh	r3, [r7, #2]
 800165e:	08db      	lsrs	r3, r3, #3
 8001660:	b29b      	uxth	r3, r3
 8001662:	461a      	mov	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3208      	adds	r2, #8
 8001668:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	4313      	orrs	r3, r2
 8001670:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001672:	887b      	ldrh	r3, [r7, #2]
 8001674:	08db      	lsrs	r3, r3, #3
 8001676:	b29b      	uxth	r3, r3
 8001678:	461a      	mov	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	3208      	adds	r2, #8
 800167e:	68b9      	ldr	r1, [r7, #8]
 8001680:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001684:	bf00      	nop
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <cos>:
 8001690:	b500      	push	{lr}
 8001692:	ec51 0b10 	vmov	r0, r1, d0
 8001696:	4a2c      	ldr	r2, [pc, #176]	; (8001748 <cos+0xb8>)
 8001698:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800169c:	4293      	cmp	r3, r2
 800169e:	b085      	sub	sp, #20
 80016a0:	dd20      	ble.n	80016e4 <cos+0x54>
 80016a2:	4a2a      	ldr	r2, [pc, #168]	; (800174c <cos+0xbc>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	dd09      	ble.n	80016bc <cos+0x2c>
 80016a8:	ee10 2a10 	vmov	r2, s0
 80016ac:	460b      	mov	r3, r1
 80016ae:	f7fe fd6f 	bl	8000190 <__aeabi_dsub>
 80016b2:	ec41 0b10 	vmov	d0, r0, r1
 80016b6:	b005      	add	sp, #20
 80016b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80016bc:	4668      	mov	r0, sp
 80016be:	f000 f847 	bl	8001750 <__ieee754_rem_pio2>
 80016c2:	f000 0003 	and.w	r0, r0, #3
 80016c6:	2801      	cmp	r0, #1
 80016c8:	d028      	beq.n	800171c <cos+0x8c>
 80016ca:	2802      	cmp	r0, #2
 80016cc:	d015      	beq.n	80016fa <cos+0x6a>
 80016ce:	b360      	cbz	r0, 800172a <cos+0x9a>
 80016d0:	2001      	movs	r0, #1
 80016d2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80016d6:	ed9d 0b00 	vldr	d0, [sp]
 80016da:	f000 ffdd 	bl	8002698 <__kernel_sin>
 80016de:	ec51 0b10 	vmov	r0, r1, d0
 80016e2:	e7e6      	b.n	80016b2 <cos+0x22>
 80016e4:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8001740 <cos+0xb0>
 80016e8:	f000 fa5a 	bl	8001ba0 <__kernel_cos>
 80016ec:	ec51 0b10 	vmov	r0, r1, d0
 80016f0:	ec41 0b10 	vmov	d0, r0, r1
 80016f4:	b005      	add	sp, #20
 80016f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80016fa:	ed9d 1b02 	vldr	d1, [sp, #8]
 80016fe:	ed9d 0b00 	vldr	d0, [sp]
 8001702:	f000 fa4d 	bl	8001ba0 <__kernel_cos>
 8001706:	ec53 2b10 	vmov	r2, r3, d0
 800170a:	ee10 0a10 	vmov	r0, s0
 800170e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8001712:	ec41 0b10 	vmov	d0, r0, r1
 8001716:	b005      	add	sp, #20
 8001718:	f85d fb04 	ldr.w	pc, [sp], #4
 800171c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8001720:	ed9d 0b00 	vldr	d0, [sp]
 8001724:	f000 ffb8 	bl	8002698 <__kernel_sin>
 8001728:	e7ed      	b.n	8001706 <cos+0x76>
 800172a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800172e:	ed9d 0b00 	vldr	d0, [sp]
 8001732:	f000 fa35 	bl	8001ba0 <__kernel_cos>
 8001736:	ec51 0b10 	vmov	r0, r1, d0
 800173a:	e7ba      	b.n	80016b2 <cos+0x22>
 800173c:	f3af 8000 	nop.w
	...
 8001748:	3fe921fb 	.word	0x3fe921fb
 800174c:	7fefffff 	.word	0x7fefffff

08001750 <__ieee754_rem_pio2>:
 8001750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001754:	ec53 2b10 	vmov	r2, r3, d0
 8001758:	499d      	ldr	r1, [pc, #628]	; (80019d0 <__ieee754_rem_pio2+0x280>)
 800175a:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 800175e:	428f      	cmp	r7, r1
 8001760:	b090      	sub	sp, #64	; 0x40
 8001762:	f340 8091 	ble.w	8001888 <__ieee754_rem_pio2+0x138>
 8001766:	499b      	ldr	r1, [pc, #620]	; (80019d4 <__ieee754_rem_pio2+0x284>)
 8001768:	428f      	cmp	r7, r1
 800176a:	461c      	mov	r4, r3
 800176c:	4682      	mov	sl, r0
 800176e:	dc29      	bgt.n	80017c4 <__ieee754_rem_pio2+0x74>
 8001770:	2c00      	cmp	r4, #0
 8001772:	4619      	mov	r1, r3
 8001774:	ee10 0a10 	vmov	r0, s0
 8001778:	a38b      	add	r3, pc, #556	; (adr r3, 80019a8 <__ieee754_rem_pio2+0x258>)
 800177a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177e:	f340 81b1 	ble.w	8001ae4 <__ieee754_rem_pio2+0x394>
 8001782:	f7fe fd05 	bl	8000190 <__aeabi_dsub>
 8001786:	4b94      	ldr	r3, [pc, #592]	; (80019d8 <__ieee754_rem_pio2+0x288>)
 8001788:	429f      	cmp	r7, r3
 800178a:	4604      	mov	r4, r0
 800178c:	460d      	mov	r5, r1
 800178e:	f000 8091 	beq.w	80018b4 <__ieee754_rem_pio2+0x164>
 8001792:	a387      	add	r3, pc, #540	; (adr r3, 80019b0 <__ieee754_rem_pio2+0x260>)
 8001794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001798:	f7fe fcfa 	bl	8000190 <__aeabi_dsub>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	e9ca 2300 	strd	r2, r3, [sl]
 80017a4:	4620      	mov	r0, r4
 80017a6:	4629      	mov	r1, r5
 80017a8:	f7fe fcf2 	bl	8000190 <__aeabi_dsub>
 80017ac:	a380      	add	r3, pc, #512	; (adr r3, 80019b0 <__ieee754_rem_pio2+0x260>)
 80017ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b2:	f7fe fced 	bl	8000190 <__aeabi_dsub>
 80017b6:	2501      	movs	r5, #1
 80017b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80017bc:	4628      	mov	r0, r5
 80017be:	b010      	add	sp, #64	; 0x40
 80017c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80017c4:	4985      	ldr	r1, [pc, #532]	; (80019dc <__ieee754_rem_pio2+0x28c>)
 80017c6:	428f      	cmp	r7, r1
 80017c8:	f340 8091 	ble.w	80018ee <__ieee754_rem_pio2+0x19e>
 80017cc:	4984      	ldr	r1, [pc, #528]	; (80019e0 <__ieee754_rem_pio2+0x290>)
 80017ce:	428f      	cmp	r7, r1
 80017d0:	dc65      	bgt.n	800189e <__ieee754_rem_pio2+0x14e>
 80017d2:	153d      	asrs	r5, r7, #20
 80017d4:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80017d8:	eba7 5105 	sub.w	r1, r7, r5, lsl #20
 80017dc:	4610      	mov	r0, r2
 80017de:	4616      	mov	r6, r2
 80017e0:	460f      	mov	r7, r1
 80017e2:	f7ff f947 	bl	8000a74 <__aeabi_d2iz>
 80017e6:	f7fe fe21 	bl	800042c <__aeabi_i2d>
 80017ea:	4680      	mov	r8, r0
 80017ec:	4689      	mov	r9, r1
 80017ee:	4642      	mov	r2, r8
 80017f0:	464b      	mov	r3, r9
 80017f2:	4630      	mov	r0, r6
 80017f4:	4639      	mov	r1, r7
 80017f6:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80017fa:	f7fe fcc9 	bl	8000190 <__aeabi_dsub>
 80017fe:	2200      	movs	r2, #0
 8001800:	4b78      	ldr	r3, [pc, #480]	; (80019e4 <__ieee754_rem_pio2+0x294>)
 8001802:	f7fe fe7d 	bl	8000500 <__aeabi_dmul>
 8001806:	4689      	mov	r9, r1
 8001808:	4680      	mov	r8, r0
 800180a:	f7ff f933 	bl	8000a74 <__aeabi_d2iz>
 800180e:	f7fe fe0d 	bl	800042c <__aeabi_i2d>
 8001812:	4606      	mov	r6, r0
 8001814:	460f      	mov	r7, r1
 8001816:	4632      	mov	r2, r6
 8001818:	463b      	mov	r3, r7
 800181a:	4640      	mov	r0, r8
 800181c:	4649      	mov	r1, r9
 800181e:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
 8001822:	f7fe fcb5 	bl	8000190 <__aeabi_dsub>
 8001826:	2200      	movs	r2, #0
 8001828:	4b6e      	ldr	r3, [pc, #440]	; (80019e4 <__ieee754_rem_pio2+0x294>)
 800182a:	f7fe fe69 	bl	8000500 <__aeabi_dmul>
 800182e:	2200      	movs	r2, #0
 8001830:	2300      	movs	r3, #0
 8001832:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8001836:	f7ff f8eb 	bl	8000a10 <__aeabi_dcmpeq>
 800183a:	2800      	cmp	r0, #0
 800183c:	f000 8170 	beq.w	8001b20 <__ieee754_rem_pio2+0x3d0>
 8001840:	2300      	movs	r3, #0
 8001842:	4630      	mov	r0, r6
 8001844:	4639      	mov	r1, r7
 8001846:	2200      	movs	r2, #0
 8001848:	f7ff f8e2 	bl	8000a10 <__aeabi_dcmpeq>
 800184c:	2800      	cmp	r0, #0
 800184e:	bf14      	ite	ne
 8001850:	2301      	movne	r3, #1
 8001852:	2302      	moveq	r3, #2
 8001854:	4a64      	ldr	r2, [pc, #400]	; (80019e8 <__ieee754_rem_pio2+0x298>)
 8001856:	9201      	str	r2, [sp, #4]
 8001858:	2102      	movs	r1, #2
 800185a:	462a      	mov	r2, r5
 800185c:	9100      	str	r1, [sp, #0]
 800185e:	a80a      	add	r0, sp, #40	; 0x28
 8001860:	4651      	mov	r1, sl
 8001862:	f000 fae1 	bl	8001e28 <__kernel_rem_pio2>
 8001866:	2c00      	cmp	r4, #0
 8001868:	4605      	mov	r5, r0
 800186a:	da14      	bge.n	8001896 <__ieee754_rem_pio2+0x146>
 800186c:	f8da 2004 	ldr.w	r2, [sl, #4]
 8001870:	f8da 300c 	ldr.w	r3, [sl, #12]
 8001874:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8001878:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800187c:	4245      	negs	r5, r0
 800187e:	f8ca 2004 	str.w	r2, [sl, #4]
 8001882:	f8ca 300c 	str.w	r3, [sl, #12]
 8001886:	e006      	b.n	8001896 <__ieee754_rem_pio2+0x146>
 8001888:	ed80 0b00 	vstr	d0, [r0]
 800188c:	2500      	movs	r5, #0
 800188e:	2400      	movs	r4, #0
 8001890:	e9c0 4502 	strd	r4, r5, [r0, #8]
 8001894:	2500      	movs	r5, #0
 8001896:	4628      	mov	r0, r5
 8001898:	b010      	add	sp, #64	; 0x40
 800189a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800189e:	ee10 0a10 	vmov	r0, s0
 80018a2:	4619      	mov	r1, r3
 80018a4:	f7fe fc74 	bl	8000190 <__aeabi_dsub>
 80018a8:	2500      	movs	r5, #0
 80018aa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80018ae:	e9ca 0100 	strd	r0, r1, [sl]
 80018b2:	e7f0      	b.n	8001896 <__ieee754_rem_pio2+0x146>
 80018b4:	a340      	add	r3, pc, #256	; (adr r3, 80019b8 <__ieee754_rem_pio2+0x268>)
 80018b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ba:	f7fe fc69 	bl	8000190 <__aeabi_dsub>
 80018be:	a340      	add	r3, pc, #256	; (adr r3, 80019c0 <__ieee754_rem_pio2+0x270>)
 80018c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c4:	460d      	mov	r5, r1
 80018c6:	4604      	mov	r4, r0
 80018c8:	f7fe fc62 	bl	8000190 <__aeabi_dsub>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	e9ca 2300 	strd	r2, r3, [sl]
 80018d4:	4629      	mov	r1, r5
 80018d6:	4620      	mov	r0, r4
 80018d8:	f7fe fc5a 	bl	8000190 <__aeabi_dsub>
 80018dc:	a338      	add	r3, pc, #224	; (adr r3, 80019c0 <__ieee754_rem_pio2+0x270>)
 80018de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e2:	f7fe fc55 	bl	8000190 <__aeabi_dsub>
 80018e6:	2501      	movs	r5, #1
 80018e8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80018ec:	e7d3      	b.n	8001896 <__ieee754_rem_pio2+0x146>
 80018ee:	f000 ff9d 	bl	800282c <fabs>
 80018f2:	ec59 8b10 	vmov	r8, r9, d0
 80018f6:	ee10 0a10 	vmov	r0, s0
 80018fa:	a333      	add	r3, pc, #204	; (adr r3, 80019c8 <__ieee754_rem_pio2+0x278>)
 80018fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001900:	4649      	mov	r1, r9
 8001902:	f7fe fdfd 	bl	8000500 <__aeabi_dmul>
 8001906:	2200      	movs	r2, #0
 8001908:	4b38      	ldr	r3, [pc, #224]	; (80019ec <__ieee754_rem_pio2+0x29c>)
 800190a:	f7fe fc43 	bl	8000194 <__adddf3>
 800190e:	f7ff f8b1 	bl	8000a74 <__aeabi_d2iz>
 8001912:	4605      	mov	r5, r0
 8001914:	f7fe fd8a 	bl	800042c <__aeabi_i2d>
 8001918:	a323      	add	r3, pc, #140	; (adr r3, 80019a8 <__ieee754_rem_pio2+0x258>)
 800191a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8001922:	f7fe fded 	bl	8000500 <__aeabi_dmul>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	4640      	mov	r0, r8
 800192c:	4649      	mov	r1, r9
 800192e:	f7fe fc2f 	bl	8000190 <__aeabi_dsub>
 8001932:	a31f      	add	r3, pc, #124	; (adr r3, 80019b0 <__ieee754_rem_pio2+0x260>)
 8001934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001938:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800193c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001940:	f7fe fdde 	bl	8000500 <__aeabi_dmul>
 8001944:	2d1f      	cmp	r5, #31
 8001946:	4680      	mov	r8, r0
 8001948:	4689      	mov	r9, r1
 800194a:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800194e:	dc51      	bgt.n	80019f4 <__ieee754_rem_pio2+0x2a4>
 8001950:	4b27      	ldr	r3, [pc, #156]	; (80019f0 <__ieee754_rem_pio2+0x2a0>)
 8001952:	1e6a      	subs	r2, r5, #1
 8001954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001958:	429f      	cmp	r7, r3
 800195a:	d04b      	beq.n	80019f4 <__ieee754_rem_pio2+0x2a4>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001964:	f7fe fc14 	bl	8000190 <__aeabi_dsub>
 8001968:	4680      	mov	r8, r0
 800196a:	4689      	mov	r9, r1
 800196c:	e9ca 8900 	strd	r8, r9, [sl]
 8001970:	4642      	mov	r2, r8
 8001972:	464b      	mov	r3, r9
 8001974:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001978:	f7fe fc0a 	bl	8000190 <__aeabi_dsub>
 800197c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001980:	f7fe fc06 	bl	8000190 <__aeabi_dsub>
 8001984:	2c00      	cmp	r4, #0
 8001986:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800198a:	da84      	bge.n	8001896 <__ieee754_rem_pio2+0x146>
 800198c:	f109 4400 	add.w	r4, r9, #2147483648	; 0x80000000
 8001990:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8001994:	426d      	negs	r5, r5
 8001996:	f8ca 8000 	str.w	r8, [sl]
 800199a:	f8ca 4004 	str.w	r4, [sl, #4]
 800199e:	f8ca 0008 	str.w	r0, [sl, #8]
 80019a2:	f8ca 300c 	str.w	r3, [sl, #12]
 80019a6:	e776      	b.n	8001896 <__ieee754_rem_pio2+0x146>
 80019a8:	54400000 	.word	0x54400000
 80019ac:	3ff921fb 	.word	0x3ff921fb
 80019b0:	1a626331 	.word	0x1a626331
 80019b4:	3dd0b461 	.word	0x3dd0b461
 80019b8:	1a600000 	.word	0x1a600000
 80019bc:	3dd0b461 	.word	0x3dd0b461
 80019c0:	2e037073 	.word	0x2e037073
 80019c4:	3ba3198a 	.word	0x3ba3198a
 80019c8:	6dc9c883 	.word	0x6dc9c883
 80019cc:	3fe45f30 	.word	0x3fe45f30
 80019d0:	3fe921fb 	.word	0x3fe921fb
 80019d4:	4002d97b 	.word	0x4002d97b
 80019d8:	3ff921fb 	.word	0x3ff921fb
 80019dc:	413921fb 	.word	0x413921fb
 80019e0:	7fefffff 	.word	0x7fefffff
 80019e4:	41700000 	.word	0x41700000
 80019e8:	08002b08 	.word	0x08002b08
 80019ec:	3fe00000 	.word	0x3fe00000
 80019f0:	08002a88 	.word	0x08002a88
 80019f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80019f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80019fc:	f7fe fbc8 	bl	8000190 <__aeabi_dsub>
 8001a00:	153f      	asrs	r7, r7, #20
 8001a02:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8001a06:	1afb      	subs	r3, r7, r3
 8001a08:	4680      	mov	r8, r0
 8001a0a:	4689      	mov	r9, r1
 8001a0c:	2b10      	cmp	r3, #16
 8001a0e:	e9ca 8900 	strd	r8, r9, [sl]
 8001a12:	ddad      	ble.n	8001970 <__ieee754_rem_pio2+0x220>
 8001a14:	a358      	add	r3, pc, #352	; (adr r3, 8001b78 <__ieee754_rem_pio2+0x428>)
 8001a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001a1e:	f7fe fd6f 	bl	8000500 <__aeabi_dmul>
 8001a22:	4680      	mov	r8, r0
 8001a24:	4689      	mov	r9, r1
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001a2e:	f7fe fbaf 	bl	8000190 <__aeabi_dsub>
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001a3a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001a3e:	f7fe fba7 	bl	8000190 <__aeabi_dsub>
 8001a42:	4642      	mov	r2, r8
 8001a44:	464b      	mov	r3, r9
 8001a46:	f7fe fba3 	bl	8000190 <__aeabi_dsub>
 8001a4a:	a34d      	add	r3, pc, #308	; (adr r3, 8001b80 <__ieee754_rem_pio2+0x430>)
 8001a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a50:	4680      	mov	r8, r0
 8001a52:	4689      	mov	r9, r1
 8001a54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001a58:	f7fe fd52 	bl	8000500 <__aeabi_dmul>
 8001a5c:	4642      	mov	r2, r8
 8001a5e:	464b      	mov	r3, r9
 8001a60:	f7fe fb96 	bl	8000190 <__aeabi_dsub>
 8001a64:	460b      	mov	r3, r1
 8001a66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8001a70:	f7fe fb8e 	bl	8000190 <__aeabi_dsub>
 8001a74:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8001a78:	1aff      	subs	r7, r7, r3
 8001a7a:	4680      	mov	r8, r0
 8001a7c:	4689      	mov	r9, r1
 8001a7e:	2f31      	cmp	r7, #49	; 0x31
 8001a80:	e9ca 8900 	strd	r8, r9, [sl]
 8001a84:	dd6c      	ble.n	8001b60 <__ieee754_rem_pio2+0x410>
 8001a86:	a341      	add	r3, pc, #260	; (adr r3, 8001b8c <__ieee754_rem_pio2+0x43c>)
 8001a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001a90:	f7fe fd36 	bl	8000500 <__aeabi_dmul>
 8001a94:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8001a98:	4606      	mov	r6, r0
 8001a9a:	460f      	mov	r7, r1
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4640      	mov	r0, r8
 8001aa2:	4649      	mov	r1, r9
 8001aa4:	f7fe fb74 	bl	8000190 <__aeabi_dsub>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	4640      	mov	r0, r8
 8001aae:	4649      	mov	r1, r9
 8001ab0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001ab4:	f7fe fb6c 	bl	8000190 <__aeabi_dsub>
 8001ab8:	4632      	mov	r2, r6
 8001aba:	463b      	mov	r3, r7
 8001abc:	f7fe fb68 	bl	8000190 <__aeabi_dsub>
 8001ac0:	a334      	add	r3, pc, #208	; (adr r3, 8001b94 <__ieee754_rem_pio2+0x444>)
 8001ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac6:	4606      	mov	r6, r0
 8001ac8:	460f      	mov	r7, r1
 8001aca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001ace:	f7fe fd17 	bl	8000500 <__aeabi_dmul>
 8001ad2:	4632      	mov	r2, r6
 8001ad4:	463b      	mov	r3, r7
 8001ad6:	f7fe fb5b 	bl	8000190 <__aeabi_dsub>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001ae2:	e73d      	b.n	8001960 <__ieee754_rem_pio2+0x210>
 8001ae4:	f7fe fb56 	bl	8000194 <__adddf3>
 8001ae8:	4b27      	ldr	r3, [pc, #156]	; (8001b88 <__ieee754_rem_pio2+0x438>)
 8001aea:	429f      	cmp	r7, r3
 8001aec:	4604      	mov	r4, r0
 8001aee:	460d      	mov	r5, r1
 8001af0:	d018      	beq.n	8001b24 <__ieee754_rem_pio2+0x3d4>
 8001af2:	a31f      	add	r3, pc, #124	; (adr r3, 8001b70 <__ieee754_rem_pio2+0x420>)
 8001af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af8:	f7fe fb4c 	bl	8000194 <__adddf3>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	e9ca 2300 	strd	r2, r3, [sl]
 8001b04:	4629      	mov	r1, r5
 8001b06:	4620      	mov	r0, r4
 8001b08:	f7fe fb42 	bl	8000190 <__aeabi_dsub>
 8001b0c:	a318      	add	r3, pc, #96	; (adr r3, 8001b70 <__ieee754_rem_pio2+0x420>)
 8001b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b12:	f7fe fb3f 	bl	8000194 <__adddf3>
 8001b16:	f04f 35ff 	mov.w	r5, #4294967295
 8001b1a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8001b1e:	e6ba      	b.n	8001896 <__ieee754_rem_pio2+0x146>
 8001b20:	2303      	movs	r3, #3
 8001b22:	e697      	b.n	8001854 <__ieee754_rem_pio2+0x104>
 8001b24:	a314      	add	r3, pc, #80	; (adr r3, 8001b78 <__ieee754_rem_pio2+0x428>)
 8001b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2a:	f7fe fb33 	bl	8000194 <__adddf3>
 8001b2e:	a314      	add	r3, pc, #80	; (adr r3, 8001b80 <__ieee754_rem_pio2+0x430>)
 8001b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b34:	460d      	mov	r5, r1
 8001b36:	4604      	mov	r4, r0
 8001b38:	f7fe fb2c 	bl	8000194 <__adddf3>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	e9ca 2300 	strd	r2, r3, [sl]
 8001b44:	4629      	mov	r1, r5
 8001b46:	4620      	mov	r0, r4
 8001b48:	f7fe fb22 	bl	8000190 <__aeabi_dsub>
 8001b4c:	a30c      	add	r3, pc, #48	; (adr r3, 8001b80 <__ieee754_rem_pio2+0x430>)
 8001b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b52:	f7fe fb1f 	bl	8000194 <__adddf3>
 8001b56:	f04f 35ff 	mov.w	r5, #4294967295
 8001b5a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8001b5e:	e69a      	b.n	8001896 <__ieee754_rem_pio2+0x146>
 8001b60:	ed9d 7b08 	vldr	d7, [sp, #32]
 8001b64:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001b68:	e702      	b.n	8001970 <__ieee754_rem_pio2+0x220>
 8001b6a:	bf00      	nop
 8001b6c:	f3af 8000 	nop.w
 8001b70:	1a626331 	.word	0x1a626331
 8001b74:	3dd0b461 	.word	0x3dd0b461
 8001b78:	1a600000 	.word	0x1a600000
 8001b7c:	3dd0b461 	.word	0x3dd0b461
 8001b80:	2e037073 	.word	0x2e037073
 8001b84:	3ba3198a 	.word	0x3ba3198a
 8001b88:	3ff921fb 	.word	0x3ff921fb
 8001b8c:	2e000000 	.word	0x2e000000
 8001b90:	3ba3198a 	.word	0x3ba3198a
 8001b94:	252049c1 	.word	0x252049c1
 8001b98:	397b839a 	.word	0x397b839a
 8001b9c:	00000000 	.word	0x00000000

08001ba0 <__kernel_cos>:
 8001ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ba4:	ec57 6b10 	vmov	r6, r7, d0
 8001ba8:	ed2d 8b02 	vpush	{d8}
 8001bac:	eeb0 8a41 	vmov.f32	s16, s2
 8001bb0:	eef0 8a61 	vmov.f32	s17, s3
 8001bb4:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
 8001bb8:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
 8001bbc:	b083      	sub	sp, #12
 8001bbe:	da72      	bge.n	8001ca6 <__kernel_cos+0x106>
 8001bc0:	ee10 0a10 	vmov	r0, s0
 8001bc4:	4639      	mov	r1, r7
 8001bc6:	f7fe ff55 	bl	8000a74 <__aeabi_d2iz>
 8001bca:	2800      	cmp	r0, #0
 8001bcc:	f000 80f6 	beq.w	8001dbc <__kernel_cos+0x21c>
 8001bd0:	4632      	mov	r2, r6
 8001bd2:	463b      	mov	r3, r7
 8001bd4:	4630      	mov	r0, r6
 8001bd6:	4639      	mov	r1, r7
 8001bd8:	f7fe fc92 	bl	8000500 <__aeabi_dmul>
 8001bdc:	a37c      	add	r3, pc, #496	; (adr r3, 8001dd0 <__kernel_cos+0x230>)
 8001bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be2:	4604      	mov	r4, r0
 8001be4:	460d      	mov	r5, r1
 8001be6:	f7fe fc8b 	bl	8000500 <__aeabi_dmul>
 8001bea:	a37b      	add	r3, pc, #492	; (adr r3, 8001dd8 <__kernel_cos+0x238>)
 8001bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf0:	f7fe fad0 	bl	8000194 <__adddf3>
 8001bf4:	4622      	mov	r2, r4
 8001bf6:	462b      	mov	r3, r5
 8001bf8:	f7fe fc82 	bl	8000500 <__aeabi_dmul>
 8001bfc:	a378      	add	r3, pc, #480	; (adr r3, 8001de0 <__kernel_cos+0x240>)
 8001bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c02:	f7fe fac5 	bl	8000190 <__aeabi_dsub>
 8001c06:	4622      	mov	r2, r4
 8001c08:	462b      	mov	r3, r5
 8001c0a:	f7fe fc79 	bl	8000500 <__aeabi_dmul>
 8001c0e:	a376      	add	r3, pc, #472	; (adr r3, 8001de8 <__kernel_cos+0x248>)
 8001c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c14:	f7fe fabe 	bl	8000194 <__adddf3>
 8001c18:	4622      	mov	r2, r4
 8001c1a:	462b      	mov	r3, r5
 8001c1c:	f7fe fc70 	bl	8000500 <__aeabi_dmul>
 8001c20:	a373      	add	r3, pc, #460	; (adr r3, 8001df0 <__kernel_cos+0x250>)
 8001c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c26:	f7fe fab3 	bl	8000190 <__aeabi_dsub>
 8001c2a:	4622      	mov	r2, r4
 8001c2c:	462b      	mov	r3, r5
 8001c2e:	f7fe fc67 	bl	8000500 <__aeabi_dmul>
 8001c32:	a371      	add	r3, pc, #452	; (adr r3, 8001df8 <__kernel_cos+0x258>)
 8001c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c38:	f7fe faac 	bl	8000194 <__adddf3>
 8001c3c:	4622      	mov	r2, r4
 8001c3e:	462b      	mov	r3, r5
 8001c40:	f7fe fc5e 	bl	8000500 <__aeabi_dmul>
 8001c44:	4682      	mov	sl, r0
 8001c46:	468b      	mov	fp, r1
 8001c48:	2200      	movs	r2, #0
 8001c4a:	4b71      	ldr	r3, [pc, #452]	; (8001e10 <__kernel_cos+0x270>)
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	4629      	mov	r1, r5
 8001c50:	f7fe fc56 	bl	8000500 <__aeabi_dmul>
 8001c54:	4652      	mov	r2, sl
 8001c56:	4680      	mov	r8, r0
 8001c58:	4689      	mov	r9, r1
 8001c5a:	465b      	mov	r3, fp
 8001c5c:	4620      	mov	r0, r4
 8001c5e:	4629      	mov	r1, r5
 8001c60:	f7fe fc4e 	bl	8000500 <__aeabi_dmul>
 8001c64:	ec53 2b18 	vmov	r2, r3, d8
 8001c68:	4604      	mov	r4, r0
 8001c6a:	460d      	mov	r5, r1
 8001c6c:	4630      	mov	r0, r6
 8001c6e:	4639      	mov	r1, r7
 8001c70:	f7fe fc46 	bl	8000500 <__aeabi_dmul>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	4620      	mov	r0, r4
 8001c7a:	4629      	mov	r1, r5
 8001c7c:	f7fe fa88 	bl	8000190 <__aeabi_dsub>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4640      	mov	r0, r8
 8001c86:	4649      	mov	r1, r9
 8001c88:	f7fe fa82 	bl	8000190 <__aeabi_dsub>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	2000      	movs	r0, #0
 8001c92:	4960      	ldr	r1, [pc, #384]	; (8001e14 <__kernel_cos+0x274>)
 8001c94:	f7fe fa7c 	bl	8000190 <__aeabi_dsub>
 8001c98:	ec41 0b10 	vmov	d0, r0, r1
 8001c9c:	b003      	add	sp, #12
 8001c9e:	ecbd 8b02 	vpop	{d8}
 8001ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ca6:	ee10 2a10 	vmov	r2, s0
 8001caa:	ee10 0a10 	vmov	r0, s0
 8001cae:	463b      	mov	r3, r7
 8001cb0:	4639      	mov	r1, r7
 8001cb2:	f7fe fc25 	bl	8000500 <__aeabi_dmul>
 8001cb6:	a346      	add	r3, pc, #280	; (adr r3, 8001dd0 <__kernel_cos+0x230>)
 8001cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cbc:	4604      	mov	r4, r0
 8001cbe:	460d      	mov	r5, r1
 8001cc0:	f7fe fc1e 	bl	8000500 <__aeabi_dmul>
 8001cc4:	a344      	add	r3, pc, #272	; (adr r3, 8001dd8 <__kernel_cos+0x238>)
 8001cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cca:	f7fe fa63 	bl	8000194 <__adddf3>
 8001cce:	4622      	mov	r2, r4
 8001cd0:	462b      	mov	r3, r5
 8001cd2:	f7fe fc15 	bl	8000500 <__aeabi_dmul>
 8001cd6:	a342      	add	r3, pc, #264	; (adr r3, 8001de0 <__kernel_cos+0x240>)
 8001cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cdc:	f7fe fa58 	bl	8000190 <__aeabi_dsub>
 8001ce0:	4622      	mov	r2, r4
 8001ce2:	462b      	mov	r3, r5
 8001ce4:	f7fe fc0c 	bl	8000500 <__aeabi_dmul>
 8001ce8:	a33f      	add	r3, pc, #252	; (adr r3, 8001de8 <__kernel_cos+0x248>)
 8001cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cee:	f7fe fa51 	bl	8000194 <__adddf3>
 8001cf2:	4622      	mov	r2, r4
 8001cf4:	462b      	mov	r3, r5
 8001cf6:	f7fe fc03 	bl	8000500 <__aeabi_dmul>
 8001cfa:	a33d      	add	r3, pc, #244	; (adr r3, 8001df0 <__kernel_cos+0x250>)
 8001cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d00:	f7fe fa46 	bl	8000190 <__aeabi_dsub>
 8001d04:	4622      	mov	r2, r4
 8001d06:	462b      	mov	r3, r5
 8001d08:	f7fe fbfa 	bl	8000500 <__aeabi_dmul>
 8001d0c:	a33a      	add	r3, pc, #232	; (adr r3, 8001df8 <__kernel_cos+0x258>)
 8001d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d12:	f7fe fa3f 	bl	8000194 <__adddf3>
 8001d16:	462b      	mov	r3, r5
 8001d18:	4622      	mov	r2, r4
 8001d1a:	f7fe fbf1 	bl	8000500 <__aeabi_dmul>
 8001d1e:	4b3e      	ldr	r3, [pc, #248]	; (8001e18 <__kernel_cos+0x278>)
 8001d20:	4599      	cmp	r9, r3
 8001d22:	4682      	mov	sl, r0
 8001d24:	468b      	mov	fp, r1
 8001d26:	dd8f      	ble.n	8001c48 <__kernel_cos+0xa8>
 8001d28:	4b3c      	ldr	r3, [pc, #240]	; (8001e1c <__kernel_cos+0x27c>)
 8001d2a:	4599      	cmp	r9, r3
 8001d2c:	dc3d      	bgt.n	8001daa <__kernel_cos+0x20a>
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
 8001d34:	2000      	movs	r0, #0
 8001d36:	4937      	ldr	r1, [pc, #220]	; (8001e14 <__kernel_cos+0x274>)
 8001d38:	4690      	mov	r8, r2
 8001d3a:	4699      	mov	r9, r3
 8001d3c:	f7fe fa28 	bl	8000190 <__aeabi_dsub>
 8001d40:	e9cd 0100 	strd	r0, r1, [sp]
 8001d44:	2200      	movs	r2, #0
 8001d46:	4b32      	ldr	r3, [pc, #200]	; (8001e10 <__kernel_cos+0x270>)
 8001d48:	4620      	mov	r0, r4
 8001d4a:	4629      	mov	r1, r5
 8001d4c:	f7fe fbd8 	bl	8000500 <__aeabi_dmul>
 8001d50:	4642      	mov	r2, r8
 8001d52:	464b      	mov	r3, r9
 8001d54:	f7fe fa1c 	bl	8000190 <__aeabi_dsub>
 8001d58:	4652      	mov	r2, sl
 8001d5a:	4680      	mov	r8, r0
 8001d5c:	4689      	mov	r9, r1
 8001d5e:	465b      	mov	r3, fp
 8001d60:	4620      	mov	r0, r4
 8001d62:	4629      	mov	r1, r5
 8001d64:	f7fe fbcc 	bl	8000500 <__aeabi_dmul>
 8001d68:	ec53 2b18 	vmov	r2, r3, d8
 8001d6c:	4604      	mov	r4, r0
 8001d6e:	460d      	mov	r5, r1
 8001d70:	4630      	mov	r0, r6
 8001d72:	4639      	mov	r1, r7
 8001d74:	f7fe fbc4 	bl	8000500 <__aeabi_dmul>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	4620      	mov	r0, r4
 8001d7e:	4629      	mov	r1, r5
 8001d80:	f7fe fa06 	bl	8000190 <__aeabi_dsub>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4640      	mov	r0, r8
 8001d8a:	4649      	mov	r1, r9
 8001d8c:	f7fe fa00 	bl	8000190 <__aeabi_dsub>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001d98:	f7fe f9fa 	bl	8000190 <__aeabi_dsub>
 8001d9c:	ec41 0b10 	vmov	d0, r0, r1
 8001da0:	b003      	add	sp, #12
 8001da2:	ecbd 8b02 	vpop	{d8}
 8001da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001daa:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8001e00 <__kernel_cos+0x260>
 8001dae:	f04f 0800 	mov.w	r8, #0
 8001db2:	ed8d 7b00 	vstr	d7, [sp]
 8001db6:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8001e20 <__kernel_cos+0x280>
 8001dba:	e7c3      	b.n	8001d44 <__kernel_cos+0x1a4>
 8001dbc:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8001e08 <__kernel_cos+0x268>
 8001dc0:	b003      	add	sp, #12
 8001dc2:	ecbd 8b02 	vpop	{d8}
 8001dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001dca:	bf00      	nop
 8001dcc:	f3af 8000 	nop.w
 8001dd0:	be8838d4 	.word	0xbe8838d4
 8001dd4:	bda8fae9 	.word	0xbda8fae9
 8001dd8:	bdb4b1c4 	.word	0xbdb4b1c4
 8001ddc:	3e21ee9e 	.word	0x3e21ee9e
 8001de0:	809c52ad 	.word	0x809c52ad
 8001de4:	3e927e4f 	.word	0x3e927e4f
 8001de8:	19cb1590 	.word	0x19cb1590
 8001dec:	3efa01a0 	.word	0x3efa01a0
 8001df0:	16c15177 	.word	0x16c15177
 8001df4:	3f56c16c 	.word	0x3f56c16c
 8001df8:	5555554c 	.word	0x5555554c
 8001dfc:	3fa55555 	.word	0x3fa55555
 8001e00:	00000000 	.word	0x00000000
 8001e04:	3fe70000 	.word	0x3fe70000
 8001e08:	00000000 	.word	0x00000000
 8001e0c:	3ff00000 	.word	0x3ff00000
 8001e10:	3fe00000 	.word	0x3fe00000
 8001e14:	3ff00000 	.word	0x3ff00000
 8001e18:	3fd33332 	.word	0x3fd33332
 8001e1c:	3fe90000 	.word	0x3fe90000
 8001e20:	3fd20000 	.word	0x3fd20000
 8001e24:	00000000 	.word	0x00000000

08001e28 <__kernel_rem_pio2>:
 8001e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e2c:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8001e30:	4ca3      	ldr	r4, [pc, #652]	; (80020c0 <__kernel_rem_pio2+0x298>)
 8001e32:	9ea4      	ldr	r6, [sp, #656]	; 0x290
 8001e34:	4da3      	ldr	r5, [pc, #652]	; (80020c4 <__kernel_rem_pio2+0x29c>)
 8001e36:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
 8001e3a:	9407      	str	r4, [sp, #28]
 8001e3c:	4626      	mov	r6, r4
 8001e3e:	1ed4      	subs	r4, r2, #3
 8001e40:	fb85 7504 	smull	r7, r5, r5, r4
 8001e44:	17e4      	asrs	r4, r4, #31
 8001e46:	ebc4 04a5 	rsb	r4, r4, r5, asr #2
 8001e4a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8001e4e:	461d      	mov	r5, r3
 8001e50:	930a      	str	r3, [sp, #40]	; 0x28
 8001e52:	1c63      	adds	r3, r4, #1
 8001e54:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 8001e58:	3d01      	subs	r5, #1
 8001e5a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8001e5e:	9306      	str	r3, [sp, #24]
 8001e60:	462b      	mov	r3, r5
 8001e62:	940b      	str	r4, [sp, #44]	; 0x2c
 8001e64:	9503      	str	r5, [sp, #12]
 8001e66:	1b65      	subs	r5, r4, r5
 8001e68:	18f4      	adds	r4, r6, r3
 8001e6a:	9004      	str	r0, [sp, #16]
 8001e6c:	9108      	str	r1, [sp, #32]
 8001e6e:	d41a      	bmi.n	8001ea6 <__kernel_rem_pio2+0x7e>
 8001e70:	442c      	add	r4, r5
 8001e72:	2600      	movs	r6, #0
 8001e74:	2700      	movs	r7, #0
 8001e76:	3401      	adds	r4, #1
 8001e78:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8001e7c:	f8dd 9294 	ldr.w	r9, [sp, #660]	; 0x294
 8001e80:	e008      	b.n	8001e94 <__kernel_rem_pio2+0x6c>
 8001e82:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8001e86:	f7fe fad1 	bl	800042c <__aeabi_i2d>
 8001e8a:	3501      	adds	r5, #1
 8001e8c:	42a5      	cmp	r5, r4
 8001e8e:	e8e8 0102 	strd	r0, r1, [r8], #8
 8001e92:	d008      	beq.n	8001ea6 <__kernel_rem_pio2+0x7e>
 8001e94:	2d00      	cmp	r5, #0
 8001e96:	daf4      	bge.n	8001e82 <__kernel_rem_pio2+0x5a>
 8001e98:	3501      	adds	r5, #1
 8001e9a:	4630      	mov	r0, r6
 8001e9c:	4639      	mov	r1, r7
 8001e9e:	42a5      	cmp	r5, r4
 8001ea0:	e8e8 0102 	strd	r0, r1, [r8], #8
 8001ea4:	d1f6      	bne.n	8001e94 <__kernel_rem_pio2+0x6c>
 8001ea6:	9b07      	ldr	r3, [sp, #28]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f2c0 83eb 	blt.w	8002684 <__kernel_rem_pio2+0x85c>
 8001eae:	9b07      	ldr	r3, [sp, #28]
 8001eb0:	f103 0b01 	add.w	fp, r3, #1
 8001eb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001eb6:	a922      	add	r1, sp, #136	; 0x88
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	461a      	mov	r2, r3
 8001ebc:	eb01 0903 	add.w	r9, r1, r3
 8001ec0:	9300      	str	r3, [sp, #0]
 8001ec2:	9b04      	ldr	r3, [sp, #16]
 8001ec4:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
 8001ec8:	4619      	mov	r1, r3
 8001eca:	eb0a 0bcb 	add.w	fp, sl, fp, lsl #3
 8001ece:	eb01 0802 	add.w	r8, r1, r2
 8001ed2:	9b03      	ldr	r3, [sp, #12]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f2c0 8301 	blt.w	80024dc <__kernel_rem_pio2+0x6b4>
 8001eda:	9c04      	ldr	r4, [sp, #16]
 8001edc:	464d      	mov	r5, r9
 8001ede:	2600      	movs	r6, #0
 8001ee0:	2700      	movs	r7, #0
 8001ee2:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8001ee6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8001eea:	f7fe fb09 	bl	8000500 <__aeabi_dmul>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	4630      	mov	r0, r6
 8001ef4:	4639      	mov	r1, r7
 8001ef6:	f7fe f94d 	bl	8000194 <__adddf3>
 8001efa:	4544      	cmp	r4, r8
 8001efc:	4606      	mov	r6, r0
 8001efe:	460f      	mov	r7, r1
 8001f00:	d1ef      	bne.n	8001ee2 <__kernel_rem_pio2+0xba>
 8001f02:	e8ea 6702 	strd	r6, r7, [sl], #8
 8001f06:	45da      	cmp	sl, fp
 8001f08:	f109 0908 	add.w	r9, r9, #8
 8001f0c:	d1e1      	bne.n	8001ed2 <__kernel_rem_pio2+0xaa>
 8001f0e:	9907      	ldr	r1, [sp, #28]
 8001f10:	9800      	ldr	r0, [sp, #0]
 8001f12:	9c04      	ldr	r4, [sp, #16]
 8001f14:	9100      	str	r1, [sp, #0]
 8001f16:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4420      	add	r0, r4
 8001f20:	1f1a      	subs	r2, r3, #4
 8001f22:	4683      	mov	fp, r0
 8001f24:	a80e      	add	r0, sp, #56	; 0x38
 8001f26:	4402      	add	r2, r0
 8001f28:	4403      	add	r3, r0
 8001f2a:	920c      	str	r2, [sp, #48]	; 0x30
 8001f2c:	930d      	str	r3, [sp, #52]	; 0x34
 8001f2e:	9a00      	ldr	r2, [sp, #0]
 8001f30:	a99a      	add	r1, sp, #616	; 0x268
 8001f32:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 8001f36:	2a00      	cmp	r2, #0
 8001f38:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8001f3c:	dd29      	ble.n	8001f92 <__kernel_rem_pio2+0x16a>
 8001f3e:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
 8001f42:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
 8001f46:	f10d 0934 	add.w	r9, sp, #52	; 0x34
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	4b5e      	ldr	r3, [pc, #376]	; (80020c8 <__kernel_rem_pio2+0x2a0>)
 8001f4e:	4620      	mov	r0, r4
 8001f50:	4629      	mov	r1, r5
 8001f52:	f7fe fad5 	bl	8000500 <__aeabi_dmul>
 8001f56:	f7fe fd8d 	bl	8000a74 <__aeabi_d2iz>
 8001f5a:	f7fe fa67 	bl	800042c <__aeabi_i2d>
 8001f5e:	2200      	movs	r2, #0
 8001f60:	4b5a      	ldr	r3, [pc, #360]	; (80020cc <__kernel_rem_pio2+0x2a4>)
 8001f62:	4606      	mov	r6, r0
 8001f64:	460f      	mov	r7, r1
 8001f66:	f7fe facb 	bl	8000500 <__aeabi_dmul>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	4620      	mov	r0, r4
 8001f70:	4629      	mov	r1, r5
 8001f72:	f7fe f90d 	bl	8000190 <__aeabi_dsub>
 8001f76:	f7fe fd7d 	bl	8000a74 <__aeabi_d2iz>
 8001f7a:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8001f7e:	f849 0f04 	str.w	r0, [r9, #4]!
 8001f82:	4639      	mov	r1, r7
 8001f84:	4630      	mov	r0, r6
 8001f86:	f7fe f905 	bl	8000194 <__adddf3>
 8001f8a:	45d0      	cmp	r8, sl
 8001f8c:	4604      	mov	r4, r0
 8001f8e:	460d      	mov	r5, r1
 8001f90:	d1db      	bne.n	8001f4a <__kernel_rem_pio2+0x122>
 8001f92:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8001f96:	ec45 4b10 	vmov	d0, r4, r5
 8001f9a:	4648      	mov	r0, r9
 8001f9c:	f000 fce0 	bl	8002960 <scalbn>
 8001fa0:	ec55 4b10 	vmov	r4, r5, d0
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8001faa:	ee10 0a10 	vmov	r0, s0
 8001fae:	4629      	mov	r1, r5
 8001fb0:	f7fe faa6 	bl	8000500 <__aeabi_dmul>
 8001fb4:	ec41 0b10 	vmov	d0, r0, r1
 8001fb8:	f000 fc42 	bl	8002840 <floor>
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	ec51 0b10 	vmov	r0, r1, d0
 8001fc2:	4b43      	ldr	r3, [pc, #268]	; (80020d0 <__kernel_rem_pio2+0x2a8>)
 8001fc4:	f7fe fa9c 	bl	8000500 <__aeabi_dmul>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	4620      	mov	r0, r4
 8001fce:	4629      	mov	r1, r5
 8001fd0:	f7fe f8de 	bl	8000190 <__aeabi_dsub>
 8001fd4:	460d      	mov	r5, r1
 8001fd6:	4604      	mov	r4, r0
 8001fd8:	f7fe fd4c 	bl	8000a74 <__aeabi_d2iz>
 8001fdc:	4680      	mov	r8, r0
 8001fde:	f7fe fa25 	bl	800042c <__aeabi_i2d>
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	4629      	mov	r1, r5
 8001fe8:	4620      	mov	r0, r4
 8001fea:	f7fe f8d1 	bl	8000190 <__aeabi_dsub>
 8001fee:	464b      	mov	r3, r9
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	4606      	mov	r6, r0
 8001ff4:	460f      	mov	r7, r1
 8001ff6:	f340 80fa 	ble.w	80021ee <__kernel_rem_pio2+0x3c6>
 8001ffa:	9a00      	ldr	r2, [sp, #0]
 8001ffc:	a90e      	add	r1, sp, #56	; 0x38
 8001ffe:	3a01      	subs	r2, #1
 8002000:	f1c9 0318 	rsb	r3, r9, #24
 8002004:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
 8002008:	fa45 f103 	asr.w	r1, r5, r3
 800200c:	fa01 f303 	lsl.w	r3, r1, r3
 8002010:	a80e      	add	r0, sp, #56	; 0x38
 8002012:	1aeb      	subs	r3, r5, r3
 8002014:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8002018:	f1c9 0517 	rsb	r5, r9, #23
 800201c:	4488      	add	r8, r1
 800201e:	fa43 f505 	asr.w	r5, r3, r5
 8002022:	2d00      	cmp	r5, #0
 8002024:	dd6e      	ble.n	8002104 <__kernel_rem_pio2+0x2dc>
 8002026:	9b00      	ldr	r3, [sp, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	f108 0801 	add.w	r8, r8, #1
 800202e:	f340 8274 	ble.w	800251a <__kernel_rem_pio2+0x6f2>
 8002032:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8002034:	2c00      	cmp	r4, #0
 8002036:	f040 831b 	bne.w	8002670 <__kernel_rem_pio2+0x848>
 800203a:	9b00      	ldr	r3, [sp, #0]
 800203c:	2b01      	cmp	r3, #1
 800203e:	f340 8294 	ble.w	800256a <__kernel_rem_pio2+0x742>
 8002042:	aa0e      	add	r2, sp, #56	; 0x38
 8002044:	2301      	movs	r3, #1
 8002046:	f852 4f04 	ldr.w	r4, [r2, #4]!
 800204a:	2c00      	cmp	r4, #0
 800204c:	f000 8288 	beq.w	8002560 <__kernel_rem_pio2+0x738>
 8002050:	1c58      	adds	r0, r3, #1
 8002052:	aa0e      	add	r2, sp, #56	; 0x38
 8002054:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
 8002058:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 800205c:	9a00      	ldr	r2, [sp, #0]
 800205e:	4282      	cmp	r2, r0
 8002060:	dd19      	ble.n	8002096 <__kernel_rem_pio2+0x26e>
 8002062:	aa0e      	add	r2, sp, #56	; 0x38
 8002064:	ac0e      	add	r4, sp, #56	; 0x38
 8002066:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
 800206a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800206e:	1a51      	subs	r1, r2, r1
 8002070:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
 8002074:	9900      	ldr	r1, [sp, #0]
 8002076:	3302      	adds	r3, #2
 8002078:	4299      	cmp	r1, r3
 800207a:	dd0c      	ble.n	8002096 <__kernel_rem_pio2+0x26e>
 800207c:	4610      	mov	r0, r2
 800207e:	9a00      	ldr	r2, [sp, #0]
 8002080:	a90e      	add	r1, sp, #56	; 0x38
 8002082:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8002086:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	1a82      	subs	r2, r0, r2
 800208e:	f843 2b04 	str.w	r2, [r3], #4
 8002092:	428b      	cmp	r3, r1
 8002094:	d1f9      	bne.n	800208a <__kernel_rem_pio2+0x262>
 8002096:	9b06      	ldr	r3, [sp, #24]
 8002098:	2b00      	cmp	r3, #0
 800209a:	dd1b      	ble.n	80020d4 <__kernel_rem_pio2+0x2ac>
 800209c:	9b06      	ldr	r3, [sp, #24]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	f04f 0401 	mov.w	r4, #1
 80020a4:	f040 8241 	bne.w	800252a <__kernel_rem_pio2+0x702>
 80020a8:	9b00      	ldr	r3, [sp, #0]
 80020aa:	1e5a      	subs	r2, r3, #1
 80020ac:	ab0e      	add	r3, sp, #56	; 0x38
 80020ae:	a90e      	add	r1, sp, #56	; 0x38
 80020b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020b4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80020b8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80020bc:	e241      	b.n	8002542 <__kernel_rem_pio2+0x71a>
 80020be:	bf00      	nop
 80020c0:	08002c50 	.word	0x08002c50
 80020c4:	2aaaaaab 	.word	0x2aaaaaab
 80020c8:	3e700000 	.word	0x3e700000
 80020cc:	41700000 	.word	0x41700000
 80020d0:	40200000 	.word	0x40200000
 80020d4:	2d02      	cmp	r5, #2
 80020d6:	d115      	bne.n	8002104 <__kernel_rem_pio2+0x2dc>
 80020d8:	4632      	mov	r2, r6
 80020da:	463b      	mov	r3, r7
 80020dc:	2000      	movs	r0, #0
 80020de:	4994      	ldr	r1, [pc, #592]	; (8002330 <__kernel_rem_pio2+0x508>)
 80020e0:	f7fe f856 	bl	8000190 <__aeabi_dsub>
 80020e4:	4606      	mov	r6, r0
 80020e6:	460f      	mov	r7, r1
 80020e8:	9806      	ldr	r0, [sp, #24]
 80020ea:	ed9f 0b8d 	vldr	d0, [pc, #564]	; 8002320 <__kernel_rem_pio2+0x4f8>
 80020ee:	f000 fc37 	bl	8002960 <scalbn>
 80020f2:	4630      	mov	r0, r6
 80020f4:	4639      	mov	r1, r7
 80020f6:	ec53 2b10 	vmov	r2, r3, d0
 80020fa:	f7fe f849 	bl	8000190 <__aeabi_dsub>
 80020fe:	2502      	movs	r5, #2
 8002100:	4606      	mov	r6, r0
 8002102:	460f      	mov	r7, r1
 8002104:	2200      	movs	r2, #0
 8002106:	2300      	movs	r3, #0
 8002108:	4630      	mov	r0, r6
 800210a:	4639      	mov	r1, r7
 800210c:	f7fe fc80 	bl	8000a10 <__aeabi_dcmpeq>
 8002110:	2800      	cmp	r0, #0
 8002112:	f000 823b 	beq.w	800258c <__kernel_rem_pio2+0x764>
 8002116:	9a00      	ldr	r2, [sp, #0]
 8002118:	9b07      	ldr	r3, [sp, #28]
 800211a:	1e50      	subs	r0, r2, #1
 800211c:	4283      	cmp	r3, r0
 800211e:	dc0f      	bgt.n	8002140 <__kernel_rem_pio2+0x318>
 8002120:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 8002124:	3b01      	subs	r3, #1
 8002126:	aa0e      	add	r2, sp, #56	; 0x38
 8002128:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800212a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800212e:	2200      	movs	r2, #0
 8002130:	f853 1904 	ldr.w	r1, [r3], #-4
 8002134:	42a3      	cmp	r3, r4
 8002136:	ea42 0201 	orr.w	r2, r2, r1
 800213a:	d1f9      	bne.n	8002130 <__kernel_rem_pio2+0x308>
 800213c:	2a00      	cmp	r2, #0
 800213e:	d167      	bne.n	8002210 <__kernel_rem_pio2+0x3e8>
 8002140:	9b07      	ldr	r3, [sp, #28]
 8002142:	aa0e      	add	r2, sp, #56	; 0x38
 8002144:	3b01      	subs	r3, #1
 8002146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214a:	2b00      	cmp	r3, #0
 800214c:	f040 821c 	bne.w	8002588 <__kernel_rem_pio2+0x760>
 8002150:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002152:	2301      	movs	r3, #1
 8002154:	f852 1904 	ldr.w	r1, [r2], #-4
 8002158:	3301      	adds	r3, #1
 800215a:	2900      	cmp	r1, #0
 800215c:	d0fa      	beq.n	8002154 <__kernel_rem_pio2+0x32c>
 800215e:	9a00      	ldr	r2, [sp, #0]
 8002160:	18d3      	adds	r3, r2, r3
 8002162:	f102 0a01 	add.w	sl, r2, #1
 8002166:	459a      	cmp	sl, r3
 8002168:	9309      	str	r3, [sp, #36]	; 0x24
 800216a:	dc3d      	bgt.n	80021e8 <__kernel_rem_pio2+0x3c0>
 800216c:	9b00      	ldr	r3, [sp, #0]
 800216e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002170:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002172:	440b      	add	r3, r1
 8002174:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002176:	eb0a 0802 	add.w	r8, sl, r2
 800217a:	4699      	mov	r9, r3
 800217c:	ab22      	add	r3, sp, #136	; 0x88
 800217e:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8002182:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8002186:	188b      	adds	r3, r1, r2
 8002188:	9aa5      	ldr	r2, [sp, #660]	; 0x294
 800218a:	f108 38ff 	add.w	r8, r8, #4294967295
 800218e:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 8002192:	aa72      	add	r2, sp, #456	; 0x1c8
 8002194:	eb02 0aca 	add.w	sl, r2, sl, lsl #3
 8002198:	9aa5      	ldr	r2, [sp, #660]	; 0x294
 800219a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	f858 0f04 	ldr.w	r0, [r8, #4]!
 80021a4:	f7fe f942 	bl	800042c <__aeabi_i2d>
 80021a8:	9b03      	ldr	r3, [sp, #12]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	e8e9 0102 	strd	r0, r1, [r9], #8
 80021b0:	f04f 0600 	mov.w	r6, #0
 80021b4:	f04f 0700 	mov.w	r7, #0
 80021b8:	db11      	blt.n	80021de <__kernel_rem_pio2+0x3b6>
 80021ba:	9c04      	ldr	r4, [sp, #16]
 80021bc:	464d      	mov	r5, r9
 80021be:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80021c2:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80021c6:	f7fe f99b 	bl	8000500 <__aeabi_dmul>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	4630      	mov	r0, r6
 80021d0:	4639      	mov	r1, r7
 80021d2:	f7fd ffdf 	bl	8000194 <__adddf3>
 80021d6:	455c      	cmp	r4, fp
 80021d8:	4606      	mov	r6, r0
 80021da:	460f      	mov	r7, r1
 80021dc:	d1ef      	bne.n	80021be <__kernel_rem_pio2+0x396>
 80021de:	9b00      	ldr	r3, [sp, #0]
 80021e0:	4598      	cmp	r8, r3
 80021e2:	e8ea 6702 	strd	r6, r7, [sl], #8
 80021e6:	d1db      	bne.n	80021a0 <__kernel_rem_pio2+0x378>
 80021e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	e69f      	b.n	8001f2e <__kernel_rem_pio2+0x106>
 80021ee:	d106      	bne.n	80021fe <__kernel_rem_pio2+0x3d6>
 80021f0:	9b00      	ldr	r3, [sp, #0]
 80021f2:	aa0e      	add	r2, sp, #56	; 0x38
 80021f4:	3b01      	subs	r3, #1
 80021f6:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 80021fa:	15ed      	asrs	r5, r5, #23
 80021fc:	e711      	b.n	8002022 <__kernel_rem_pio2+0x1fa>
 80021fe:	2200      	movs	r2, #0
 8002200:	4b4c      	ldr	r3, [pc, #304]	; (8002334 <__kernel_rem_pio2+0x50c>)
 8002202:	f7fe fc23 	bl	8000a4c <__aeabi_dcmpge>
 8002206:	2800      	cmp	r0, #0
 8002208:	f040 8172 	bne.w	80024f0 <__kernel_rem_pio2+0x6c8>
 800220c:	4605      	mov	r5, r0
 800220e:	e779      	b.n	8002104 <__kernel_rem_pio2+0x2dc>
 8002210:	a90e      	add	r1, sp, #56	; 0x38
 8002212:	9503      	str	r5, [sp, #12]
 8002214:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 8002218:	9906      	ldr	r1, [sp, #24]
 800221a:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 800221e:	3918      	subs	r1, #24
 8002220:	4602      	mov	r2, r0
 8002222:	9000      	str	r0, [sp, #0]
 8002224:	9106      	str	r1, [sp, #24]
 8002226:	b96b      	cbnz	r3, 8002244 <__kernel_rem_pio2+0x41c>
 8002228:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 800222c:	3b01      	subs	r3, #1
 800222e:	a80e      	add	r0, sp, #56	; 0x38
 8002230:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8002234:	f853 0904 	ldr.w	r0, [r3], #-4
 8002238:	3a01      	subs	r2, #1
 800223a:	3918      	subs	r1, #24
 800223c:	2800      	cmp	r0, #0
 800223e:	d0f9      	beq.n	8002234 <__kernel_rem_pio2+0x40c>
 8002240:	9200      	str	r2, [sp, #0]
 8002242:	9106      	str	r1, [sp, #24]
 8002244:	9806      	ldr	r0, [sp, #24]
 8002246:	ed9f 0b36 	vldr	d0, [pc, #216]	; 8002320 <__kernel_rem_pio2+0x4f8>
 800224a:	f000 fb89 	bl	8002960 <scalbn>
 800224e:	9b00      	ldr	r3, [sp, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	ec55 4b10 	vmov	r4, r5, d0
 8002256:	f2c0 81fc 	blt.w	8002652 <__kernel_rem_pio2+0x82a>
 800225a:	00da      	lsls	r2, r3, #3
 800225c:	a972      	add	r1, sp, #456	; 0x1c8
 800225e:	eb01 0b02 	add.w	fp, r1, r2
 8002262:	9206      	str	r2, [sp, #24]
 8002264:	aa0e      	add	r2, sp, #56	; 0x38
 8002266:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 800226a:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8002338 <__kernel_rem_pio2+0x510>
 800226e:	f04f 0800 	mov.w	r8, #0
 8002272:	f10b 0708 	add.w	r7, fp, #8
 8002276:	3604      	adds	r6, #4
 8002278:	f856 0d04 	ldr.w	r0, [r6, #-4]!
 800227c:	f7fe f8d6 	bl	800042c <__aeabi_i2d>
 8002280:	4622      	mov	r2, r4
 8002282:	462b      	mov	r3, r5
 8002284:	f7fe f93c 	bl	8000500 <__aeabi_dmul>
 8002288:	464b      	mov	r3, r9
 800228a:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800228e:	4642      	mov	r2, r8
 8002290:	4620      	mov	r0, r4
 8002292:	4629      	mov	r1, r5
 8002294:	f7fe f934 	bl	8000500 <__aeabi_dmul>
 8002298:	ab0e      	add	r3, sp, #56	; 0x38
 800229a:	429e      	cmp	r6, r3
 800229c:	4604      	mov	r4, r0
 800229e:	460d      	mov	r5, r1
 80022a0:	d1ea      	bne.n	8002278 <__kernel_rem_pio2+0x450>
 80022a2:	ac4a      	add	r4, sp, #296	; 0x128
 80022a4:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80022a8:	9404      	str	r4, [sp, #16]
 80022aa:	f04f 0a00 	mov.w	sl, #0
 80022ae:	f1b9 0f00 	cmp.w	r9, #0
 80022b2:	f2c0 812f 	blt.w	8002514 <__kernel_rem_pio2+0x6ec>
 80022b6:	f8df 8084 	ldr.w	r8, [pc, #132]	; 800233c <__kernel_rem_pio2+0x514>
 80022ba:	465d      	mov	r5, fp
 80022bc:	a11a      	add	r1, pc, #104	; (adr r1, 8002328 <__kernel_rem_pio2+0x500>)
 80022be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80022c2:	2600      	movs	r6, #0
 80022c4:	2700      	movs	r7, #0
 80022c6:	2400      	movs	r4, #0
 80022c8:	e003      	b.n	80022d2 <__kernel_rem_pio2+0x4aa>
 80022ca:	4554      	cmp	r4, sl
 80022cc:	dc10      	bgt.n	80022f0 <__kernel_rem_pio2+0x4c8>
 80022ce:	e8f8 0102 	ldrd	r0, r1, [r8], #8
 80022d2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80022d6:	f7fe f913 	bl	8000500 <__aeabi_dmul>
 80022da:	4602      	mov	r2, r0
 80022dc:	460b      	mov	r3, r1
 80022de:	4630      	mov	r0, r6
 80022e0:	4639      	mov	r1, r7
 80022e2:	f7fd ff57 	bl	8000194 <__adddf3>
 80022e6:	3401      	adds	r4, #1
 80022e8:	45a1      	cmp	r9, r4
 80022ea:	4606      	mov	r6, r0
 80022ec:	460f      	mov	r7, r1
 80022ee:	daec      	bge.n	80022ca <__kernel_rem_pio2+0x4a2>
 80022f0:	9b04      	ldr	r3, [sp, #16]
 80022f2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80022f6:	f1ab 0b08 	sub.w	fp, fp, #8
 80022fa:	e9c3 6700 	strd	r6, r7, [r3]
 80022fe:	ab70      	add	r3, sp, #448	; 0x1c0
 8002300:	459b      	cmp	fp, r3
 8002302:	f10a 0a01 	add.w	sl, sl, #1
 8002306:	d1d2      	bne.n	80022ae <__kernel_rem_pio2+0x486>
 8002308:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800230a:	9c04      	ldr	r4, [sp, #16]
 800230c:	2b03      	cmp	r3, #3
 800230e:	f200 808d 	bhi.w	800242c <__kernel_rem_pio2+0x604>
 8002312:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002316:	00c9      	.short	0x00c9
 8002318:	00920092 	.word	0x00920092
 800231c:	0015      	.short	0x0015
 800231e:	bf00      	nop
 8002320:	00000000 	.word	0x00000000
 8002324:	3ff00000 	.word	0x3ff00000
 8002328:	40000000 	.word	0x40000000
 800232c:	3ff921fb 	.word	0x3ff921fb
 8002330:	3ff00000 	.word	0x3ff00000
 8002334:	3fe00000 	.word	0x3fe00000
 8002338:	3e700000 	.word	0x3e700000
 800233c:	08002c18 	.word	0x08002c18
 8002340:	9b00      	ldr	r3, [sp, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	f340 8182 	ble.w	800264c <__kernel_rem_pio2+0x824>
 8002348:	9a06      	ldr	r2, [sp, #24]
 800234a:	eb04 0a02 	add.w	sl, r4, r2
 800234e:	e9da 8900 	ldrd	r8, r9, [sl]
 8002352:	f102 0508 	add.w	r5, r2, #8
 8002356:	4425      	add	r5, r4
 8002358:	f50d 7b98 	add.w	fp, sp, #304	; 0x130
 800235c:	ed1a 7b02 	vldr	d7, [sl, #-8]
 8002360:	4642      	mov	r2, r8
 8002362:	464b      	mov	r3, r9
 8002364:	ec51 0b17 	vmov	r0, r1, d7
 8002368:	ed8d 7b04 	vstr	d7, [sp, #16]
 800236c:	f7fd ff12 	bl	8000194 <__adddf3>
 8002370:	4606      	mov	r6, r0
 8002372:	460f      	mov	r7, r1
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800237c:	f7fd ff08 	bl	8000190 <__aeabi_dsub>
 8002380:	4642      	mov	r2, r8
 8002382:	464b      	mov	r3, r9
 8002384:	f7fd ff06 	bl	8000194 <__adddf3>
 8002388:	e965 0102 	strd	r0, r1, [r5, #-8]!
 800238c:	455d      	cmp	r5, fp
 800238e:	46b0      	mov	r8, r6
 8002390:	46b9      	mov	r9, r7
 8002392:	e96a 6702 	strd	r6, r7, [sl, #-8]!
 8002396:	d1e1      	bne.n	800235c <__kernel_rem_pio2+0x534>
 8002398:	9b00      	ldr	r3, [sp, #0]
 800239a:	2b01      	cmp	r3, #1
 800239c:	f340 8156 	ble.w	800264c <__kernel_rem_pio2+0x824>
 80023a0:	9b06      	ldr	r3, [sp, #24]
 80023a2:	18e5      	adds	r5, r4, r3
 80023a4:	e9d5 8900 	ldrd	r8, r9, [r5]
 80023a8:	f103 0b08 	add.w	fp, r3, #8
 80023ac:	eb04 0a0b 	add.w	sl, r4, fp
 80023b0:	ed15 7b02 	vldr	d7, [r5, #-8]
 80023b4:	4642      	mov	r2, r8
 80023b6:	464b      	mov	r3, r9
 80023b8:	ec51 0b17 	vmov	r0, r1, d7
 80023bc:	ed8d 7b00 	vstr	d7, [sp]
 80023c0:	f7fd fee8 	bl	8000194 <__adddf3>
 80023c4:	4606      	mov	r6, r0
 80023c6:	460f      	mov	r7, r1
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80023d0:	f7fd fede 	bl	8000190 <__aeabi_dsub>
 80023d4:	464b      	mov	r3, r9
 80023d6:	4642      	mov	r2, r8
 80023d8:	f7fd fedc 	bl	8000194 <__adddf3>
 80023dc:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80023e0:	ab4e      	add	r3, sp, #312	; 0x138
 80023e2:	4553      	cmp	r3, sl
 80023e4:	46b0      	mov	r8, r6
 80023e6:	46b9      	mov	r9, r7
 80023e8:	e965 6702 	strd	r6, r7, [r5, #-8]!
 80023ec:	d1e0      	bne.n	80023b0 <__kernel_rem_pio2+0x588>
 80023ee:	2000      	movs	r0, #0
 80023f0:	2100      	movs	r1, #0
 80023f2:	eb04 050b 	add.w	r5, r4, fp
 80023f6:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80023fa:	f7fd fecb 	bl	8000194 <__adddf3>
 80023fe:	45aa      	cmp	sl, r5
 8002400:	d1f9      	bne.n	80023f6 <__kernel_rem_pio2+0x5ce>
 8002402:	9b03      	ldr	r3, [sp, #12]
 8002404:	2b00      	cmp	r3, #0
 8002406:	f000 810b 	beq.w	8002620 <__kernel_rem_pio2+0x7f8>
 800240a:	6862      	ldr	r2, [r4, #4]
 800240c:	68e3      	ldr	r3, [r4, #12]
 800240e:	9f08      	ldr	r7, [sp, #32]
 8002410:	6825      	ldr	r5, [r4, #0]
 8002412:	68a4      	ldr	r4, [r4, #8]
 8002414:	603d      	str	r5, [r7, #0]
 8002416:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800241a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800241e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8002422:	607a      	str	r2, [r7, #4]
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	60bc      	str	r4, [r7, #8]
 8002428:	6138      	str	r0, [r7, #16]
 800242a:	6179      	str	r1, [r7, #20]
 800242c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800242e:	f003 0007 	and.w	r0, r3, #7
 8002432:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8002436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800243a:	9d06      	ldr	r5, [sp, #24]
 800243c:	3508      	adds	r5, #8
 800243e:	4425      	add	r5, r4
 8002440:	2000      	movs	r0, #0
 8002442:	2100      	movs	r1, #0
 8002444:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8002448:	f7fd fea4 	bl	8000194 <__adddf3>
 800244c:	42a5      	cmp	r5, r4
 800244e:	d1f9      	bne.n	8002444 <__kernel_rem_pio2+0x61c>
 8002450:	9b03      	ldr	r3, [sp, #12]
 8002452:	2b00      	cmp	r3, #0
 8002454:	f000 80d3 	beq.w	80025fe <__kernel_rem_pio2+0x7d6>
 8002458:	9e08      	ldr	r6, [sp, #32]
 800245a:	4602      	mov	r2, r0
 800245c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002460:	e886 000c 	stmia.w	r6, {r2, r3}
 8002464:	460b      	mov	r3, r1
 8002466:	4602      	mov	r2, r0
 8002468:	e9d4 0100 	ldrd	r0, r1, [r4]
 800246c:	f7fd fe90 	bl	8000190 <__aeabi_dsub>
 8002470:	9b00      	ldr	r3, [sp, #0]
 8002472:	2b00      	cmp	r3, #0
 8002474:	dd0b      	ble.n	800248e <__kernel_rem_pio2+0x666>
 8002476:	ad4c      	add	r5, sp, #304	; 0x130
 8002478:	2401      	movs	r4, #1
 800247a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800247e:	f7fd fe89 	bl	8000194 <__adddf3>
 8002482:	9b00      	ldr	r3, [sp, #0]
 8002484:	3401      	adds	r4, #1
 8002486:	42a3      	cmp	r3, r4
 8002488:	daf7      	bge.n	800247a <__kernel_rem_pio2+0x652>
 800248a:	9b03      	ldr	r3, [sp, #12]
 800248c:	b113      	cbz	r3, 8002494 <__kernel_rem_pio2+0x66c>
 800248e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002492:	4619      	mov	r1, r3
 8002494:	9b08      	ldr	r3, [sp, #32]
 8002496:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800249a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800249c:	f003 0007 	and.w	r0, r3, #7
 80024a0:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80024a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024a8:	9d06      	ldr	r5, [sp, #24]
 80024aa:	3508      	adds	r5, #8
 80024ac:	2000      	movs	r0, #0
 80024ae:	2100      	movs	r1, #0
 80024b0:	4425      	add	r5, r4
 80024b2:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80024b6:	f7fd fe6d 	bl	8000194 <__adddf3>
 80024ba:	42ac      	cmp	r4, r5
 80024bc:	d1f9      	bne.n	80024b2 <__kernel_rem_pio2+0x68a>
 80024be:	9b03      	ldr	r3, [sp, #12]
 80024c0:	b113      	cbz	r3, 80024c8 <__kernel_rem_pio2+0x6a0>
 80024c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80024c6:	4619      	mov	r1, r3
 80024c8:	9b08      	ldr	r3, [sp, #32]
 80024ca:	e9c3 0100 	strd	r0, r1, [r3]
 80024ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80024d0:	f003 0007 	and.w	r0, r3, #7
 80024d4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80024d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024dc:	2600      	movs	r6, #0
 80024de:	2700      	movs	r7, #0
 80024e0:	e8ea 6702 	strd	r6, r7, [sl], #8
 80024e4:	45da      	cmp	sl, fp
 80024e6:	f109 0908 	add.w	r9, r9, #8
 80024ea:	f47f acf2 	bne.w	8001ed2 <__kernel_rem_pio2+0xaa>
 80024ee:	e50e      	b.n	8001f0e <__kernel_rem_pio2+0xe6>
 80024f0:	9b00      	ldr	r3, [sp, #0]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f108 0801 	add.w	r8, r8, #1
 80024f8:	bfc8      	it	gt
 80024fa:	2502      	movgt	r5, #2
 80024fc:	f73f ad99 	bgt.w	8002032 <__kernel_rem_pio2+0x20a>
 8002500:	4632      	mov	r2, r6
 8002502:	463b      	mov	r3, r7
 8002504:	2000      	movs	r0, #0
 8002506:	4961      	ldr	r1, [pc, #388]	; (800268c <__kernel_rem_pio2+0x864>)
 8002508:	f7fd fe42 	bl	8000190 <__aeabi_dsub>
 800250c:	2502      	movs	r5, #2
 800250e:	4606      	mov	r6, r0
 8002510:	460f      	mov	r7, r1
 8002512:	e5f7      	b.n	8002104 <__kernel_rem_pio2+0x2dc>
 8002514:	2600      	movs	r6, #0
 8002516:	2700      	movs	r7, #0
 8002518:	e6ea      	b.n	80022f0 <__kernel_rem_pio2+0x4c8>
 800251a:	9b06      	ldr	r3, [sp, #24]
 800251c:	2b00      	cmp	r3, #0
 800251e:	dd27      	ble.n	8002570 <__kernel_rem_pio2+0x748>
 8002520:	2400      	movs	r4, #0
 8002522:	9b06      	ldr	r3, [sp, #24]
 8002524:	2b01      	cmp	r3, #1
 8002526:	f43f adbf 	beq.w	80020a8 <__kernel_rem_pio2+0x280>
 800252a:	2b02      	cmp	r3, #2
 800252c:	d109      	bne.n	8002542 <__kernel_rem_pio2+0x71a>
 800252e:	9b00      	ldr	r3, [sp, #0]
 8002530:	1e5a      	subs	r2, r3, #1
 8002532:	ab0e      	add	r3, sp, #56	; 0x38
 8002534:	a90e      	add	r1, sp, #56	; 0x38
 8002536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800253a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800253e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8002542:	2d02      	cmp	r5, #2
 8002544:	f47f adde 	bne.w	8002104 <__kernel_rem_pio2+0x2dc>
 8002548:	4632      	mov	r2, r6
 800254a:	463b      	mov	r3, r7
 800254c:	2000      	movs	r0, #0
 800254e:	494f      	ldr	r1, [pc, #316]	; (800268c <__kernel_rem_pio2+0x864>)
 8002550:	f7fd fe1e 	bl	8000190 <__aeabi_dsub>
 8002554:	4606      	mov	r6, r0
 8002556:	460f      	mov	r7, r1
 8002558:	2c00      	cmp	r4, #0
 800255a:	f43f add3 	beq.w	8002104 <__kernel_rem_pio2+0x2dc>
 800255e:	e5c3      	b.n	80020e8 <__kernel_rem_pio2+0x2c0>
 8002560:	9900      	ldr	r1, [sp, #0]
 8002562:	3301      	adds	r3, #1
 8002564:	4299      	cmp	r1, r3
 8002566:	f47f ad6e 	bne.w	8002046 <__kernel_rem_pio2+0x21e>
 800256a:	9b06      	ldr	r3, [sp, #24]
 800256c:	2b00      	cmp	r3, #0
 800256e:	dcd8      	bgt.n	8002522 <__kernel_rem_pio2+0x6fa>
 8002570:	2d02      	cmp	r5, #2
 8002572:	f47f adc7 	bne.w	8002104 <__kernel_rem_pio2+0x2dc>
 8002576:	4632      	mov	r2, r6
 8002578:	463b      	mov	r3, r7
 800257a:	2000      	movs	r0, #0
 800257c:	4943      	ldr	r1, [pc, #268]	; (800268c <__kernel_rem_pio2+0x864>)
 800257e:	f7fd fe07 	bl	8000190 <__aeabi_dsub>
 8002582:	4606      	mov	r6, r0
 8002584:	460f      	mov	r7, r1
 8002586:	e5bd      	b.n	8002104 <__kernel_rem_pio2+0x2dc>
 8002588:	2301      	movs	r3, #1
 800258a:	e5e8      	b.n	800215e <__kernel_rem_pio2+0x336>
 800258c:	9b06      	ldr	r3, [sp, #24]
 800258e:	9503      	str	r5, [sp, #12]
 8002590:	4258      	negs	r0, r3
 8002592:	ec47 6b10 	vmov	d0, r6, r7
 8002596:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 800259a:	f000 f9e1 	bl	8002960 <scalbn>
 800259e:	ec55 4b10 	vmov	r4, r5, d0
 80025a2:	2200      	movs	r2, #0
 80025a4:	4b3a      	ldr	r3, [pc, #232]	; (8002690 <__kernel_rem_pio2+0x868>)
 80025a6:	ee10 0a10 	vmov	r0, s0
 80025aa:	4629      	mov	r1, r5
 80025ac:	f7fe fa4e 	bl	8000a4c <__aeabi_dcmpge>
 80025b0:	2800      	cmp	r0, #0
 80025b2:	d041      	beq.n	8002638 <__kernel_rem_pio2+0x810>
 80025b4:	2200      	movs	r2, #0
 80025b6:	4b37      	ldr	r3, [pc, #220]	; (8002694 <__kernel_rem_pio2+0x86c>)
 80025b8:	4620      	mov	r0, r4
 80025ba:	4629      	mov	r1, r5
 80025bc:	f7fd ffa0 	bl	8000500 <__aeabi_dmul>
 80025c0:	f7fe fa58 	bl	8000a74 <__aeabi_d2iz>
 80025c4:	4606      	mov	r6, r0
 80025c6:	f7fd ff31 	bl	800042c <__aeabi_i2d>
 80025ca:	2200      	movs	r2, #0
 80025cc:	4b30      	ldr	r3, [pc, #192]	; (8002690 <__kernel_rem_pio2+0x868>)
 80025ce:	f7fd ff97 	bl	8000500 <__aeabi_dmul>
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	4620      	mov	r0, r4
 80025d8:	4629      	mov	r1, r5
 80025da:	f7fd fdd9 	bl	8000190 <__aeabi_dsub>
 80025de:	f7fe fa49 	bl	8000a74 <__aeabi_d2iz>
 80025e2:	9900      	ldr	r1, [sp, #0]
 80025e4:	9b06      	ldr	r3, [sp, #24]
 80025e6:	460a      	mov	r2, r1
 80025e8:	3318      	adds	r3, #24
 80025ea:	3201      	adds	r2, #1
 80025ec:	9306      	str	r3, [sp, #24]
 80025ee:	460b      	mov	r3, r1
 80025f0:	a90e      	add	r1, sp, #56	; 0x38
 80025f2:	9200      	str	r2, [sp, #0]
 80025f4:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 80025f8:	f841 6022 	str.w	r6, [r1, r2, lsl #2]
 80025fc:	e622      	b.n	8002244 <__kernel_rem_pio2+0x41c>
 80025fe:	9b08      	ldr	r3, [sp, #32]
 8002600:	4602      	mov	r2, r0
 8002602:	e9c3 0100 	strd	r0, r1, [r3]
 8002606:	460b      	mov	r3, r1
 8002608:	e9d4 0100 	ldrd	r0, r1, [r4]
 800260c:	f7fd fdc0 	bl	8000190 <__aeabi_dsub>
 8002610:	9b00      	ldr	r3, [sp, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	f73f af2f 	bgt.w	8002476 <__kernel_rem_pio2+0x64e>
 8002618:	9b08      	ldr	r3, [sp, #32]
 800261a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800261e:	e73c      	b.n	800249a <__kernel_rem_pio2+0x672>
 8002620:	e9d4 6700 	ldrd	r6, r7, [r4]
 8002624:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8002628:	9d08      	ldr	r5, [sp, #32]
 800262a:	e9c5 0104 	strd	r0, r1, [r5, #16]
 800262e:	e9c5 6700 	strd	r6, r7, [r5]
 8002632:	e9c5 2302 	strd	r2, r3, [r5, #8]
 8002636:	e6f9      	b.n	800242c <__kernel_rem_pio2+0x604>
 8002638:	4629      	mov	r1, r5
 800263a:	4620      	mov	r0, r4
 800263c:	f7fe fa1a 	bl	8000a74 <__aeabi_d2iz>
 8002640:	9a00      	ldr	r2, [sp, #0]
 8002642:	a90e      	add	r1, sp, #56	; 0x38
 8002644:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 8002648:	e5fc      	b.n	8002244 <__kernel_rem_pio2+0x41c>
 800264a:	ac4a      	add	r4, sp, #296	; 0x128
 800264c:	2000      	movs	r0, #0
 800264e:	2100      	movs	r1, #0
 8002650:	e6d7      	b.n	8002402 <__kernel_rem_pio2+0x5da>
 8002652:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8002654:	2b03      	cmp	r3, #3
 8002656:	f63f aee9 	bhi.w	800242c <__kernel_rem_pio2+0x604>
 800265a:	a201      	add	r2, pc, #4	; (adr r2, 8002660 <__kernel_rem_pio2+0x838>)
 800265c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002660:	0800267f 	.word	0x0800267f
 8002664:	08002677 	.word	0x08002677
 8002668:	08002677 	.word	0x08002677
 800266c:	0800264b 	.word	0x0800264b
 8002670:	2001      	movs	r0, #1
 8002672:	2300      	movs	r3, #0
 8002674:	e4ed      	b.n	8002052 <__kernel_rem_pio2+0x22a>
 8002676:	2000      	movs	r0, #0
 8002678:	2100      	movs	r1, #0
 800267a:	ac4a      	add	r4, sp, #296	; 0x128
 800267c:	e6e8      	b.n	8002450 <__kernel_rem_pio2+0x628>
 800267e:	2000      	movs	r0, #0
 8002680:	2100      	movs	r1, #0
 8002682:	e71c      	b.n	80024be <__kernel_rem_pio2+0x696>
 8002684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	e440      	b.n	8001f0e <__kernel_rem_pio2+0xe6>
 800268c:	3ff00000 	.word	0x3ff00000
 8002690:	41700000 	.word	0x41700000
 8002694:	3e700000 	.word	0x3e700000

08002698 <__kernel_sin>:
 8002698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800269c:	ec55 4b10 	vmov	r4, r5, d0
 80026a0:	ed2d 8b02 	vpush	{d8}
 80026a4:	eeb0 8a41 	vmov.f32	s16, s2
 80026a8:	eef0 8a61 	vmov.f32	s17, s3
 80026ac:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80026b0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80026b4:	b083      	sub	sp, #12
 80026b6:	4682      	mov	sl, r0
 80026b8:	da07      	bge.n	80026ca <__kernel_sin+0x32>
 80026ba:	ee10 0a10 	vmov	r0, s0
 80026be:	4629      	mov	r1, r5
 80026c0:	f7fe f9d8 	bl	8000a74 <__aeabi_d2iz>
 80026c4:	2800      	cmp	r0, #0
 80026c6:	f000 808e 	beq.w	80027e6 <__kernel_sin+0x14e>
 80026ca:	4622      	mov	r2, r4
 80026cc:	462b      	mov	r3, r5
 80026ce:	4620      	mov	r0, r4
 80026d0:	4629      	mov	r1, r5
 80026d2:	f7fd ff15 	bl	8000500 <__aeabi_dmul>
 80026d6:	4606      	mov	r6, r0
 80026d8:	460f      	mov	r7, r1
 80026da:	4602      	mov	r2, r0
 80026dc:	460b      	mov	r3, r1
 80026de:	4620      	mov	r0, r4
 80026e0:	4629      	mov	r1, r5
 80026e2:	f7fd ff0d 	bl	8000500 <__aeabi_dmul>
 80026e6:	a347      	add	r3, pc, #284	; (adr r3, 8002804 <__kernel_sin+0x16c>)
 80026e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ec:	4680      	mov	r8, r0
 80026ee:	4689      	mov	r9, r1
 80026f0:	4630      	mov	r0, r6
 80026f2:	4639      	mov	r1, r7
 80026f4:	f7fd ff04 	bl	8000500 <__aeabi_dmul>
 80026f8:	a344      	add	r3, pc, #272	; (adr r3, 800280c <__kernel_sin+0x174>)
 80026fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fe:	f7fd fd47 	bl	8000190 <__aeabi_dsub>
 8002702:	4632      	mov	r2, r6
 8002704:	463b      	mov	r3, r7
 8002706:	f7fd fefb 	bl	8000500 <__aeabi_dmul>
 800270a:	a342      	add	r3, pc, #264	; (adr r3, 8002814 <__kernel_sin+0x17c>)
 800270c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002710:	f7fd fd40 	bl	8000194 <__adddf3>
 8002714:	4632      	mov	r2, r6
 8002716:	463b      	mov	r3, r7
 8002718:	f7fd fef2 	bl	8000500 <__aeabi_dmul>
 800271c:	a33f      	add	r3, pc, #252	; (adr r3, 800281c <__kernel_sin+0x184>)
 800271e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002722:	f7fd fd35 	bl	8000190 <__aeabi_dsub>
 8002726:	4632      	mov	r2, r6
 8002728:	463b      	mov	r3, r7
 800272a:	f7fd fee9 	bl	8000500 <__aeabi_dmul>
 800272e:	a33d      	add	r3, pc, #244	; (adr r3, 8002824 <__kernel_sin+0x18c>)
 8002730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002734:	f7fd fd2e 	bl	8000194 <__adddf3>
 8002738:	e9cd 0100 	strd	r0, r1, [sp]
 800273c:	f1ba 0f00 	cmp.w	sl, #0
 8002740:	d037      	beq.n	80027b2 <__kernel_sin+0x11a>
 8002742:	2200      	movs	r2, #0
 8002744:	4b2e      	ldr	r3, [pc, #184]	; (8002800 <__kernel_sin+0x168>)
 8002746:	ec51 0b18 	vmov	r0, r1, d8
 800274a:	f7fd fed9 	bl	8000500 <__aeabi_dmul>
 800274e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002752:	4682      	mov	sl, r0
 8002754:	468b      	mov	fp, r1
 8002756:	4640      	mov	r0, r8
 8002758:	4649      	mov	r1, r9
 800275a:	f7fd fed1 	bl	8000500 <__aeabi_dmul>
 800275e:	4602      	mov	r2, r0
 8002760:	460b      	mov	r3, r1
 8002762:	4650      	mov	r0, sl
 8002764:	4659      	mov	r1, fp
 8002766:	f7fd fd13 	bl	8000190 <__aeabi_dsub>
 800276a:	4632      	mov	r2, r6
 800276c:	463b      	mov	r3, r7
 800276e:	f7fd fec7 	bl	8000500 <__aeabi_dmul>
 8002772:	ec53 2b18 	vmov	r2, r3, d8
 8002776:	f7fd fd0b 	bl	8000190 <__aeabi_dsub>
 800277a:	a31f      	add	r3, pc, #124	; (adr r3, 80027f8 <__kernel_sin+0x160>)
 800277c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002780:	4606      	mov	r6, r0
 8002782:	460f      	mov	r7, r1
 8002784:	4640      	mov	r0, r8
 8002786:	4649      	mov	r1, r9
 8002788:	f7fd feba 	bl	8000500 <__aeabi_dmul>
 800278c:	4602      	mov	r2, r0
 800278e:	460b      	mov	r3, r1
 8002790:	4630      	mov	r0, r6
 8002792:	4639      	mov	r1, r7
 8002794:	f7fd fcfe 	bl	8000194 <__adddf3>
 8002798:	4602      	mov	r2, r0
 800279a:	460b      	mov	r3, r1
 800279c:	4620      	mov	r0, r4
 800279e:	4629      	mov	r1, r5
 80027a0:	f7fd fcf6 	bl	8000190 <__aeabi_dsub>
 80027a4:	ec41 0b10 	vmov	d0, r0, r1
 80027a8:	b003      	add	sp, #12
 80027aa:	ecbd 8b02 	vpop	{d8}
 80027ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027b2:	4602      	mov	r2, r0
 80027b4:	460b      	mov	r3, r1
 80027b6:	4630      	mov	r0, r6
 80027b8:	4639      	mov	r1, r7
 80027ba:	f7fd fea1 	bl	8000500 <__aeabi_dmul>
 80027be:	a30e      	add	r3, pc, #56	; (adr r3, 80027f8 <__kernel_sin+0x160>)
 80027c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c4:	f7fd fce4 	bl	8000190 <__aeabi_dsub>
 80027c8:	4642      	mov	r2, r8
 80027ca:	464b      	mov	r3, r9
 80027cc:	f7fd fe98 	bl	8000500 <__aeabi_dmul>
 80027d0:	4622      	mov	r2, r4
 80027d2:	462b      	mov	r3, r5
 80027d4:	f7fd fcde 	bl	8000194 <__adddf3>
 80027d8:	ec41 0b10 	vmov	d0, r0, r1
 80027dc:	b003      	add	sp, #12
 80027de:	ecbd 8b02 	vpop	{d8}
 80027e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027e6:	ec45 4b10 	vmov	d0, r4, r5
 80027ea:	b003      	add	sp, #12
 80027ec:	ecbd 8b02 	vpop	{d8}
 80027f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027f4:	f3af 8000 	nop.w
 80027f8:	55555549 	.word	0x55555549
 80027fc:	3fc55555 	.word	0x3fc55555
 8002800:	3fe00000 	.word	0x3fe00000
 8002804:	5acfd57c 	.word	0x5acfd57c
 8002808:	3de5d93a 	.word	0x3de5d93a
 800280c:	8a2b9ceb 	.word	0x8a2b9ceb
 8002810:	3e5ae5e6 	.word	0x3e5ae5e6
 8002814:	57b1fe7d 	.word	0x57b1fe7d
 8002818:	3ec71de3 	.word	0x3ec71de3
 800281c:	19c161d5 	.word	0x19c161d5
 8002820:	3f2a01a0 	.word	0x3f2a01a0
 8002824:	1110f8a6 	.word	0x1110f8a6
 8002828:	3f811111 	.word	0x3f811111

0800282c <fabs>:
 800282c:	ec53 2b10 	vmov	r2, r3, d0
 8002830:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002834:	ec43 2b10 	vmov	d0, r2, r3
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	0000      	movs	r0, r0
	...

08002840 <floor>:
 8002840:	ec51 0b10 	vmov	r0, r1, d0
 8002844:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8002848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800284c:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
 8002850:	2d13      	cmp	r5, #19
 8002852:	460c      	mov	r4, r1
 8002854:	460f      	mov	r7, r1
 8002856:	ee10 6a10 	vmov	r6, s0
 800285a:	dc1d      	bgt.n	8002898 <floor+0x58>
 800285c:	2d00      	cmp	r5, #0
 800285e:	db43      	blt.n	80028e8 <floor+0xa8>
 8002860:	4b3d      	ldr	r3, [pc, #244]	; (8002958 <floor+0x118>)
 8002862:	fa43 f805 	asr.w	r8, r3, r5
 8002866:	ea01 0308 	and.w	r3, r1, r8
 800286a:	4303      	orrs	r3, r0
 800286c:	d019      	beq.n	80028a2 <floor+0x62>
 800286e:	a338      	add	r3, pc, #224	; (adr r3, 8002950 <floor+0x110>)
 8002870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002874:	f7fd fc8e 	bl	8000194 <__adddf3>
 8002878:	2200      	movs	r2, #0
 800287a:	2300      	movs	r3, #0
 800287c:	f7fe f8f0 	bl	8000a60 <__aeabi_dcmpgt>
 8002880:	b120      	cbz	r0, 800288c <floor+0x4c>
 8002882:	2c00      	cmp	r4, #0
 8002884:	db49      	blt.n	800291a <floor+0xda>
 8002886:	ea27 0408 	bic.w	r4, r7, r8
 800288a:	2600      	movs	r6, #0
 800288c:	4623      	mov	r3, r4
 800288e:	4632      	mov	r2, r6
 8002890:	ec43 2b10 	vmov	d0, r2, r3
 8002894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002898:	2d33      	cmp	r5, #51	; 0x33
 800289a:	dd06      	ble.n	80028aa <floor+0x6a>
 800289c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80028a0:	d032      	beq.n	8002908 <floor+0xc8>
 80028a2:	ec41 0b10 	vmov	d0, r0, r1
 80028a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028aa:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80028ae:	f04f 38ff 	mov.w	r8, #4294967295
 80028b2:	fa28 f803 	lsr.w	r8, r8, r3
 80028b6:	ea10 0f08 	tst.w	r0, r8
 80028ba:	d0f2      	beq.n	80028a2 <floor+0x62>
 80028bc:	a324      	add	r3, pc, #144	; (adr r3, 8002950 <floor+0x110>)
 80028be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c2:	f7fd fc67 	bl	8000194 <__adddf3>
 80028c6:	2200      	movs	r2, #0
 80028c8:	2300      	movs	r3, #0
 80028ca:	f7fe f8c9 	bl	8000a60 <__aeabi_dcmpgt>
 80028ce:	2800      	cmp	r0, #0
 80028d0:	d0dc      	beq.n	800288c <floor+0x4c>
 80028d2:	2c00      	cmp	r4, #0
 80028d4:	db27      	blt.n	8002926 <floor+0xe6>
 80028d6:	463c      	mov	r4, r7
 80028d8:	ea26 0608 	bic.w	r6, r6, r8
 80028dc:	4623      	mov	r3, r4
 80028de:	4632      	mov	r2, r6
 80028e0:	ec43 2b10 	vmov	d0, r2, r3
 80028e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028e8:	a319      	add	r3, pc, #100	; (adr r3, 8002950 <floor+0x110>)
 80028ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ee:	f7fd fc51 	bl	8000194 <__adddf3>
 80028f2:	2200      	movs	r2, #0
 80028f4:	2300      	movs	r3, #0
 80028f6:	f7fe f8b3 	bl	8000a60 <__aeabi_dcmpgt>
 80028fa:	2800      	cmp	r0, #0
 80028fc:	d0c6      	beq.n	800288c <floor+0x4c>
 80028fe:	2c00      	cmp	r4, #0
 8002900:	db1c      	blt.n	800293c <floor+0xfc>
 8002902:	2600      	movs	r6, #0
 8002904:	4634      	mov	r4, r6
 8002906:	e7c1      	b.n	800288c <floor+0x4c>
 8002908:	ee10 2a10 	vmov	r2, s0
 800290c:	460b      	mov	r3, r1
 800290e:	f7fd fc41 	bl	8000194 <__adddf3>
 8002912:	ec41 0b10 	vmov	d0, r0, r1
 8002916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800291a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800291e:	fa43 f505 	asr.w	r5, r3, r5
 8002922:	442f      	add	r7, r5
 8002924:	e7af      	b.n	8002886 <floor+0x46>
 8002926:	2d14      	cmp	r5, #20
 8002928:	d010      	beq.n	800294c <floor+0x10c>
 800292a:	2301      	movs	r3, #1
 800292c:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
 8002930:	fa03 f505 	lsl.w	r5, r3, r5
 8002934:	19ae      	adds	r6, r5, r6
 8002936:	bf28      	it	cs
 8002938:	18ff      	addcs	r7, r7, r3
 800293a:	e7cc      	b.n	80028d6 <floor+0x96>
 800293c:	f024 4200 	bic.w	r2, r4, #2147483648	; 0x80000000
 8002940:	4b06      	ldr	r3, [pc, #24]	; (800295c <floor+0x11c>)
 8002942:	4332      	orrs	r2, r6
 8002944:	bf18      	it	ne
 8002946:	461c      	movne	r4, r3
 8002948:	2600      	movs	r6, #0
 800294a:	e79f      	b.n	800288c <floor+0x4c>
 800294c:	3701      	adds	r7, #1
 800294e:	e7c2      	b.n	80028d6 <floor+0x96>
 8002950:	8800759c 	.word	0x8800759c
 8002954:	7e37e43c 	.word	0x7e37e43c
 8002958:	000fffff 	.word	0x000fffff
 800295c:	bff00000 	.word	0xbff00000

08002960 <scalbn>:
 8002960:	ec53 2b10 	vmov	r2, r3, d0
 8002964:	b570      	push	{r4, r5, r6, lr}
 8002966:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800296a:	4619      	mov	r1, r3
 800296c:	4605      	mov	r5, r0
 800296e:	bb14      	cbnz	r4, 80029b6 <scalbn+0x56>
 8002970:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8002974:	4311      	orrs	r1, r2
 8002976:	d02a      	beq.n	80029ce <scalbn+0x6e>
 8002978:	4619      	mov	r1, r3
 800297a:	2200      	movs	r2, #0
 800297c:	4b38      	ldr	r3, [pc, #224]	; (8002a60 <scalbn+0x100>)
 800297e:	4e39      	ldr	r6, [pc, #228]	; (8002a64 <scalbn+0x104>)
 8002980:	ee10 0a10 	vmov	r0, s0
 8002984:	f7fd fdbc 	bl	8000500 <__aeabi_dmul>
 8002988:	42b5      	cmp	r5, r6
 800298a:	4602      	mov	r2, r0
 800298c:	460b      	mov	r3, r1
 800298e:	db1f      	blt.n	80029d0 <scalbn+0x70>
 8002990:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8002994:	3c36      	subs	r4, #54	; 0x36
 8002996:	442c      	add	r4, r5
 8002998:	f240 70fe 	movw	r0, #2046	; 0x7fe
 800299c:	4284      	cmp	r4, r0
 800299e:	dc1f      	bgt.n	80029e0 <scalbn+0x80>
 80029a0:	2c00      	cmp	r4, #0
 80029a2:	dd2d      	ble.n	8002a00 <scalbn+0xa0>
 80029a4:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 80029a8:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 80029ac:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 80029b0:	ec43 2b10 	vmov	d0, r2, r3
 80029b4:	bd70      	pop	{r4, r5, r6, pc}
 80029b6:	f240 70ff 	movw	r0, #2047	; 0x7ff
 80029ba:	4284      	cmp	r4, r0
 80029bc:	d1eb      	bne.n	8002996 <scalbn+0x36>
 80029be:	ee10 0a10 	vmov	r0, s0
 80029c2:	4619      	mov	r1, r3
 80029c4:	f7fd fbe6 	bl	8000194 <__adddf3>
 80029c8:	ec41 0b10 	vmov	d0, r0, r1
 80029cc:	bd70      	pop	{r4, r5, r6, pc}
 80029ce:	bd70      	pop	{r4, r5, r6, pc}
 80029d0:	a31f      	add	r3, pc, #124	; (adr r3, 8002a50 <scalbn+0xf0>)
 80029d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d6:	f7fd fd93 	bl	8000500 <__aeabi_dmul>
 80029da:	ec41 0b10 	vmov	d0, r0, r1
 80029de:	bd70      	pop	{r4, r5, r6, pc}
 80029e0:	ec43 2b11 	vmov	d1, r2, r3
 80029e4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8002a58 <scalbn+0xf8>
 80029e8:	f000 f840 	bl	8002a6c <copysign>
 80029ec:	a31a      	add	r3, pc, #104	; (adr r3, 8002a58 <scalbn+0xf8>)
 80029ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f2:	ec51 0b10 	vmov	r0, r1, d0
 80029f6:	f7fd fd83 	bl	8000500 <__aeabi_dmul>
 80029fa:	ec41 0b10 	vmov	d0, r0, r1
 80029fe:	bd70      	pop	{r4, r5, r6, pc}
 8002a00:	f114 0f35 	cmn.w	r4, #53	; 0x35
 8002a04:	da13      	bge.n	8002a2e <scalbn+0xce>
 8002a06:	f24c 3150 	movw	r1, #50000	; 0xc350
 8002a0a:	428d      	cmp	r5, r1
 8002a0c:	ec43 2b11 	vmov	d1, r2, r3
 8002a10:	dce8      	bgt.n	80029e4 <scalbn+0x84>
 8002a12:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8002a50 <scalbn+0xf0>
 8002a16:	f000 f829 	bl	8002a6c <copysign>
 8002a1a:	a30d      	add	r3, pc, #52	; (adr r3, 8002a50 <scalbn+0xf0>)
 8002a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a20:	ec51 0b10 	vmov	r0, r1, d0
 8002a24:	f7fd fd6c 	bl	8000500 <__aeabi_dmul>
 8002a28:	ec41 0b10 	vmov	d0, r0, r1
 8002a2c:	bd70      	pop	{r4, r5, r6, pc}
 8002a2e:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8002a32:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8002a36:	3436      	adds	r4, #54	; 0x36
 8002a38:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8002a3c:	4610      	mov	r0, r2
 8002a3e:	4619      	mov	r1, r3
 8002a40:	2200      	movs	r2, #0
 8002a42:	4b09      	ldr	r3, [pc, #36]	; (8002a68 <scalbn+0x108>)
 8002a44:	f7fd fd5c 	bl	8000500 <__aeabi_dmul>
 8002a48:	ec41 0b10 	vmov	d0, r0, r1
 8002a4c:	bd70      	pop	{r4, r5, r6, pc}
 8002a4e:	bf00      	nop
 8002a50:	c2f8f359 	.word	0xc2f8f359
 8002a54:	01a56e1f 	.word	0x01a56e1f
 8002a58:	8800759c 	.word	0x8800759c
 8002a5c:	7e37e43c 	.word	0x7e37e43c
 8002a60:	43500000 	.word	0x43500000
 8002a64:	ffff3cb0 	.word	0xffff3cb0
 8002a68:	3c900000 	.word	0x3c900000

08002a6c <copysign>:
 8002a6c:	ec53 2b10 	vmov	r2, r3, d0
 8002a70:	ee11 0a90 	vmov	r0, s3
 8002a74:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8002a78:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8002a7c:	ea41 0300 	orr.w	r3, r1, r0
 8002a80:	ec43 2b10 	vmov	d0, r2, r3
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop

08002a88 <npio2_hw>:
 8002a88:	21fb 3ff9 21fb 4009 d97c 4012 21fb 4019     .!.?.!.@|..@.!.@
 8002a98:	6a7a 401f d97c 4022 fdbb 4025 21fb 4029     zj.@|."@..%@.!)@
 8002aa8:	463a 402c 6a7a 402f 475c 4031 d97c 4032     :F,@zj/@\G1@|.2@
 8002ab8:	6b9c 4034 fdbb 4035 8fdb 4037 21fb 4039     .k4@..5@..7@.!9@
 8002ac8:	b41b 403a 463a 403c d85a 403d 6a7a 403f     ..:@:F<@Z.=@zj?@
 8002ad8:	7e4c 4040 475c 4041 106c 4042 d97c 4042     L~@@\GA@l.B@|.B@
 8002ae8:	a28c 4043 6b9c 4044 34ac 4045 fdbb 4045     ..C@.kD@.4E@..E@
 8002af8:	c6cb 4046 8fdb 4047 58eb 4048 21fb 4049     ..F@..G@.XH@.!I@

08002b08 <two_over_pi>:
 8002b08:	f983 00a2 4e44 006e 29fc 0015 57d1 0027     ....DNn..)...W'.
 8002b18:	34dd 00f5 db62 00c0 993c 0095 9041 0043     .4..b...<...A.C.
 8002b28:	5163 00fe debb 00ab 61b7 00c5 6e3a 0024     cQ.......a..:n$.
 8002b38:	4dd2 0042 0649 00e0 ea09 002e 921c 00d1     .MB.I...........
 8002b48:	1deb 00fe b129 001c 3ee8 00a7 35f5 0082     ....)....>...5..
 8002b58:	bb44 002e e99c 0084 26b4 0070 7e41 005f     D........&p.A~_.
 8002b68:	91d6 0039 8353 0039 f49c 0039 5f8b 0084     ..9.S.9...9.._..
 8002b78:	f928 00bd 1ff8 003b ffde 0097 980f 0005     (.....;.........
 8002b88:	2f11 00ef 5a0a 008b 1f6d 006d 7ecf 0036     ./...Z..m.m..~6.
 8002b98:	cb09 0027 4f46 00b7 669e 003f ea2d 005f     ..'.FO...f?.-._.
 8002ba8:	27ba 0075 ebe5 00c7 7b3d 00f1 39f7 0007     .'u.....={...9..
 8002bb8:	5292 008a 6bfb 00ea b11f 005f 5d08 008d     .R...k...._..]..
 8002bc8:	0330 0056 fc7b 0046 abf0 006b bc20 00cf     0.V.{.F...k. ...
 8002bd8:	f436 009a a9e3 001d 615e 0091 1b08 00e6     6.......^a......
 8002be8:	9985 0065 14a0 005f 408d 0068 d880 00ff     ..e..._..@h.....
 8002bf8:	7327 004d 0606 0031 56ca 0015 a8c9 0073     'sM...1..V....s.
 8002c08:	e27b 0060 8c6b 00c0                         {.`.k...

08002c10 <PIo2>:
 8002c10:	0000 4000 21fb 3ff9 0000 0000 442d 3e74     ...@.!.?....-Dt>
 8002c20:	0000 8000 4698 3cf8 0000 6000 cc51 3b78     .....F.<...`Q.x;
 8002c30:	0000 8000 1b83 39f0 0000 4000 2520 387a     .......9...@ %z8
 8002c40:	0000 8000 8222 36e3 0000 0000 f31d 3569     ...."..6......i5

08002c50 <init_jk>:
 8002c50:	0002 0000 0003 0000 0004 0000 0006 0000     ................
